
Ampelope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000591c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000658  08005b00  08005b00  00006b00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006158  08006158  000081d0  2**0
                  CONTENTS
  4 .ARM          00000008  08006158  08006158  00007158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006160  08006160  000081d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006160  08006160  00007160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08006168  08006168  00007168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  08006170  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f0  200001d0  08006340  000081d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006c0  08006340  000086c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000081d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034d58  00000000  00000000  00008200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e25  00000000  00000000  0003cf58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00007ee0  00000000  00000000  00040d7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000388  00000000  00000000  00048c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009ed  00000000  00000000  00048fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bac7  00000000  00000000  000499d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e4c4  00000000  00000000  0006549c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d0a5  00000000  00000000  00073960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00100a05  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002f4c  00000000  00000000  00100a48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000043  00000000  00000000  00103994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d0 	.word	0x200001d0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005ae4 	.word	0x08005ae4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d4 	.word	0x200001d4
 800021c:	08005ae4 	.word	0x08005ae4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_ldivmod>:
 8000bf8:	b97b      	cbnz	r3, 8000c1a <__aeabi_ldivmod+0x22>
 8000bfa:	b972      	cbnz	r2, 8000c1a <__aeabi_ldivmod+0x22>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bfbe      	ittt	lt
 8000c00:	2000      	movlt	r0, #0
 8000c02:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c06:	e006      	blt.n	8000c16 <__aeabi_ldivmod+0x1e>
 8000c08:	bf08      	it	eq
 8000c0a:	2800      	cmpeq	r0, #0
 8000c0c:	bf1c      	itt	ne
 8000c0e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c12:	f04f 30ff 	movne.w	r0, #4294967295
 8000c16:	f000 b99d 	b.w	8000f54 <__aeabi_idiv0>
 8000c1a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c1e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c22:	2900      	cmp	r1, #0
 8000c24:	db09      	blt.n	8000c3a <__aeabi_ldivmod+0x42>
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	db1a      	blt.n	8000c60 <__aeabi_ldivmod+0x68>
 8000c2a:	f000 f835 	bl	8000c98 <__udivmoddi4>
 8000c2e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c36:	b004      	add	sp, #16
 8000c38:	4770      	bx	lr
 8000c3a:	4240      	negs	r0, r0
 8000c3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	db1b      	blt.n	8000c7c <__aeabi_ldivmod+0x84>
 8000c44:	f000 f828 	bl	8000c98 <__udivmoddi4>
 8000c48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c50:	b004      	add	sp, #16
 8000c52:	4240      	negs	r0, r0
 8000c54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c58:	4252      	negs	r2, r2
 8000c5a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c5e:	4770      	bx	lr
 8000c60:	4252      	negs	r2, r2
 8000c62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c66:	f000 f817 	bl	8000c98 <__udivmoddi4>
 8000c6a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c72:	b004      	add	sp, #16
 8000c74:	4240      	negs	r0, r0
 8000c76:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7a:	4770      	bx	lr
 8000c7c:	4252      	negs	r2, r2
 8000c7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c82:	f000 f809 	bl	8000c98 <__udivmoddi4>
 8000c86:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c8e:	b004      	add	sp, #16
 8000c90:	4252      	negs	r2, r2
 8000c92:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	460c      	mov	r4, r1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d14e      	bne.n	8000d42 <__udivmoddi4+0xaa>
 8000ca4:	4694      	mov	ip, r2
 8000ca6:	458c      	cmp	ip, r1
 8000ca8:	4686      	mov	lr, r0
 8000caa:	fab2 f282 	clz	r2, r2
 8000cae:	d962      	bls.n	8000d76 <__udivmoddi4+0xde>
 8000cb0:	b14a      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb2:	f1c2 0320 	rsb	r3, r2, #32
 8000cb6:	4091      	lsls	r1, r2
 8000cb8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	4319      	orrs	r1, r3
 8000cc2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cca:	fa1f f68c 	uxth.w	r6, ip
 8000cce:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb04 f106 	mul.w	r1, r4, r6
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x64>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cee:	f080 8112 	bcs.w	8000f16 <__udivmoddi4+0x27e>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 810f 	bls.w	8000f16 <__udivmoddi4+0x27e>
 8000cf8:	3c02      	subs	r4, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	fa1f f38e 	uxth.w	r3, lr
 8000d02:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d06:	fb07 1110 	mls	r1, r7, r0, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb00 f606 	mul.w	r6, r0, r6
 8000d12:	429e      	cmp	r6, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x94>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d1e:	f080 80fc 	bcs.w	8000f1a <__udivmoddi4+0x282>
 8000d22:	429e      	cmp	r6, r3
 8000d24:	f240 80f9 	bls.w	8000f1a <__udivmoddi4+0x282>
 8000d28:	4463      	add	r3, ip
 8000d2a:	3802      	subs	r0, #2
 8000d2c:	1b9b      	subs	r3, r3, r6
 8000d2e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d32:	2100      	movs	r1, #0
 8000d34:	b11d      	cbz	r5, 8000d3e <__udivmoddi4+0xa6>
 8000d36:	40d3      	lsrs	r3, r2
 8000d38:	2200      	movs	r2, #0
 8000d3a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d905      	bls.n	8000d52 <__udivmoddi4+0xba>
 8000d46:	b10d      	cbz	r5, 8000d4c <__udivmoddi4+0xb4>
 8000d48:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e7f5      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000d52:	fab3 f183 	clz	r1, r3
 8000d56:	2900      	cmp	r1, #0
 8000d58:	d146      	bne.n	8000de8 <__udivmoddi4+0x150>
 8000d5a:	42a3      	cmp	r3, r4
 8000d5c:	d302      	bcc.n	8000d64 <__udivmoddi4+0xcc>
 8000d5e:	4290      	cmp	r0, r2
 8000d60:	f0c0 80f0 	bcc.w	8000f44 <__udivmoddi4+0x2ac>
 8000d64:	1a86      	subs	r6, r0, r2
 8000d66:	eb64 0303 	sbc.w	r3, r4, r3
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	2d00      	cmp	r5, #0
 8000d6e:	d0e6      	beq.n	8000d3e <__udivmoddi4+0xa6>
 8000d70:	e9c5 6300 	strd	r6, r3, [r5]
 8000d74:	e7e3      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	f040 8090 	bne.w	8000e9c <__udivmoddi4+0x204>
 8000d7c:	eba1 040c 	sub.w	r4, r1, ip
 8000d80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d84:	fa1f f78c 	uxth.w	r7, ip
 8000d88:	2101      	movs	r1, #1
 8000d8a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb08 4416 	mls	r4, r8, r6, r4
 8000d96:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d9a:	fb07 f006 	mul.w	r0, r7, r6
 8000d9e:	4298      	cmp	r0, r3
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x11c>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x11a>
 8000dac:	4298      	cmp	r0, r3
 8000dae:	f200 80cd 	bhi.w	8000f4c <__udivmoddi4+0x2b4>
 8000db2:	4626      	mov	r6, r4
 8000db4:	1a1c      	subs	r4, r3, r0
 8000db6:	fa1f f38e 	uxth.w	r3, lr
 8000dba:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dbe:	fb08 4410 	mls	r4, r8, r0, r4
 8000dc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dc6:	fb00 f707 	mul.w	r7, r0, r7
 8000dca:	429f      	cmp	r7, r3
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x148>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd6:	d202      	bcs.n	8000dde <__udivmoddi4+0x146>
 8000dd8:	429f      	cmp	r7, r3
 8000dda:	f200 80b0 	bhi.w	8000f3e <__udivmoddi4+0x2a6>
 8000dde:	4620      	mov	r0, r4
 8000de0:	1bdb      	subs	r3, r3, r7
 8000de2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de6:	e7a5      	b.n	8000d34 <__udivmoddi4+0x9c>
 8000de8:	f1c1 0620 	rsb	r6, r1, #32
 8000dec:	408b      	lsls	r3, r1
 8000dee:	fa22 f706 	lsr.w	r7, r2, r6
 8000df2:	431f      	orrs	r7, r3
 8000df4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000df8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dfc:	ea43 030c 	orr.w	r3, r3, ip
 8000e00:	40f4      	lsrs	r4, r6
 8000e02:	fa00 f801 	lsl.w	r8, r0, r1
 8000e06:	0c38      	lsrs	r0, r7, #16
 8000e08:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e0c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e10:	fa1f fc87 	uxth.w	ip, r7
 8000e14:	fb00 441e 	mls	r4, r0, lr, r4
 8000e18:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e1c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e20:	45a1      	cmp	r9, r4
 8000e22:	fa02 f201 	lsl.w	r2, r2, r1
 8000e26:	d90a      	bls.n	8000e3e <__udivmoddi4+0x1a6>
 8000e28:	193c      	adds	r4, r7, r4
 8000e2a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e2e:	f080 8084 	bcs.w	8000f3a <__udivmoddi4+0x2a2>
 8000e32:	45a1      	cmp	r9, r4
 8000e34:	f240 8081 	bls.w	8000f3a <__udivmoddi4+0x2a2>
 8000e38:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e3c:	443c      	add	r4, r7
 8000e3e:	eba4 0409 	sub.w	r4, r4, r9
 8000e42:	fa1f f983 	uxth.w	r9, r3
 8000e46:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e4a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e4e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e52:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e56:	45a4      	cmp	ip, r4
 8000e58:	d907      	bls.n	8000e6a <__udivmoddi4+0x1d2>
 8000e5a:	193c      	adds	r4, r7, r4
 8000e5c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e60:	d267      	bcs.n	8000f32 <__udivmoddi4+0x29a>
 8000e62:	45a4      	cmp	ip, r4
 8000e64:	d965      	bls.n	8000f32 <__udivmoddi4+0x29a>
 8000e66:	3b02      	subs	r3, #2
 8000e68:	443c      	add	r4, r7
 8000e6a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e6e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e72:	eba4 040c 	sub.w	r4, r4, ip
 8000e76:	429c      	cmp	r4, r3
 8000e78:	46ce      	mov	lr, r9
 8000e7a:	469c      	mov	ip, r3
 8000e7c:	d351      	bcc.n	8000f22 <__udivmoddi4+0x28a>
 8000e7e:	d04e      	beq.n	8000f1e <__udivmoddi4+0x286>
 8000e80:	b155      	cbz	r5, 8000e98 <__udivmoddi4+0x200>
 8000e82:	ebb8 030e 	subs.w	r3, r8, lr
 8000e86:	eb64 040c 	sbc.w	r4, r4, ip
 8000e8a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e8e:	40cb      	lsrs	r3, r1
 8000e90:	431e      	orrs	r6, r3
 8000e92:	40cc      	lsrs	r4, r1
 8000e94:	e9c5 6400 	strd	r6, r4, [r5]
 8000e98:	2100      	movs	r1, #0
 8000e9a:	e750      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000e9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ea0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ea4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ea8:	fa24 f303 	lsr.w	r3, r4, r3
 8000eac:	4094      	lsls	r4, r2
 8000eae:	430c      	orrs	r4, r1
 8000eb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000eb4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000eb8:	fa1f f78c 	uxth.w	r7, ip
 8000ebc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ec0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ec4:	0c23      	lsrs	r3, r4, #16
 8000ec6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eca:	fb00 f107 	mul.w	r1, r0, r7
 8000ece:	4299      	cmp	r1, r3
 8000ed0:	d908      	bls.n	8000ee4 <__udivmoddi4+0x24c>
 8000ed2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ed6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eda:	d22c      	bcs.n	8000f36 <__udivmoddi4+0x29e>
 8000edc:	4299      	cmp	r1, r3
 8000ede:	d92a      	bls.n	8000f36 <__udivmoddi4+0x29e>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	4463      	add	r3, ip
 8000ee4:	1a5b      	subs	r3, r3, r1
 8000ee6:	b2a4      	uxth	r4, r4
 8000ee8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000eec:	fb08 3311 	mls	r3, r8, r1, r3
 8000ef0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ef4:	fb01 f307 	mul.w	r3, r1, r7
 8000ef8:	42a3      	cmp	r3, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x276>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f04:	d213      	bcs.n	8000f2e <__udivmoddi4+0x296>
 8000f06:	42a3      	cmp	r3, r4
 8000f08:	d911      	bls.n	8000f2e <__udivmoddi4+0x296>
 8000f0a:	3902      	subs	r1, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	1ae4      	subs	r4, r4, r3
 8000f10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f14:	e739      	b.n	8000d8a <__udivmoddi4+0xf2>
 8000f16:	4604      	mov	r4, r0
 8000f18:	e6f0      	b.n	8000cfc <__udivmoddi4+0x64>
 8000f1a:	4608      	mov	r0, r1
 8000f1c:	e706      	b.n	8000d2c <__udivmoddi4+0x94>
 8000f1e:	45c8      	cmp	r8, r9
 8000f20:	d2ae      	bcs.n	8000e80 <__udivmoddi4+0x1e8>
 8000f22:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f26:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f2a:	3801      	subs	r0, #1
 8000f2c:	e7a8      	b.n	8000e80 <__udivmoddi4+0x1e8>
 8000f2e:	4631      	mov	r1, r6
 8000f30:	e7ed      	b.n	8000f0e <__udivmoddi4+0x276>
 8000f32:	4603      	mov	r3, r0
 8000f34:	e799      	b.n	8000e6a <__udivmoddi4+0x1d2>
 8000f36:	4630      	mov	r0, r6
 8000f38:	e7d4      	b.n	8000ee4 <__udivmoddi4+0x24c>
 8000f3a:	46d6      	mov	lr, sl
 8000f3c:	e77f      	b.n	8000e3e <__udivmoddi4+0x1a6>
 8000f3e:	4463      	add	r3, ip
 8000f40:	3802      	subs	r0, #2
 8000f42:	e74d      	b.n	8000de0 <__udivmoddi4+0x148>
 8000f44:	4606      	mov	r6, r0
 8000f46:	4623      	mov	r3, r4
 8000f48:	4608      	mov	r0, r1
 8000f4a:	e70f      	b.n	8000d6c <__udivmoddi4+0xd4>
 8000f4c:	3e02      	subs	r6, #2
 8000f4e:	4463      	add	r3, ip
 8000f50:	e730      	b.n	8000db4 <__udivmoddi4+0x11c>
 8000f52:	bf00      	nop

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <_ZNSt17_Function_handlerIFvPhmESt5_BindIFM13SerialHandlerFvS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EEEEE9_M_invokeERKSt9_Any_dataOS0_Om>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8000f58:	b538      	push	{r3, r4, r5, lr}
	    return __source._M_access<_Functor*>();
 8000f5a:	6803      	ldr	r3, [r0, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
 8000f5c:	689c      	ldr	r4, [r3, #8]
 8000f5e:	6858      	ldr	r0, [r3, #4]
 8000f60:	f010 0f01 	tst.w	r0, #1
 8000f64:	d106      	bne.n	8000f74 <_ZNSt17_Function_handlerIFvPhmESt5_BindIFM13SerialHandlerFvS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EEEEE9_M_invokeERKSt9_Any_dataOS0_Om+0x1c>
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	6812      	ldr	r2, [r2, #0]
 8000f6a:	6809      	ldr	r1, [r1, #0]
 8000f6c:	eb04 0060 	add.w	r0, r4, r0, asr #1
 8000f70:	4798      	blx	r3
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
 8000f72:	bd38      	pop	{r3, r4, r5, pc}
 8000f74:	1045      	asrs	r5, r0, #1
 8000f76:	5965      	ldr	r5, [r4, r5]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	58eb      	ldr	r3, [r5, r3]
 8000f7c:	e7f4      	b.n	8000f68 <_ZNSt17_Function_handlerIFvPhmESt5_BindIFM13SerialHandlerFvS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EEEEE9_M_invokeERKSt9_Any_dataOS0_Om+0x10>

08000f7e <_ZNSt17_Function_handlerIFvPhmESt5_BindIFM13SerialHandlerFvS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EEEEE10_M_managerERSt9_Any_dataRKSD_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8000f7e:	b538      	push	{r3, r4, r5, lr}
 8000f80:	4604      	mov	r4, r0
	switch (__op)
 8000f82:	2a01      	cmp	r2, #1
 8000f84:	d103      	bne.n	8000f8e <_ZNSt17_Function_handlerIFvPhmESt5_BindIFM13SerialHandlerFvS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EEEEE10_M_managerERSt9_Any_dataRKSD_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 8000f86:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8000f88:	6003      	str	r3, [r0, #0]
      }
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	bd38      	pop	{r3, r4, r5, pc}
	  switch (__op)
 8000f8e:	2a03      	cmp	r2, #3
 8000f90:	d8fb      	bhi.n	8000f8a <_ZNSt17_Function_handlerIFvPhmESt5_BindIFM13SerialHandlerFvS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EEEEE10_M_managerERSt9_Any_dataRKSD_St18_Manager_operation+0xc>
 8000f92:	e8df f002 	tbb	[pc, r2]
 8000f96:	0502      	.short	0x0502
 8000f98:	1308      	.short	0x1308
	      __dest._M_access<const type_info*>() = nullptr;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	6003      	str	r3, [r0, #0]
	      break;
 8000f9e:	e7f4      	b.n	8000f8a <_ZNSt17_Function_handlerIFvPhmESt5_BindIFM13SerialHandlerFvS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EEEEE10_M_managerERSt9_Any_dataRKSD_St18_Manager_operation+0xc>
	    return __source._M_access<_Functor*>();
 8000fa0:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8000fa2:	6003      	str	r3, [r0, #0]
	      break;
 8000fa4:	e7f1      	b.n	8000f8a <_ZNSt17_Function_handlerIFvPhmESt5_BindIFM13SerialHandlerFvS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EEEEE10_M_managerERSt9_Any_dataRKSD_St18_Manager_operation+0xc>
	    return __source._M_access<_Functor*>();
 8000fa6:	680d      	ldr	r5, [r1, #0]
	      = new _Functor(std::forward<_Fn>(__f));
 8000fa8:	200c      	movs	r0, #12
 8000faa:	f001 ff21 	bl	8002df0 <_Znwj>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fb4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000fb8:	6023      	str	r3, [r4, #0]
	  }
 8000fba:	e7e6      	b.n	8000f8a <_ZNSt17_Function_handlerIFvPhmESt5_BindIFM13SerialHandlerFvS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EEEEE10_M_managerERSt9_Any_dataRKSD_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 8000fbc:	6800      	ldr	r0, [r0, #0]
 8000fbe:	2800      	cmp	r0, #0
 8000fc0:	d0e3      	beq.n	8000f8a <_ZNSt17_Function_handlerIFvPhmESt5_BindIFM13SerialHandlerFvS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EEEEE10_M_managerERSt9_Any_dataRKSD_St18_Manager_operation+0xc>
 8000fc2:	210c      	movs	r1, #12
 8000fc4:	f001 ff12 	bl	8002dec <_ZdlPvj>
 8000fc8:	e7df      	b.n	8000f8a <_ZNSt17_Function_handlerIFvPhmESt5_BindIFM13SerialHandlerFvS0_mEPS3_St12_PlaceholderILi1EES7_ILi2EEEEE10_M_managerERSt9_Any_dataRKSD_St18_Manager_operation+0xc>
	...

08000fcc <_ZN13SerialHandlerC1ER10USBHandler>:
		return low - 1.0f;
	}
	return val;
}

SerialHandler::SerialHandler(USBHandler& usbObj)
 8000fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fce:	b087      	sub	sp, #28
 8000fd0:	4604      	mov	r4, r0
 8000fd2:	460d      	mov	r5, r1
 8000fd4:	2600      	movs	r6, #0
 8000fd6:	6006      	str	r6, [r0, #0]
 8000fd8:	7106      	strb	r6, [r0, #4]
      _GLIBCXX20_CONSTEXPR
      pointer
      _M_local_data()
      {
#if __cplusplus >= 201103L
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 8000fda:	f100 0310 	add.w	r3, r0, #16
	: allocator_type(std::move(__a)), _M_p(__dat) { }
 8000fde:	6083      	str	r3, [r0, #8]
      { _M_string_length = __length; }
 8000fe0:	60c6      	str	r6, [r0, #12]
#if __cpp_constexpr_dynamic_alloc
	if (std::__is_constant_evaluated())
	  std::construct_at(__builtin_addressof(__c1), __c2);
	else
#endif
	__c1 = __c2;
 8000fe2:	7406      	strb	r6, [r0, #16]
{
	usb = &usbObj;
 8000fe4:	6201      	str	r1, [r0, #32]
      // 2774. std::function construction vs assignment
      template<typename _Functor,
	       typename _Constraints = _Requires<_Callable<_Functor>>>
	function(_Functor&& __f)
	noexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())
	: _Function_base()
 8000fe6:	af02      	add	r7, sp, #8
 8000fe8:	9602      	str	r6, [sp, #8]
 8000fea:	9603      	str	r6, [sp, #12]
 8000fec:	9604      	str	r6, [sp, #16]
 8000fee:	9605      	str	r6, [sp, #20]
	      = new _Functor(std::forward<_Fn>(__f));
 8000ff0:	200c      	movs	r0, #12
 8000ff2:	f001 fefd 	bl	8002df0 <_Znwj>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
 8000ff6:	4b11      	ldr	r3, [pc, #68]	@ (800103c <_ZN13SerialHandlerC1ER10USBHandler+0x70>)
 8000ff8:	6003      	str	r3, [r0, #0]
 8000ffa:	6046      	str	r6, [r0, #4]

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2729. Missing SFINAE on std::pair::operator=
      _Tuple_impl& operator=(const _Tuple_impl&) = delete;

      _Tuple_impl(_Tuple_impl&&) = default;
 8000ffc:	6084      	str	r4, [r0, #8]
 8000ffe:	9002      	str	r0, [sp, #8]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001000:	466b      	mov	r3, sp
 8001002:	e897 0003 	ldmia.w	r7, {r0, r1}
 8001006:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800100a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800100e:	e887 0003 	stmia.w	r7, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8001012:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001016:	e885 0003 	stmia.w	r5, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800101a:	68ab      	ldr	r3, [r5, #8]
 800101c:	9304      	str	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 800101e:	4a08      	ldr	r2, [pc, #32]	@ (8001040 <_ZN13SerialHandlerC1ER10USBHandler+0x74>)
 8001020:	60aa      	str	r2, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
 8001022:	68ea      	ldr	r2, [r5, #12]
 8001024:	9205      	str	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 8001026:	4a07      	ldr	r2, [pc, #28]	@ (8001044 <_ZN13SerialHandlerC1ER10USBHandler+0x78>)
 8001028:	60ea      	str	r2, [r5, #12]
      if (_M_manager)
 800102a:	b11b      	cbz	r3, 8001034 <_ZN13SerialHandlerC1ER10USBHandler+0x68>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800102c:	2203      	movs	r2, #3
 800102e:	4639      	mov	r1, r7
 8001030:	4638      	mov	r0, r7
 8001032:	4798      	blx	r3

	// bind the usb's CDC caller to the CDC handler in this class
	usb->cdcDataHandler = std::bind(&SerialHandler::Handler, this, std::placeholders::_1, std::placeholders::_2);
}
 8001034:	4620      	mov	r0, r4
 8001036:	b007      	add	sp, #28
 8001038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800103a:	bf00      	nop
 800103c:	0800135d 	.word	0x0800135d
 8001040:	08000f7f 	.word	0x08000f7f
 8001044:	08000f59 	.word	0x08000f59

08001048 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      _GLIBCXX20_CONSTEXPR
      void
      basic_string<_CharT, _Traits, _Alloc>::
 8001048:	b570      	push	{r4, r5, r6, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	4604      	mov	r4, r0
 800104e:	460e      	mov	r6, r1
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 8001050:	1a55      	subs	r5, r2, r1
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8001052:	9501      	str	r5, [sp, #4]

	if (__dnew > size_type(_S_local_capacity))
 8001054:	2d0f      	cmp	r5, #15
 8001056:	d80b      	bhi.n	8001070 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x28>
      { return _M_dataplus._M_p; }
 8001058:	6800      	ldr	r0, [r0, #0]
      // traits_type::copy/move/assign.
      _GLIBCXX20_CONSTEXPR
      static void
      _S_copy(_CharT* __d, const _CharT* __s, size_type __n)
      {
	if (__n == 1)
 800105a:	2d01      	cmp	r5, #1
 800105c:	d114      	bne.n	8001088 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x40>
 800105e:	780b      	ldrb	r3, [r1, #0]
 8001060:	7003      	strb	r3, [r0, #0]

	this->_S_copy_chars(_M_data(), __beg, __end);

	__guard._M_guarded = 0;

	_M_set_length(__dnew);
 8001062:	9b01      	ldr	r3, [sp, #4]
      { _M_string_length = __length; }
 8001064:	6063      	str	r3, [r4, #4]
 8001066:	6822      	ldr	r2, [r4, #0]
 8001068:	2100      	movs	r1, #0
 800106a:	54d1      	strb	r1, [r2, r3]
      }
 800106c:	b002      	add	sp, #8
 800106e:	bd70      	pop	{r4, r5, r6, pc}
	    _M_data(_M_create(__dnew, size_type(0)));
 8001070:	2200      	movs	r2, #0
 8001072:	a901      	add	r1, sp, #4
 8001074:	f001 fee8 	bl	8002e48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_dataplus._M_p = __p; }
 8001078:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
 800107a:	9b01      	ldr	r3, [sp, #4]
 800107c:	60a3      	str	r3, [r4, #8]
	  return __s1;
#if __cplusplus >= 202002L
	if (std::__is_constant_evaluated())
	  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);
#endif
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
 800107e:	462a      	mov	r2, r5
 8001080:	4631      	mov	r1, r6
 8001082:	f002 ff9e 	bl	8003fc2 <memcpy>
 8001086:	e7ec      	b.n	8001062 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x1a>
	if (__n == 0)
 8001088:	2d00      	cmp	r5, #0
 800108a:	d0ea      	beq.n	8001062 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x1a>
 800108c:	e7f7      	b.n	800107e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x36>
	...

08001090 <_ZN13SerialHandler7CommandEv>:



// Check if a command has been received from USB, parse and action as required
bool SerialHandler::Command()
{
 8001090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001094:	b0a0      	sub	sp, #128	@ 0x80
	char buf[50];

	if (!CmdPending) {
 8001096:	7905      	ldrb	r5, [r0, #4]
 8001098:	2d00      	cmp	r5, #0
 800109a:	d078      	beq.n	800118e <_ZN13SerialHandler7CommandEv+0xfe>
 800109c:	4604      	mov	r4, r0
		return false;
	}

	// Provide option to switch to USB DFU mode - this allows the MCU to be programmed with STM32CubeProgrammer in DFU mode
	if (state == serialState::dfuConfirm) {
 800109e:	6803      	ldr	r3, [r0, #0]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d078      	beq.n	8001196 <_ZN13SerialHandler7CommandEv+0x106>
		} else {
			state = serialState::pending;
			usb->SendString("Upgrade cancelled\r\n");
		}

	} else if (ComCmd.compare("info\n") == 0) {		// Print diagnostic information
 80010a4:	f100 0608 	add.w	r6, r0, #8
 80010a8:	4999      	ldr	r1, [pc, #612]	@ (8001310 <_ZN13SerialHandler7CommandEv+0x280>)
 80010aa:	4630      	mov	r0, r6
 80010ac:	f002 f826 	bl	80030fc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 80010b0:	2800      	cmp	r0, #0
 80010b2:	f040 80a0 	bne.w	80011f6 <_ZN13SerialHandler7CommandEv+0x166>

		usb->SendString("Mountjoy Ampelope v1.0 - Current Settings:\r\n\r\n"
 80010b6:	f8d4 8020 	ldr.w	r8, [r4, #32]
				"Envelope Times:" + std::string(envelopes.envelope[0].longADSR ? "long" : "short") + "\r\n");
 80010ba:	4b96      	ldr	r3, [pc, #600]	@ (8001314 <_ZN13SerialHandler7CommandEv+0x284>)
 80010bc:	f893 2020 	ldrb.w	r2, [r3, #32]
 80010c0:	4e95      	ldr	r6, [pc, #596]	@ (8001318 <_ZN13SerialHandler7CommandEv+0x288>)
 80010c2:	4b96      	ldr	r3, [pc, #600]	@ (800131c <_ZN13SerialHandler7CommandEv+0x28c>)
 80010c4:	2a00      	cmp	r2, #0
 80010c6:	bf18      	it	ne
 80010c8:	461e      	movne	r6, r3
	: allocator_type(__a), _M_p(__dat) { }
 80010ca:	ab10      	add	r3, sp, #64	@ 0x40
 80010cc:	930e      	str	r3, [sp, #56]	@ 0x38
	return __builtin_strlen(__s);
 80010ce:	4630      	mov	r0, r6
 80010d0:	f7ff f8f6 	bl	80002c0 <strlen>
	// NB: Not required, but considered best practice.
	if (__s == 0)
	  std::__throw_logic_error(__N("basic_string: "
				       "construction from null is not valid"));
	const _CharT* __end = __s + traits_type::length(__s);
	_M_construct(__s, __end, forward_iterator_tag());
 80010d4:	f04f 0300 	mov.w	r3, #0
 80010d8:	1832      	adds	r2, r6, r0
 80010da:	4631      	mov	r1, r6
 80010dc:	a80e      	add	r0, sp, #56	@ 0x38
 80010de:	f7ff ffb3 	bl	8001048 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s,
	      size_type __n2)
      {
	__glibcxx_requires_string_len(__s, __n2);
	return _M_replace(_M_check(__pos, "basic_string::replace"),
 80010e2:	233d      	movs	r3, #61	@ 0x3d
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	4b8e      	ldr	r3, [pc, #568]	@ (8001320 <_ZN13SerialHandler7CommandEv+0x290>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	4611      	mov	r1, r2
 80010ec:	a80e      	add	r0, sp, #56	@ 0x38
 80010ee:	f001 ff65 	bl	8002fbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 80010f2:	4606      	mov	r6, r0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
 80010f4:	ab0a      	add	r3, sp, #40	@ 0x28
 80010f6:	9308      	str	r3, [sp, #32]
      { return _M_dataplus._M_p; }
 80010f8:	4607      	mov	r7, r0
 80010fa:	f857 3b08 	ldr.w	r3, [r7], #8
	if (_M_data() == _M_local_data())
 80010fe:	42bb      	cmp	r3, r7
 8001100:	d068      	beq.n	80011d4 <_ZN13SerialHandler7CommandEv+0x144>
      { _M_dataplus._M_p = __p; }
 8001102:	9308      	str	r3, [sp, #32]
      { _M_allocated_capacity = __capacity; }
 8001104:	6883      	ldr	r3, [r0, #8]
 8001106:	930a      	str	r3, [sp, #40]	@ 0x28
      { _M_string_length = __length; }
 8001108:	6873      	ldr	r3, [r6, #4]
 800110a:	9309      	str	r3, [sp, #36]	@ 0x24
      { _M_dataplus._M_p = __p; }
 800110c:	6037      	str	r7, [r6, #0]
      { _M_string_length = __length; }
 800110e:	2200      	movs	r2, #0
 8001110:	6072      	str	r2, [r6, #4]
	__c1 = __c2;
 8001112:	7232      	strb	r2, [r6, #8]
	if (this->max_size() - (this->size() - __n1) < __n2)
 8001114:	f1c3 537f 	rsb	r3, r3, #1069547520	@ 0x3fc00000
 8001118:	f503 137f 	add.w	r3, r3, #4177920	@ 0x3fc000
 800111c:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 8001120:	333f      	adds	r3, #63	@ 0x3f
 8001122:	2b01      	cmp	r3, #1
 8001124:	d95d      	bls.n	80011e2 <_ZN13SerialHandler7CommandEv+0x152>
	return _M_append(__s, __n);
 8001126:	2202      	movs	r2, #2
 8001128:	497e      	ldr	r1, [pc, #504]	@ (8001324 <_ZN13SerialHandler7CommandEv+0x294>)
 800112a:	a808      	add	r0, sp, #32
 800112c:	f001 ffc2 	bl	80030b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8001130:	4606      	mov	r6, r0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
 8001132:	ab04      	add	r3, sp, #16
 8001134:	9302      	str	r3, [sp, #8]
      { return _M_dataplus._M_p; }
 8001136:	4607      	mov	r7, r0
 8001138:	f857 3b08 	ldr.w	r3, [r7], #8
	if (_M_data() == _M_local_data())
 800113c:	42bb      	cmp	r3, r7
 800113e:	d053      	beq.n	80011e8 <_ZN13SerialHandler7CommandEv+0x158>
      { _M_dataplus._M_p = __p; }
 8001140:	9302      	str	r3, [sp, #8]
      { _M_allocated_capacity = __capacity; }
 8001142:	6883      	ldr	r3, [r0, #8]
 8001144:	9304      	str	r3, [sp, #16]
      { _M_string_length = __length; }
 8001146:	6873      	ldr	r3, [r6, #4]
 8001148:	9303      	str	r3, [sp, #12]
      { _M_dataplus._M_p = __p; }
 800114a:	6037      	str	r7, [r6, #0]
      { _M_string_length = __length; }
 800114c:	2300      	movs	r3, #0
 800114e:	6073      	str	r3, [r6, #4]
 8001150:	7233      	strb	r3, [r6, #8]
		usb->SendString("Mountjoy Ampelope v1.0 - Current Settings:\r\n\r\n"
 8001152:	a902      	add	r1, sp, #8
 8001154:	4640      	mov	r0, r8
 8001156:	f000 fdf5 	bl	8001d44 <_ZN10USBHandler10SendStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
      { return _M_dataplus._M_p; }
 800115a:	9802      	ldr	r0, [sp, #8]
	if (_M_data() == _M_local_data())
 800115c:	ab04      	add	r3, sp, #16
 800115e:	4298      	cmp	r0, r3
 8001160:	d003      	beq.n	800116a <_ZN13SerialHandler7CommandEv+0xda>
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8001162:	9904      	ldr	r1, [sp, #16]
 8001164:	3101      	adds	r1, #1
 8001166:	f001 fe41 	bl	8002dec <_ZdlPvj>
      { return _M_dataplus._M_p; }
 800116a:	9808      	ldr	r0, [sp, #32]
	if (_M_data() == _M_local_data())
 800116c:	ab0a      	add	r3, sp, #40	@ 0x28
 800116e:	4298      	cmp	r0, r3
 8001170:	d003      	beq.n	800117a <_ZN13SerialHandler7CommandEv+0xea>
 8001172:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8001174:	3101      	adds	r1, #1
 8001176:	f001 fe39 	bl	8002dec <_ZdlPvj>
      { return _M_dataplus._M_p; }
 800117a:	980e      	ldr	r0, [sp, #56]	@ 0x38
	if (_M_data() == _M_local_data())
 800117c:	ab10      	add	r3, sp, #64	@ 0x40
 800117e:	4298      	cmp	r0, r3
 8001180:	d003      	beq.n	800118a <_ZN13SerialHandler7CommandEv+0xfa>
 8001182:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8001184:	3101      	adds	r1, #1
 8001186:	f001 fe31 	bl	8002dec <_ZdlPvj>

	} else {
		usb->SendString("Unrecognised command: " + ComCmd + "Type 'help' for supported commands\r\n");
	}

	CmdPending = false;
 800118a:	2300      	movs	r3, #0
 800118c:	7123      	strb	r3, [r4, #4]
	return true;
}
 800118e:	4628      	mov	r0, r5
 8001190:	b020      	add	sp, #128	@ 0x80
 8001192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ComCmd.compare("y\n") == 0 || ComCmd.compare("Y\n") == 0) {
 8001196:	f100 0608 	add.w	r6, r0, #8
 800119a:	4963      	ldr	r1, [pc, #396]	@ (8001328 <_ZN13SerialHandler7CommandEv+0x298>)
 800119c:	4630      	mov	r0, r6
 800119e:	f001 ffad 	bl	80030fc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 80011a2:	b120      	cbz	r0, 80011ae <_ZN13SerialHandler7CommandEv+0x11e>
 80011a4:	4961      	ldr	r1, [pc, #388]	@ (800132c <_ZN13SerialHandler7CommandEv+0x29c>)
 80011a6:	4630      	mov	r0, r6
 80011a8:	f001 ffa8 	bl	80030fc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 80011ac:	b958      	cbnz	r0, 80011c6 <_ZN13SerialHandler7CommandEv+0x136>
			usb->SendString("Switching to DFU Mode ...\r\n");
 80011ae:	4960      	ldr	r1, [pc, #384]	@ (8001330 <_ZN13SerialHandler7CommandEv+0x2a0>)
 80011b0:	6a20      	ldr	r0, [r4, #32]
 80011b2:	f000 fdb2 	bl	8001d1a <_ZN10USBHandler10SendStringEPKc>
			uint32_t old = SysTickVal;
 80011b6:	4b5f      	ldr	r3, [pc, #380]	@ (8001334 <_ZN13SerialHandler7CommandEv+0x2a4>)
 80011b8:	681a      	ldr	r2, [r3, #0]
			while (SysTickVal < old + 100) {};		// Give enough time to send the message
 80011ba:	4619      	mov	r1, r3
 80011bc:	3264      	adds	r2, #100	@ 0x64
 80011be:	680b      	ldr	r3, [r1, #0]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d8fc      	bhi.n	80011be <_ZN13SerialHandler7CommandEv+0x12e>
 80011c4:	e7e1      	b.n	800118a <_ZN13SerialHandler7CommandEv+0xfa>
			state = serialState::pending;
 80011c6:	2300      	movs	r3, #0
 80011c8:	6023      	str	r3, [r4, #0]
			usb->SendString("Upgrade cancelled\r\n");
 80011ca:	495b      	ldr	r1, [pc, #364]	@ (8001338 <_ZN13SerialHandler7CommandEv+0x2a8>)
 80011cc:	6a20      	ldr	r0, [r4, #32]
 80011ce:	f000 fda4 	bl	8001d1a <_ZN10USBHandler10SendStringEPKc>
 80011d2:	e7da      	b.n	800118a <_ZN13SerialHandler7CommandEv+0xfa>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
 80011d4:	6842      	ldr	r2, [r0, #4]
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
 80011d6:	3201      	adds	r2, #1
 80011d8:	4639      	mov	r1, r7
 80011da:	a80a      	add	r0, sp, #40	@ 0x28
 80011dc:	f002 fef1 	bl	8003fc2 <memcpy>
 80011e0:	e792      	b.n	8001108 <_ZN13SerialHandler7CommandEv+0x78>
	  __throw_length_error(__N(__s));
 80011e2:	4856      	ldr	r0, [pc, #344]	@ (800133c <_ZN13SerialHandler7CommandEv+0x2ac>)
 80011e4:	f001 fe1b 	bl	8002e1e <_ZSt20__throw_length_errorPKc>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
 80011e8:	6842      	ldr	r2, [r0, #4]
 80011ea:	3201      	adds	r2, #1
 80011ec:	4639      	mov	r1, r7
 80011ee:	a804      	add	r0, sp, #16
 80011f0:	f002 fee7 	bl	8003fc2 <memcpy>
 80011f4:	e7a7      	b.n	8001146 <_ZN13SerialHandler7CommandEv+0xb6>
	} else if (ComCmd.compare("help\n") == 0) {
 80011f6:	4952      	ldr	r1, [pc, #328]	@ (8001340 <_ZN13SerialHandler7CommandEv+0x2b0>)
 80011f8:	4630      	mov	r0, r6
 80011fa:	f001 ff7f 	bl	80030fc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 80011fe:	b920      	cbnz	r0, 800120a <_ZN13SerialHandler7CommandEv+0x17a>
		usb->SendString("Mountjoy Ampelope\r\n"
 8001200:	4950      	ldr	r1, [pc, #320]	@ (8001344 <_ZN13SerialHandler7CommandEv+0x2b4>)
 8001202:	6a20      	ldr	r0, [r4, #32]
 8001204:	f000 fd89 	bl	8001d1a <_ZN10USBHandler10SendStringEPKc>
 8001208:	e7bf      	b.n	800118a <_ZN13SerialHandler7CommandEv+0xfa>
	} else if (ComCmd.compare("lfo\n") == 0) {				// LFO on/off
 800120a:	494f      	ldr	r1, [pc, #316]	@ (8001348 <_ZN13SerialHandler7CommandEv+0x2b8>)
 800120c:	4630      	mov	r0, r6
 800120e:	f001 ff75 	bl	80030fc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 8001212:	2800      	cmp	r0, #0
 8001214:	d0b9      	beq.n	800118a <_ZN13SerialHandler7CommandEv+0xfa>
	} else if (ComCmd.compare("l\n") == 0) {				// Long envelope times
 8001216:	494d      	ldr	r1, [pc, #308]	@ (800134c <_ZN13SerialHandler7CommandEv+0x2bc>)
 8001218:	4630      	mov	r0, r6
 800121a:	f001 ff6f 	bl	80030fc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 800121e:	2800      	cmp	r0, #0
 8001220:	d0b3      	beq.n	800118a <_ZN13SerialHandler7CommandEv+0xfa>
	} else if (ComCmd.compare("s\n") == 0) {				// Short envelope times
 8001222:	494b      	ldr	r1, [pc, #300]	@ (8001350 <_ZN13SerialHandler7CommandEv+0x2c0>)
 8001224:	4630      	mov	r0, r6
 8001226:	f001 ff69 	bl	80030fc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 800122a:	2800      	cmp	r0, #0
 800122c:	d0ad      	beq.n	800118a <_ZN13SerialHandler7CommandEv+0xfa>
		usb->SendString("Unrecognised command: " + ComCmd + "Type 'help' for supported commands\r\n");
 800122e:	f8d4 8020 	ldr.w	r8, [r4, #32]
	: allocator_type(__a), _M_p(__dat) { }
 8001232:	ab1c      	add	r3, sp, #112	@ 0x70
 8001234:	931a      	str	r3, [sp, #104]	@ 0x68
      { _M_string_length = __length; }
 8001236:	2300      	movs	r3, #0
 8001238:	931b      	str	r3, [sp, #108]	@ 0x6c
	__c1 = __c2;
 800123a:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
	rebind<_CharT>::other _Char_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;
      const __size_type __len = _Traits::length(__lhs);
      __string_type __str(_Alloc_traits::_S_select_on_copy(
          __rhs.get_allocator()));
      __str.reserve(__len + __rhs.size());
 800123e:	68e1      	ldr	r1, [r4, #12]
 8001240:	3116      	adds	r1, #22
 8001242:	a81a      	add	r0, sp, #104	@ 0x68
 8001244:	f001 fe9e 	bl	8002f84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
	if (this->max_size() - (this->size() - __n1) < __n2)
 8001248:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800124a:	f1c3 537f 	rsb	r3, r3, #1069547520	@ 0x3fc00000
 800124e:	f503 137f 	add.w	r3, r3, #4177920	@ 0x3fc000
 8001252:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 8001256:	333f      	adds	r3, #63	@ 0x3f
 8001258:	2b15      	cmp	r3, #21
 800125a:	d949      	bls.n	80012f0 <_ZN13SerialHandler7CommandEv+0x260>
	return _M_append(__s, __n);
 800125c:	2216      	movs	r2, #22
 800125e:	493d      	ldr	r1, [pc, #244]	@ (8001354 <_ZN13SerialHandler7CommandEv+0x2c4>)
 8001260:	a81a      	add	r0, sp, #104	@ 0x68
 8001262:	f001 ff27 	bl	80030b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
      { return _M_dataplus._M_p; }
 8001266:	68a1      	ldr	r1, [r4, #8]
      { return _M_string_length; }
 8001268:	68e2      	ldr	r2, [r4, #12]
	if (this->max_size() - (this->size() - __n1) < __n2)
 800126a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800126c:	f1c3 537f 	rsb	r3, r3, #1069547520	@ 0x3fc00000
 8001270:	f503 137f 	add.w	r3, r3, #4177920	@ 0x3fc000
 8001274:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 8001278:	333f      	adds	r3, #63	@ 0x3f
 800127a:	429a      	cmp	r2, r3
 800127c:	d83b      	bhi.n	80012f6 <_ZN13SerialHandler7CommandEv+0x266>
	return _M_append(__s, __n);
 800127e:	a81a      	add	r0, sp, #104	@ 0x68
 8001280:	f001 ff18 	bl	80030b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
	if (this->max_size() - (this->size() - __n1) < __n2)
 8001284:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8001286:	f1c3 537f 	rsb	r3, r3, #1069547520	@ 0x3fc00000
 800128a:	f503 137f 	add.w	r3, r3, #4177920	@ 0x3fc000
 800128e:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 8001292:	333f      	adds	r3, #63	@ 0x3f
 8001294:	2b23      	cmp	r3, #35	@ 0x23
 8001296:	d931      	bls.n	80012fc <_ZN13SerialHandler7CommandEv+0x26c>
	return _M_append(__s, __n);
 8001298:	2224      	movs	r2, #36	@ 0x24
 800129a:	492f      	ldr	r1, [pc, #188]	@ (8001358 <_ZN13SerialHandler7CommandEv+0x2c8>)
 800129c:	a81a      	add	r0, sp, #104	@ 0x68
 800129e:	f001 ff09 	bl	80030b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 80012a2:	4606      	mov	r6, r0
	: allocator_type(std::move(__a)), _M_p(__dat) { }
 80012a4:	ab16      	add	r3, sp, #88	@ 0x58
 80012a6:	9314      	str	r3, [sp, #80]	@ 0x50
      { return _M_dataplus._M_p; }
 80012a8:	4607      	mov	r7, r0
 80012aa:	f857 3b08 	ldr.w	r3, [r7], #8
	if (_M_data() == _M_local_data())
 80012ae:	42bb      	cmp	r3, r7
 80012b0:	d027      	beq.n	8001302 <_ZN13SerialHandler7CommandEv+0x272>
      { _M_dataplus._M_p = __p; }
 80012b2:	9314      	str	r3, [sp, #80]	@ 0x50
      { _M_allocated_capacity = __capacity; }
 80012b4:	6883      	ldr	r3, [r0, #8]
 80012b6:	9316      	str	r3, [sp, #88]	@ 0x58
      { _M_string_length = __length; }
 80012b8:	6873      	ldr	r3, [r6, #4]
 80012ba:	9315      	str	r3, [sp, #84]	@ 0x54
      { _M_dataplus._M_p = __p; }
 80012bc:	6037      	str	r7, [r6, #0]
      { _M_string_length = __length; }
 80012be:	2300      	movs	r3, #0
 80012c0:	6073      	str	r3, [r6, #4]
 80012c2:	7233      	strb	r3, [r6, #8]
 80012c4:	a914      	add	r1, sp, #80	@ 0x50
 80012c6:	4640      	mov	r0, r8
 80012c8:	f000 fd3c 	bl	8001d44 <_ZN10USBHandler10SendStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
      { return _M_dataplus._M_p; }
 80012cc:	9814      	ldr	r0, [sp, #80]	@ 0x50
	if (_M_data() == _M_local_data())
 80012ce:	ab16      	add	r3, sp, #88	@ 0x58
 80012d0:	4298      	cmp	r0, r3
 80012d2:	d003      	beq.n	80012dc <_ZN13SerialHandler7CommandEv+0x24c>
 80012d4:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80012d6:	3101      	adds	r1, #1
 80012d8:	f001 fd88 	bl	8002dec <_ZdlPvj>
      { return _M_dataplus._M_p; }
 80012dc:	981a      	ldr	r0, [sp, #104]	@ 0x68
	if (_M_data() == _M_local_data())
 80012de:	ab1c      	add	r3, sp, #112	@ 0x70
 80012e0:	4298      	cmp	r0, r3
 80012e2:	f43f af52 	beq.w	800118a <_ZN13SerialHandler7CommandEv+0xfa>
 80012e6:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80012e8:	3101      	adds	r1, #1
 80012ea:	f001 fd7f 	bl	8002dec <_ZdlPvj>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 80012ee:	e74c      	b.n	800118a <_ZN13SerialHandler7CommandEv+0xfa>
	  __throw_length_error(__N(__s));
 80012f0:	4812      	ldr	r0, [pc, #72]	@ (800133c <_ZN13SerialHandler7CommandEv+0x2ac>)
 80012f2:	f001 fd94 	bl	8002e1e <_ZSt20__throw_length_errorPKc>
 80012f6:	4811      	ldr	r0, [pc, #68]	@ (800133c <_ZN13SerialHandler7CommandEv+0x2ac>)
 80012f8:	f001 fd91 	bl	8002e1e <_ZSt20__throw_length_errorPKc>
 80012fc:	480f      	ldr	r0, [pc, #60]	@ (800133c <_ZN13SerialHandler7CommandEv+0x2ac>)
 80012fe:	f001 fd8e 	bl	8002e1e <_ZSt20__throw_length_errorPKc>
	    traits_type::copy(_M_local_buf, __str._M_local_buf,
 8001302:	6842      	ldr	r2, [r0, #4]
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
 8001304:	3201      	adds	r2, #1
 8001306:	4639      	mov	r1, r7
 8001308:	a816      	add	r0, sp, #88	@ 0x58
 800130a:	f002 fe5a 	bl	8003fc2 <memcpy>
 800130e:	e7d3      	b.n	80012b8 <_ZN13SerialHandler7CommandEv+0x228>
 8001310:	08005bc4 	.word	0x08005bc4
 8001314:	20000398 	.word	0x20000398
 8001318:	08005b84 	.word	0x08005b84
 800131c:	08005b7c 	.word	0x08005b7c
 8001320:	08005bcc 	.word	0x08005bcc
 8001324:	08005c24 	.word	0x08005c24
 8001328:	08005b8c 	.word	0x08005b8c
 800132c:	08005b90 	.word	0x08005b90
 8001330:	08005b94 	.word	0x08005b94
 8001334:	200004fc 	.word	0x200004fc
 8001338:	08005bb0 	.word	0x08005bb0
 800133c:	08005c0c 	.word	0x08005c0c
 8001340:	08005c28 	.word	0x08005c28
 8001344:	08005c30 	.word	0x08005c30
 8001348:	08005cdc 	.word	0x08005cdc
 800134c:	08005ce4 	.word	0x08005ce4
 8001350:	08005ce8 	.word	0x08005ce8
 8001354:	08005cec 	.word	0x08005cec
 8001358:	08005d04 	.word	0x08005d04

0800135c <_ZN13SerialHandler7HandlerEPhm>:


void SerialHandler::Handler(uint8_t* data, uint32_t length)
{
 800135c:	b510      	push	{r4, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	4604      	mov	r4, r0
	static bool newCmd = true;
	if (newCmd) {
 8001362:	4b3e      	ldr	r3, [pc, #248]	@ (800145c <_ZN13SerialHandler7HandlerEPhm+0x100>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d062      	beq.n	8001430 <_ZN13SerialHandler7HandlerEPhm+0xd4>
	: allocator_type(__a), _M_p(__dat) { }
 800136a:	ab02      	add	r3, sp, #8
 800136c:	9300      	str	r3, [sp, #0]
	if (__s == 0 && __n > 0)
 800136e:	2900      	cmp	r1, #0
 8001370:	d03b      	beq.n	80013ea <_ZN13SerialHandler7HandlerEPhm+0x8e>
	_M_construct(__s, __s + __n, std::forward_iterator_tag());
 8001372:	f04f 0300 	mov.w	r3, #0
 8001376:	440a      	add	r2, r1
 8001378:	4668      	mov	r0, sp
 800137a:	f7ff fe65 	bl	8001048 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
      { return _M_dataplus._M_p; }
 800137e:	4623      	mov	r3, r4
 8001380:	f853 0f08 	ldr.w	r0, [r3, #8]!
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 8001384:	3308      	adds	r3, #8
	if (_M_data() == _M_local_data())
 8001386:	4298      	cmp	r0, r3
 8001388:	d034      	beq.n	80013f4 <_ZN13SerialHandler7HandlerEPhm+0x98>
      { return _M_dataplus._M_p; }
 800138a:	9b00      	ldr	r3, [sp, #0]
	if (_M_data() == _M_local_data())
 800138c:	aa02      	add	r2, sp, #8
 800138e:	4293      	cmp	r3, r2
 8001390:	d03c      	beq.n	800140c <_ZN13SerialHandler7HandlerEPhm+0xb0>
		    __capacity = _M_allocated_capacity;
 8001392:	6922      	ldr	r2, [r4, #16]
      { _M_dataplus._M_p = __p; }
 8001394:	60a3      	str	r3, [r4, #8]
      { _M_string_length = __length; }
 8001396:	9b01      	ldr	r3, [sp, #4]
 8001398:	60e3      	str	r3, [r4, #12]
      { _M_allocated_capacity = __capacity; }
 800139a:	9b02      	ldr	r3, [sp, #8]
 800139c:	6123      	str	r3, [r4, #16]
	    if (__data)
 800139e:	2800      	cmp	r0, #0
 80013a0:	d031      	beq.n	8001406 <_ZN13SerialHandler7HandlerEPhm+0xaa>
      { _M_dataplus._M_p = __p; }
 80013a2:	9000      	str	r0, [sp, #0]
      { _M_allocated_capacity = __capacity; }
 80013a4:	9202      	str	r2, [sp, #8]
      { _M_string_length = __length; }
 80013a6:	2300      	movs	r3, #0
 80013a8:	9301      	str	r3, [sp, #4]
      { return _M_dataplus._M_p; }
 80013aa:	9a00      	ldr	r2, [sp, #0]
	__c1 = __c2;
 80013ac:	7013      	strb	r3, [r2, #0]
 80013ae:	9800      	ldr	r0, [sp, #0]
	if (_M_data() == _M_local_data())
 80013b0:	ab02      	add	r3, sp, #8
 80013b2:	4298      	cmp	r0, r3
 80013b4:	d003      	beq.n	80013be <_ZN13SerialHandler7HandlerEPhm+0x62>
 80013b6:	9902      	ldr	r1, [sp, #8]
 80013b8:	3101      	adds	r1, #1
 80013ba:	f001 fd17 	bl	8002dec <_ZdlPvj>
		ComCmd = std::string(reinterpret_cast<char*>(data), length);
		newCmd = false;
 80013be:	4b27      	ldr	r3, [pc, #156]	@ (800145c <_ZN13SerialHandler7HandlerEPhm+0x100>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	701a      	strb	r2, [r3, #0]
      { return iterator(_M_data() + this->size()); }
 80013c4:	68a3      	ldr	r3, [r4, #8]
 80013c6:	68e2      	ldr	r2, [r4, #12]
 80013c8:	4413      	add	r3, r2
	} else {
		ComCmd.append(reinterpret_cast<char*>(data), length);
	}
	if (*ComCmd.rbegin() == '\r')
 80013ca:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 80013ce:	2a0d      	cmp	r2, #13
		*ComCmd.rbegin() = '\n';
 80013d0:	bf04      	itt	eq
 80013d2:	220a      	moveq	r2, #10
 80013d4:	f803 2c01 	strbeq.w	r2, [r3, #-1]

	if (*ComCmd.rbegin() == '\n') {
 80013d8:	68a3      	ldr	r3, [r4, #8]
 80013da:	68e2      	ldr	r2, [r4, #12]
 80013dc:	4413      	add	r3, r2
 80013de:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80013e2:	2b0a      	cmp	r3, #10
 80013e4:	d035      	beq.n	8001452 <_ZN13SerialHandler7HandlerEPhm+0xf6>
		CmdPending = true;
		newCmd = true;
	}

}
 80013e6:	b006      	add	sp, #24
 80013e8:	bd10      	pop	{r4, pc}
	if (__s == 0 && __n > 0)
 80013ea:	2a00      	cmp	r2, #0
 80013ec:	d0c1      	beq.n	8001372 <_ZN13SerialHandler7HandlerEPhm+0x16>
	  std::__throw_logic_error(__N("basic_string: "
 80013ee:	481c      	ldr	r0, [pc, #112]	@ (8001460 <_ZN13SerialHandler7HandlerEPhm+0x104>)
 80013f0:	f001 fd12 	bl	8002e18 <_ZSt19__throw_logic_errorPKc>
      { return _M_dataplus._M_p; }
 80013f4:	9b00      	ldr	r3, [sp, #0]
	if (_M_data() == _M_local_data())
 80013f6:	aa02      	add	r2, sp, #8
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d007      	beq.n	800140c <_ZN13SerialHandler7HandlerEPhm+0xb0>
      { _M_dataplus._M_p = __p; }
 80013fc:	60a3      	str	r3, [r4, #8]
      { _M_string_length = __length; }
 80013fe:	9b01      	ldr	r3, [sp, #4]
 8001400:	60e3      	str	r3, [r4, #12]
      { _M_allocated_capacity = __capacity; }
 8001402:	9b02      	ldr	r3, [sp, #8]
 8001404:	6123      	str	r3, [r4, #16]
      { _M_dataplus._M_p = __p; }
 8001406:	ab02      	add	r3, sp, #8
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	e7cc      	b.n	80013a6 <_ZN13SerialHandler7HandlerEPhm+0x4a>
	    if (_M_string_length > _S_local_capacity)
 800140c:	9a01      	ldr	r2, [sp, #4]
		if (__str.size())
 800140e:	b92a      	cbnz	r2, 800141c <_ZN13SerialHandler7HandlerEPhm+0xc0>
      { return _M_string_length; }
 8001410:	9b01      	ldr	r3, [sp, #4]
      { _M_string_length = __length; }
 8001412:	60e3      	str	r3, [r4, #12]
 8001414:	68a2      	ldr	r2, [r4, #8]
 8001416:	2100      	movs	r1, #0
 8001418:	54d1      	strb	r1, [r2, r3]
      }
 800141a:	e7c4      	b.n	80013a6 <_ZN13SerialHandler7HandlerEPhm+0x4a>
	if (__n == 1)
 800141c:	2a01      	cmp	r2, #1
 800141e:	d003      	beq.n	8001428 <_ZN13SerialHandler7HandlerEPhm+0xcc>
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
 8001420:	a902      	add	r1, sp, #8
 8001422:	f002 fdce 	bl	8003fc2 <memcpy>
 8001426:	e7f3      	b.n	8001410 <_ZN13SerialHandler7HandlerEPhm+0xb4>
	__c1 = __c2;
 8001428:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800142c:	7003      	strb	r3, [r0, #0]
      }
 800142e:	e7ef      	b.n	8001410 <_ZN13SerialHandler7HandlerEPhm+0xb4>
		ComCmd.append(reinterpret_cast<char*>(data), length);
 8001430:	3008      	adds	r0, #8
	if (this->max_size() - (this->size() - __n1) < __n2)
 8001432:	68e3      	ldr	r3, [r4, #12]
 8001434:	f1c3 537f 	rsb	r3, r3, #1069547520	@ 0x3fc00000
 8001438:	f503 137f 	add.w	r3, r3, #4177920	@ 0x3fc000
 800143c:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 8001440:	333f      	adds	r3, #63	@ 0x3f
 8001442:	429a      	cmp	r2, r3
 8001444:	d802      	bhi.n	800144c <_ZN13SerialHandler7HandlerEPhm+0xf0>
	return _M_append(__s, __n);
 8001446:	f001 fe35 	bl	80030b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 800144a:	e7bb      	b.n	80013c4 <_ZN13SerialHandler7HandlerEPhm+0x68>
	  __throw_length_error(__N(__s));
 800144c:	4805      	ldr	r0, [pc, #20]	@ (8001464 <_ZN13SerialHandler7HandlerEPhm+0x108>)
 800144e:	f001 fce6 	bl	8002e1e <_ZSt20__throw_length_errorPKc>
		CmdPending = true;
 8001452:	2301      	movs	r3, #1
 8001454:	7123      	strb	r3, [r4, #4]
		newCmd = true;
 8001456:	4a01      	ldr	r2, [pc, #4]	@ (800145c <_ZN13SerialHandler7HandlerEPhm+0x100>)
 8001458:	7013      	strb	r3, [r2, #0]
}
 800145a:	e7c4      	b.n	80013e6 <_ZN13SerialHandler7HandlerEPhm+0x8a>
 800145c:	20000000 	.word	0x20000000
 8001460:	08005d2c 	.word	0x08005d2c
 8001464:	08005c0c 	.word	0x08005c0c

08001468 <_ZN10USBHandler7ReadPMAEtt>:

void USBHandler::ReadPMA(uint16_t pma, uint16_t bytes)
{
	volatile uint16_t* pmaBuff = reinterpret_cast<volatile uint16_t*>(USB_PMAADDR + pma);		// Eg 0x40006018

	for (int i = 0; i < (bytes + 1) / 2; i++) {
 8001468:	b1c2      	cbz	r2, 800149c <_ZN10USBHandler7ReadPMAEtt+0x34>
{
 800146a:	b500      	push	{lr}
 800146c:	f101 4380 	add.w	r3, r1, #1073741824	@ 0x40000000
 8001470:	f503 43c0 	add.w	r3, r3, #24576	@ 0x6000
 8001474:	f102 0e01 	add.w	lr, r2, #1
 8001478:	ea4f 0e6e 	mov.w	lr, lr, asr #1
	for (int i = 0; i < (bytes + 1) / 2; i++) {
 800147c:	f04f 0c00 	mov.w	ip, #0
		reinterpret_cast<volatile uint16_t*>(rxBuff)[i] = *pmaBuff++;				// pma buffer can only be read in 16 bit words
 8001480:	4a07      	ldr	r2, [pc, #28]	@ (80014a0 <_ZN10USBHandler7ReadPMAEtt+0x38>)
 8001482:	4402      	add	r2, r0
 8001484:	1a51      	subs	r1, r2, r1
 8001486:	461a      	mov	r2, r3
 8001488:	3302      	adds	r3, #2
 800148a:	8812      	ldrh	r2, [r2, #0]
 800148c:	b292      	uxth	r2, r2
 800148e:	525a      	strh	r2, [r3, r1]
	for (int i = 0; i < (bytes + 1) / 2; i++) {
 8001490:	f10c 0c01 	add.w	ip, ip, #1
 8001494:	45f4      	cmp	ip, lr
 8001496:	dbf6      	blt.n	8001486 <_ZN10USBHandler7ReadPMAEtt+0x1e>
#if (USB_DEBUG)
	usbDebug[usbDebugNo].PacketSize = bytes;
	usbDebug[usbDebugNo].xferBuff0 = ((uint32_t*)rxBuff)[0];
	usbDebug[usbDebugNo].xferBuff1 = ((uint32_t*)rxBuff)[1];
#endif
}
 8001498:	f85d fb04 	ldr.w	pc, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	bfffa012 	.word	0xbfffa012

080014a4 <_ZN10USBHandler8WritePMAEtt>:


void USBHandler::WritePMA(uint16_t pma, uint16_t bytes)
{
	volatile uint16_t* pmaBuff = reinterpret_cast<volatile uint16_t*>(USB_PMAADDR + pma);
 80014a4:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 80014a8:	f501 41c0 	add.w	r1, r1, #24576	@ 0x6000

	for (int i = 0; i < (bytes + 1) / 2; i++) {
 80014ac:	f102 0c01 	add.w	ip, r2, #1
 80014b0:	ea4f 0c6c 	mov.w	ip, ip, asr #1
 80014b4:	b142      	cbz	r2, 80014c8 <_ZN10USBHandler8WritePMAEtt+0x24>
 80014b6:	2300      	movs	r3, #0
		pmaBuff[i] = reinterpret_cast<const uint16_t*>(txBuff)[i];
 80014b8:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 80014ba:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80014be:	f821 2b02 	strh.w	r2, [r1], #2
	for (int i = 0; i < (bytes + 1) / 2; i++) {
 80014c2:	3301      	adds	r3, #1
 80014c4:	4563      	cmp	r3, ip
 80014c6:	dbf7      	blt.n	80014b8 <_ZN10USBHandler8WritePMAEtt+0x14>
	}
}
 80014c8:	4770      	bx	lr
	...

080014cc <_ZN10USBHandler11EPStartXferENS_9DirectionEhm>:
// EPStartXfer setup and starts a transfer over an EP
void USBHandler::EPStartXfer(Direction direction, uint8_t endpoint, uint32_t len)
{
	uint8_t epIndex = (endpoint & 0xF);

	if (direction == Direction::in) {						// IN endpoint
 80014cc:	b171      	cbz	r1, 80014ec <_ZN10USBHandler11EPStartXferENS_9DirectionEhm+0x20>
	uint16_t wRegVal = (USB_EPR[ep].EPR & USB_EPRX_DTOGMASK) ^ status;
 80014ce:	4a1a      	ldr	r2, [pc, #104]	@ (8001538 <_ZN10USBHandler11EPStartXferENS_9DirectionEhm+0x6c>)
 80014d0:	8813      	ldrh	r3, [r2, #0]
 80014d2:	b29b      	uxth	r3, r3
	USB_EPR[ep].EPR = wRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX;
 80014d4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80014d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80014dc:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 80014e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014e8:	8013      	strh	r3, [r2, #0]
 80014ea:	4770      	bx	lr
{
 80014ec:	b570      	push	{r4, r5, r6, lr}
		if (len > maxPacket) {
			len = maxPacket;
		}

		WritePMA(USB_PMA[epIndex].ADDR_TX, len);
 80014ee:	f002 040f 	and.w	r4, r2, #15
 80014f2:	f104 6200 	add.w	r2, r4, #134217728	@ 0x8000000
 80014f6:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 80014fa:	00d6      	lsls	r6, r2, #3
 80014fc:	8831      	ldrh	r1, [r6, #0]
		if (len > maxPacket) {
 80014fe:	2b40      	cmp	r3, #64	@ 0x40
 8001500:	bf28      	it	cs
 8001502:	2340      	movcs	r3, #64	@ 0x40
		WritePMA(USB_PMA[epIndex].ADDR_TX, len);
 8001504:	b29d      	uxth	r5, r3
 8001506:	462a      	mov	r2, r5
 8001508:	b289      	uxth	r1, r1
 800150a:	f7ff ffcb 	bl	80014a4 <_ZN10USBHandler8WritePMAEtt>
		USB_PMA[epIndex].COUNT_TX = len;
 800150e:	8075      	strh	r5, [r6, #2]
	uint16_t wRegVal = (USB_EPR[ep].EPR & USB_EPTX_DTOGMASK) ^ status;
 8001510:	f104 5280 	add.w	r2, r4, #268435456	@ 0x10000000
 8001514:	f502 52b8 	add.w	r2, r2, #5888	@ 0x1700
 8001518:	0092      	lsls	r2, r2, #2
 800151a:	8813      	ldrh	r3, [r2, #0]
 800151c:	b29b      	uxth	r3, r3
	USB_EPR[ep].EPR = wRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX;
 800151e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001522:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001526:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 800152a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800152e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001532:	8013      	strh	r3, [r2, #0]

		SetTxStatus(epIndex, USB_EP_TX_VALID);
	} else {												// OUT endpoint
		SetRxStatus(0, USB_EP_RX_VALID);
	}
}
 8001534:	bd70      	pop	{r4, r5, r6, pc}
 8001536:	bf00      	nop
 8001538:	40005c00 	.word	0x40005c00

0800153c <_ZN10USBHandler7InitUSBEv>:
}


void USBHandler::InitUSB()
{
	RCC->CRRCR |= RCC_CRRCR_HSI48ON;					// Enable Internal High Speed oscillator for USB
 800153c:	4a17      	ldr	r2, [pc, #92]	@ (800159c <_ZN10USBHandler7InitUSBEv+0x60>)
 800153e:	f8d2 3098 	ldr.w	r3, [r2, #152]	@ 0x98
 8001542:	f043 0301 	orr.w	r3, r3, #1
 8001546:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
	while ((RCC->CRRCR & RCC_CRRCR_HSI48RDY) == 0);		// Wait till internal USB oscillator is ready
 800154a:	f8d2 3098 	ldr.w	r3, [r2, #152]	@ 0x98
 800154e:	f013 0f02 	tst.w	r3, #2
 8001552:	d0fa      	beq.n	800154a <_ZN10USBHandler7InitUSBEv+0xe>
	RCC->APB1ENR1 |= RCC_APB1ENR1_USBEN;				// USB2OTG (OTG_HS2) Peripheral Clocks Enable
 8001554:	4a11      	ldr	r2, [pc, #68]	@ (800159c <_ZN10USBHandler7InitUSBEv+0x60>)
 8001556:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8001558:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800155c:	6593      	str	r3, [r2, #88]	@ 0x58
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155e:	4b10      	ldr	r3, [pc, #64]	@ (80015a0 <_ZN10USBHandler7InitUSBEv+0x64>)
 8001560:	2230      	movs	r2, #48	@ 0x30
 8001562:	f883 2314 	strb.w	r2, [r3, #788]	@ 0x314
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001566:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800156a:	601a      	str	r2, [r3, #0]

	NVIC_SetPriority(USB_LP_IRQn, 3);
	NVIC_EnableIRQ(USB_LP_IRQn);

	USB->CNTR = USB_CNTR_FRES;							// Force USB Reset
 800156c:	4a0d      	ldr	r2, [pc, #52]	@ (80015a4 <_ZN10USBHandler7InitUSBEv+0x68>)
 800156e:	2301      	movs	r3, #1
 8001570:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
	USB->BTABLE = 0;									// Set Buffer table Address BTABLE_ADDRESS
 8001574:	2300      	movs	r3, #0
 8001576:	f8a2 3050 	strh.w	r3, [r2, #80]	@ 0x50
	USB->ISTR = 0;										// Clear pending interrupts
 800157a:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
	USB->CNTR = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM | USB_CNTR_RESETM;
 800157e:	f44f 433c 	mov.w	r3, #48128	@ 0xbc00
 8001582:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
	USB->BCDR |= USB_BCDR_DPPU;							// Connect internal PU resistor on USB DP line
 8001586:	f8b2 3058 	ldrh.w	r3, [r2, #88]	@ 0x58
 800158a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800158e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001592:	b29b      	uxth	r3, r3
 8001594:	f8a2 3058 	strh.w	r3, [r2, #88]	@ 0x58
}
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	40021000 	.word	0x40021000
 80015a0:	e000e100 	.word	0xe000e100
 80015a4:	40005c00 	.word	0x40005c00

080015a8 <_ZN10USBHandler16ActivateEndpointEhNS_9DirectionENS_12EndPointTypeEt>:


void USBHandler::ActivateEndpoint(uint8_t endpoint, Direction direction, EndPointType eptype, uint16_t pmaAddress)
{
 80015a8:	b510      	push	{r4, lr}
 80015aa:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 80015ae:	2000      	movs	r0, #0
	endpoint = endpoint & 0xF;
 80015b0:	f001 010f 	and.w	r1, r1, #15
	uint16_t ep_type;
	switch (eptype) {
 80015b4:	2b03      	cmp	r3, #3
 80015b6:	d80d      	bhi.n	80015d4 <_ZN10USBHandler16ActivateEndpointEhNS_9DirectionENS_12EndPointTypeEt+0x2c>
 80015b8:	e8df f003 	tbb	[pc, r3]
 80015bc:	0705020a 	.word	0x0705020a
		case Control:		ep_type = USB_EP_CONTROL;		break;
		case Isochronous:	ep_type = USB_EP_ISOCHRONOUS;	break;
 80015c0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80015c4:	e006      	b.n	80015d4 <_ZN10USBHandler16ActivateEndpointEhNS_9DirectionENS_12EndPointTypeEt+0x2c>
		case Bulk:			ep_type = USB_EP_BULK;			break;
 80015c6:	2000      	movs	r0, #0
 80015c8:	e004      	b.n	80015d4 <_ZN10USBHandler16ActivateEndpointEhNS_9DirectionENS_12EndPointTypeEt+0x2c>
		case Interrupt:		ep_type = USB_EP_INTERRUPT;		break;
 80015ca:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 80015ce:	e001      	b.n	80015d4 <_ZN10USBHandler16ActivateEndpointEhNS_9DirectionENS_12EndPointTypeEt+0x2c>
	switch (eptype) {
 80015d0:	f44f 7000 	mov.w	r0, #512	@ 0x200
	}

	// Set the address (EA=endpoint) and type (EP_TYPE=ep_type)
	USB_EPR[endpoint].EPR = (USB_EPR[endpoint].EPR & USB_EP_T_MASK) | (endpoint | ep_type | USB_EP_CTR_RX | USB_EP_CTR_TX);
 80015d4:	f101 5e80 	add.w	lr, r1, #268435456	@ 0x10000000
 80015d8:	f50e 5eb8 	add.w	lr, lr, #5888	@ 0x1700
 80015dc:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80015e0:	f8be c000 	ldrh.w	ip, [lr]
 80015e4:	fa1f fc8c 	uxth.w	ip, ip
 80015e8:	ea41 0300 	orr.w	r3, r1, r0
 80015ec:	f42c 40ec 	bic.w	r0, ip, #30208	@ 0x7600
 80015f0:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
 80015f4:	4303      	orrs	r3, r0
 80015f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015fe:	f8ae 3000 	strh.w	r3, [lr]

	if (direction == Direction::in) {
 8001602:	bb3a      	cbnz	r2, 8001654 <_ZN10USBHandler16ActivateEndpointEhNS_9DirectionENS_12EndPointTypeEt+0xac>
		USB_PMA[endpoint].ADDR_TX = pmaAddress;						// Offset of PMA used for EP TX
 8001604:	f101 6100 	add.w	r1, r1, #134217728	@ 0x8000000
 8001608:	f501 6140 	add.w	r1, r1, #3072	@ 0xc00
 800160c:	00c9      	lsls	r1, r1, #3
 800160e:	800c      	strh	r4, [r1, #0]

		// Clear tx data toggle (data packets must alternate 1 and 0 in the data field)
		if ((USB_EPR[endpoint].EPR & USB_EP_DTOG_TX) != 0) {
 8001610:	f8be 3000 	ldrh.w	r3, [lr]
 8001614:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8001618:	d00c      	beq.n	8001634 <_ZN10USBHandler16ActivateEndpointEhNS_9DirectionENS_12EndPointTypeEt+0x8c>
			uint16_t wEPVal = USB_EPR[endpoint].EPR & USB_EPREG_MASK;
 800161a:	f8be 3000 	ldrh.w	r3, [lr]
 800161e:	b29b      	uxth	r3, r3
 8001620:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001624:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
			USB_EPR[endpoint].EPR = wEPVal | USB_EP_CTR_RX | USB_EP_CTR_TX | USB_EP_DTOG_TX;
 8001628:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800162c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001630:	f8ae 3000 	strh.w	r3, [lr]
	uint16_t wRegVal = (USB_EPR[ep].EPR & USB_EPTX_DTOGMASK) ^ status;
 8001634:	f8be 3000 	ldrh.w	r3, [lr]
 8001638:	b29b      	uxth	r3, r3
	USB_EPR[ep].EPR = wRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX;
 800163a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800163e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001642:	f083 0320 	eor.w	r3, r3, #32
 8001646:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800164a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800164e:	f8ae 3000 	strh.w	r3, [lr]
		}

		SetRxStatus(endpoint, USB_EP_RX_VALID);
	}

}
 8001652:	bd10      	pop	{r4, pc}
		USB_PMA[endpoint].ADDR_RX = pmaAddress;						// Offset of PMA used for EP RX
 8001654:	f101 6100 	add.w	r1, r1, #134217728	@ 0x8000000
 8001658:	f501 6140 	add.w	r1, r1, #3072	@ 0xc00
 800165c:	00c9      	lsls	r1, r1, #3
 800165e:	808c      	strh	r4, [r1, #4]
		USB_PMA[endpoint].COUNT_RX = (1 << USB_COUNT0_RX_BLSIZE_Pos) | (1 << USB_COUNT0_RX_NUM_BLOCK_Pos);		// configure block size = 1 (32 Bytes); number of blocks = 2 (64 bytes)
 8001660:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8001664:	80cb      	strh	r3, [r1, #6]
		if ((USB_EPR[endpoint].EPR & USB_EP_DTOG_RX) != 0) {
 8001666:	f8be 3000 	ldrh.w	r3, [lr]
 800166a:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 800166e:	d00c      	beq.n	800168a <_ZN10USBHandler16ActivateEndpointEhNS_9DirectionENS_12EndPointTypeEt+0xe2>
			uint16_t wEPVal = USB_EPR[endpoint].EPR & USB_EPREG_MASK;
 8001670:	f8be 3000 	ldrh.w	r3, [lr]
 8001674:	b29b      	uxth	r3, r3
 8001676:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800167a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
			USB_EPR[endpoint].EPR = wEPVal | USB_EP_CTR_RX | USB_EP_CTR_TX | USB_EP_DTOG_RX;
 800167e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001682:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001686:	f8ae 3000 	strh.w	r3, [lr]
	uint16_t wRegVal = (USB_EPR[ep].EPR & USB_EPRX_DTOGMASK) ^ status;
 800168a:	f8be 3000 	ldrh.w	r3, [lr]
 800168e:	b29b      	uxth	r3, r3
	USB_EPR[ep].EPR = wRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8001690:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001694:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001698:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 800169c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016a4:	f8ae 3000 	strh.w	r3, [lr]
}
 80016a8:	e7d3      	b.n	8001652 <_ZN10USBHandler16ActivateEndpointEhNS_9DirectionENS_12EndPointTypeEt+0xaa>

080016aa <_ZN10USBHandler14StringToTxBuffEPKc>:
		EPStartXfer(Direction::in, 0, 0);
	}
}

void USBHandler::StringToTxBuff(const char* desc)
{
 80016aa:	b500      	push	{lr}
	uint32_t idx = 2;

	while (*desc != '\0') {
 80016ac:	780a      	ldrb	r2, [r1, #0]
 80016ae:	b1d2      	cbz	r2, 80016e6 <_ZN10USBHandler14StringToTxBuffEPKc+0x3c>
 80016b0:	4603      	mov	r3, r0
		unicodeString[idx++] = *desc++;
		unicodeString[idx++] = 0;
 80016b2:	f04f 0e00 	mov.w	lr, #0
		unicodeString[idx++] = *desc++;
 80016b6:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
		unicodeString[idx++] = 0;
 80016ba:	f883 e106 	strb.w	lr, [r3, #262]	@ 0x106
	while (*desc != '\0') {
 80016be:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80016c2:	469c      	mov	ip, r3
 80016c4:	3302      	adds	r3, #2
 80016c6:	2a00      	cmp	r2, #0
 80016c8:	d1f5      	bne.n	80016b6 <_ZN10USBHandler14StringToTxBuffEPKc+0xc>
		unicodeString[idx++] = 0;
 80016ca:	f1c0 0304 	rsb	r3, r0, #4
 80016ce:	4463      	add	r3, ip
	}
	unicodeString[0] = idx;
 80016d0:	f880 3103 	strb.w	r3, [r0, #259]	@ 0x103
	unicodeString[1] = StringDescriptor;
 80016d4:	2203      	movs	r2, #3
 80016d6:	f880 2104 	strb.w	r2, [r0, #260]	@ 0x104

	txBuff = unicodeString;
 80016da:	f200 1203 	addw	r2, r0, #259	@ 0x103
 80016de:	6582      	str	r2, [r0, #88]	@ 0x58
	txBuffSize = idx;
 80016e0:	65c3      	str	r3, [r0, #92]	@ 0x5c
}
 80016e2:	f85d fb04 	ldr.w	pc, [sp], #4
	uint32_t idx = 2;
 80016e6:	2302      	movs	r3, #2
 80016e8:	e7f2      	b.n	80016d0 <_ZN10USBHandler14StringToTxBuffEPKc+0x26>

080016ea <_ZN10USBHandler12IntToUnicodeEmPhh>:


void USBHandler::IntToUnicode(uint32_t value, uint8_t* pbuf, uint8_t len)
{
	for (uint8_t idx = 0; idx < len; idx++) {
 80016ea:	b18b      	cbz	r3, 8001710 <_ZN10USBHandler12IntToUnicodeEmPhh+0x26>
 80016ec:	3201      	adds	r2, #1
 80016ee:	eb02 0043 	add.w	r0, r2, r3, lsl #1
		} else {
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
		}

		value = value << 4;
		pbuf[2 * idx + 1] = 0;
 80016f2:	f04f 0c00 	mov.w	ip, #0
		if ((value >> 28) < 0xA) {
 80016f6:	0f0b      	lsrs	r3, r1, #28
 80016f8:	f1b1 4f20 	cmp.w	r1, #2684354560	@ 0xa0000000
			pbuf[2 * idx] = (value >> 28) + '0';
 80016fc:	bf34      	ite	cc
 80016fe:	3330      	addcc	r3, #48	@ 0x30
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8001700:	3337      	addcs	r3, #55	@ 0x37
 8001702:	f802 3c01 	strb.w	r3, [r2, #-1]
		value = value << 4;
 8001706:	0109      	lsls	r1, r1, #4
		pbuf[2 * idx + 1] = 0;
 8001708:	f802 cb02 	strb.w	ip, [r2], #2
	for (uint8_t idx = 0; idx < len; idx++) {
 800170c:	4282      	cmp	r2, r0
 800170e:	d1f2      	bne.n	80016f6 <_ZN10USBHandler12IntToUnicodeEmPhh+0xc>
	}
}
 8001710:	4770      	bx	lr
	...

08001714 <_ZN10USBHandler13GetDescriptorEv>:
{
 8001714:	b538      	push	{r3, r4, r5, lr}
 8001716:	4604      	mov	r4, r0
	switch (static_cast<Descriptor>(req.wValue >> 8))	{
 8001718:	f8b0 206e 	ldrh.w	r2, [r0, #110]	@ 0x6e
 800171c:	0a13      	lsrs	r3, r2, #8
 800171e:	3b01      	subs	r3, #1
 8001720:	2b0e      	cmp	r3, #14
 8001722:	d86a      	bhi.n	80017fa <_ZN10USBHandler13GetDescriptorEv+0xe6>
 8001724:	e8df f003 	tbb	[pc, r3]
 8001728:	69241c08 	.word	0x69241c08
 800172c:	69696969 	.word	0x69696969
 8001730:	69696969 	.word	0x69696969
 8001734:	6969      	.short	0x6969
 8001736:	20          	.byte	0x20
 8001737:	00          	.byte	0x00
		txBuff = USBD_FS_DeviceDesc;
 8001738:	f100 037c 	add.w	r3, r0, #124	@ 0x7c
		break;
 800173c:	2212      	movs	r2, #18
				txBuff = USBD_StringSerial;
 800173e:	65a3      	str	r3, [r4, #88]	@ 0x58
				txBuffSize = sizeof(USBD_StringSerial);
 8001740:	65e2      	str	r2, [r4, #92]	@ 0x5c
	if ((txBuffSize != 0) && (req.wLength != 0)) {
 8001742:	f8b4 3072 	ldrh.w	r3, [r4, #114]	@ 0x72
 8001746:	2b00      	cmp	r3, #0
 8001748:	d066      	beq.n	8001818 <_ZN10USBHandler13GetDescriptorEv+0x104>
		txRemaining = txBuffSize;
 800174a:	6622      	str	r2, [r4, #96]	@ 0x60
		txBuffSize = std::min(txBuffSize, static_cast<uint32_t>(req.wLength));
 800174c:	4293      	cmp	r3, r2
 800174e:	bf28      	it	cs
 8001750:	4613      	movcs	r3, r2
 8001752:	65e3      	str	r3, [r4, #92]	@ 0x5c
		EPStartXfer(Direction::in, 0, txBuffSize);
 8001754:	2200      	movs	r2, #0
 8001756:	4611      	mov	r1, r2
 8001758:	4620      	mov	r0, r4
 800175a:	f7ff feb7 	bl	80014cc <_ZN10USBHandler11EPStartXferENS_9DirectionEhm>
 800175e:	e019      	b.n	8001794 <_ZN10USBHandler13GetDescriptorEv+0x80>
		txBuff = USBD_CDC_CfgFSDesc;
 8001760:	f100 038e 	add.w	r3, r0, #142	@ 0x8e
		break;
 8001764:	224b      	movs	r2, #75	@ 0x4b
 8001766:	e7ea      	b.n	800173e <_ZN10USBHandler13GetDescriptorEv+0x2a>
		txBuff = USBD_FS_BOSDesc;
 8001768:	f100 03d9 	add.w	r3, r0, #217	@ 0xd9
		break;
 800176c:	220c      	movs	r2, #12
 800176e:	e7e6      	b.n	800173e <_ZN10USBHandler13GetDescriptorEv+0x2a>
		switch ((uint8_t)(req.wValue)) {
 8001770:	b2d2      	uxtb	r2, r2
 8001772:	2a04      	cmp	r2, #4
 8001774:	d832      	bhi.n	80017dc <_ZN10USBHandler13GetDescriptorEv+0xc8>
 8001776:	e8df f002 	tbb	[pc, r2]
 800177a:	0703      	.short	0x0703
 800177c:	1612      	.short	0x1612
 800177e:	2d          	.byte	0x2d
 800177f:	00          	.byte	0x00
			txBuff = USBD_LangIDDesc;
 8001780:	f100 03ff 	add.w	r3, r0, #255	@ 0xff
			break;
 8001784:	2204      	movs	r2, #4
 8001786:	e7da      	b.n	800173e <_ZN10USBHandler13GetDescriptorEv+0x2a>
			StringToTxBuff(manufacturerString);
 8001788:	4927      	ldr	r1, [pc, #156]	@ (8001828 <_ZN10USBHandler13GetDescriptorEv+0x114>)
 800178a:	f7ff ff8e 	bl	80016aa <_ZN10USBHandler14StringToTxBuffEPKc>
	if ((txBuffSize != 0) && (req.wLength != 0)) {
 800178e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001790:	2a00      	cmp	r2, #0
 8001792:	d1d6      	bne.n	8001742 <_ZN10USBHandler13GetDescriptorEv+0x2e>
	if (req.wLength == 0) {
 8001794:	f8b4 3072 	ldrh.w	r3, [r4, #114]	@ 0x72
 8001798:	2b00      	cmp	r3, #0
 800179a:	d03d      	beq.n	8001818 <_ZN10USBHandler13GetDescriptorEv+0x104>
}
 800179c:	bd38      	pop	{r3, r4, r5, pc}
			StringToTxBuff(productString);
 800179e:	4923      	ldr	r1, [pc, #140]	@ (800182c <_ZN10USBHandler13GetDescriptorEv+0x118>)
 80017a0:	f7ff ff83 	bl	80016aa <_ZN10USBHandler14StringToTxBuffEPKc>
			break;
 80017a4:	e7f3      	b.n	800178e <_ZN10USBHandler13GetDescriptorEv+0x7a>
				uint32_t deviceserial0 = *(uint32_t*) UID_BASE;
 80017a6:	4b22      	ldr	r3, [pc, #136]	@ (8001830 <_ZN10USBHandler13GetDescriptorEv+0x11c>)
 80017a8:	f8d3 5590 	ldr.w	r5, [r3, #1424]	@ 0x590
				deviceserial0 += deviceserial2;
 80017ac:	0069      	lsls	r1, r5, #1
				if (deviceserial0 != 0) {
 80017ae:	3108      	adds	r1, #8
 80017b0:	d103      	bne.n	80017ba <_ZN10USBHandler13GetDescriptorEv+0xa6>
				txBuff = USBD_StringSerial;
 80017b2:	f104 03e5 	add.w	r3, r4, #229	@ 0xe5
			break;
 80017b6:	221a      	movs	r2, #26
 80017b8:	e7c1      	b.n	800173e <_ZN10USBHandler13GetDescriptorEv+0x2a>
					IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80017ba:	2308      	movs	r3, #8
 80017bc:	f100 02e7 	add.w	r2, r0, #231	@ 0xe7
 80017c0:	f7ff ff93 	bl	80016ea <_ZN10USBHandler12IntToUnicodeEmPhh>
					IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80017c4:	2304      	movs	r3, #4
 80017c6:	f104 02f7 	add.w	r2, r4, #247	@ 0xf7
 80017ca:	18e9      	adds	r1, r5, r3
 80017cc:	4620      	mov	r0, r4
 80017ce:	f7ff ff8c 	bl	80016ea <_ZN10USBHandler12IntToUnicodeEmPhh>
 80017d2:	e7ee      	b.n	80017b2 <_ZN10USBHandler13GetDescriptorEv+0x9e>
	    	StringToTxBuff(cdcString);
 80017d4:	4917      	ldr	r1, [pc, #92]	@ (8001834 <_ZN10USBHandler13GetDescriptorEv+0x120>)
 80017d6:	f7ff ff68 	bl	80016aa <_ZN10USBHandler14StringToTxBuffEPKc>
	      break;
 80017da:	e7d8      	b.n	800178e <_ZN10USBHandler13GetDescriptorEv+0x7a>
	uint16_t wRegVal = (USB_EPR[ep].EPR & USB_EPTX_DTOGMASK) ^ status;
 80017dc:	4a16      	ldr	r2, [pc, #88]	@ (8001838 <_ZN10USBHandler13GetDescriptorEv+0x124>)
 80017de:	8813      	ldrh	r3, [r2, #0]
 80017e0:	b29b      	uxth	r3, r3
	USB_EPR[ep].EPR = wRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX;
 80017e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80017e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80017ea:	f083 0310 	eor.w	r3, r3, #16
 80017ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017f6:	8013      	strh	r3, [r2, #0]
}
 80017f8:	e7d0      	b.n	800179c <_ZN10USBHandler13GetDescriptorEv+0x88>
	uint16_t wRegVal = (USB_EPR[ep].EPR & USB_EPTX_DTOGMASK) ^ status;
 80017fa:	4a0f      	ldr	r2, [pc, #60]	@ (8001838 <_ZN10USBHandler13GetDescriptorEv+0x124>)
 80017fc:	8813      	ldrh	r3, [r2, #0]
 80017fe:	b29b      	uxth	r3, r3
	USB_EPR[ep].EPR = wRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8001800:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001804:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001808:	f083 0310 	eor.w	r3, r3, #16
 800180c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001810:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001814:	8013      	strh	r3, [r2, #0]
}
 8001816:	e7c1      	b.n	800179c <_ZN10USBHandler13GetDescriptorEv+0x88>
		EPStartXfer(Direction::in, 0, 0);
 8001818:	2300      	movs	r3, #0
 800181a:	461a      	mov	r2, r3
 800181c:	4619      	mov	r1, r3
 800181e:	4620      	mov	r0, r4
 8001820:	f7ff fe54 	bl	80014cc <_ZN10USBHandler11EPStartXferENS_9DirectionEhm>
 8001824:	e7ba      	b.n	800179c <_ZN10USBHandler13GetDescriptorEv+0x88>
 8001826:	bf00      	nop
 8001828:	08005d60 	.word	0x08005d60
 800182c:	08005d74 	.word	0x08005d74
 8001830:	1fff7000 	.word	0x1fff7000
 8001834:	08005d88 	.word	0x08005d88
 8001838:	40005c00 	.word	0x40005c00

0800183c <_ZN10USBHandler18ProcessSetupPacketEv>:
{
 800183c:	b530      	push	{r4, r5, lr}
 800183e:	b083      	sub	sp, #12
 8001840:	4604      	mov	r4, r0
		uint16_t wValue;
		uint16_t wIndex;
		uint16_t wLength;

		void loadData(const uint8_t* data) {
			bmRequest = data[0];
 8001842:	7d01      	ldrb	r1, [r0, #20]
 8001844:	f880 106c 	strb.w	r1, [r0, #108]	@ 0x6c
			bRequest = data[1];
 8001848:	7d40      	ldrb	r0, [r0, #21]
 800184a:	f884 006d 	strb.w	r0, [r4, #109]	@ 0x6d
			wValue = static_cast<uint16_t>(data[2]) + (data[3] << 8);
 800184e:	7de3      	ldrb	r3, [r4, #23]
 8001850:	7da2      	ldrb	r2, [r4, #22]
 8001852:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 8001856:	b292      	uxth	r2, r2
 8001858:	f8a4 206e 	strh.w	r2, [r4, #110]	@ 0x6e
			wIndex = static_cast<uint16_t>(data[4]) + (data[5] << 8);
 800185c:	f894 c019 	ldrb.w	ip, [r4, #25]
 8001860:	7e23      	ldrb	r3, [r4, #24]
 8001862:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 8001866:	f8a4 3070 	strh.w	r3, [r4, #112]	@ 0x70
			wLength = static_cast<uint16_t>(data[6]) + (data[7] << 8);
 800186a:	f894 c01b 	ldrb.w	ip, [r4, #27]
 800186e:	7ea3      	ldrb	r3, [r4, #26]
 8001870:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 8001874:	b29b      	uxth	r3, r3
 8001876:	f8a4 3072 	strh.w	r3, [r4, #114]	@ 0x72
	if ((req.bmRequest & USB_REQ_RECIPIENT_MASK) == RequestRecipientDevice && (req.bmRequest & USB_REQ_TYPE_MASK) == RequestTypeStandard) {
 800187a:	f011 0c63 	ands.w	ip, r1, #99	@ 0x63
 800187e:	d14b      	bne.n	8001918 <_ZN10USBHandler18ProcessSetupPacketEv+0xdc>
		switch (static_cast<Request>(req.bRequest)) {
 8001880:	2806      	cmp	r0, #6
 8001882:	d012      	beq.n	80018aa <_ZN10USBHandler18ProcessSetupPacketEv+0x6e>
 8001884:	2809      	cmp	r0, #9
 8001886:	d021      	beq.n	80018cc <_ZN10USBHandler18ProcessSetupPacketEv+0x90>
 8001888:	2805      	cmp	r0, #5
 800188a:	d012      	beq.n	80018b2 <_ZN10USBHandler18ProcessSetupPacketEv+0x76>
	uint16_t wRegVal = (USB_EPR[ep].EPR & USB_EPTX_DTOGMASK) ^ status;
 800188c:	4a3a      	ldr	r2, [pc, #232]	@ (8001978 <_ZN10USBHandler18ProcessSetupPacketEv+0x13c>)
 800188e:	8813      	ldrh	r3, [r2, #0]
 8001890:	b29b      	uxth	r3, r3
	USB_EPR[ep].EPR = wRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8001892:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001896:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800189a:	f083 0310 	eor.w	r3, r3, #16
 800189e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018a6:	8013      	strh	r3, [r2, #0]
}
 80018a8:	e047      	b.n	800193a <_ZN10USBHandler18ProcessSetupPacketEv+0xfe>
			GetDescriptor();
 80018aa:	4620      	mov	r0, r4
 80018ac:	f7ff ff32 	bl	8001714 <_ZN10USBHandler13GetDescriptorEv>
			break;
 80018b0:	e043      	b.n	800193a <_ZN10USBHandler18ProcessSetupPacketEv+0xfe>
			devAddress = static_cast<uint8_t>(req.wValue) & 0x7F;			// Address address is set on the next interrupt - hold in temp storage
 80018b2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80018b6:	f884 2065 	strb.w	r2, [r4, #101]	@ 0x65
			EPStartXfer(Direction::in, 0, 0);
 80018ba:	2300      	movs	r3, #0
 80018bc:	461a      	mov	r2, r3
 80018be:	4619      	mov	r1, r3
 80018c0:	4620      	mov	r0, r4
 80018c2:	f7ff fe03 	bl	80014cc <_ZN10USBHandler11EPStartXferENS_9DirectionEhm>
			devState = DeviceState::Addressed;
 80018c6:	2301      	movs	r3, #1
 80018c8:	66a3      	str	r3, [r4, #104]	@ 0x68
			break;
 80018ca:	e036      	b.n	800193a <_ZN10USBHandler18ProcessSetupPacketEv+0xfe>
			if (devState == DeviceState::Addressed) {
 80018cc:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d133      	bne.n	800193a <_ZN10USBHandler18ProcessSetupPacketEv+0xfe>
				devState = DeviceState::Configured;
 80018d2:	2502      	movs	r5, #2
 80018d4:	66a5      	str	r5, [r4, #104]	@ 0x68
				ActivateEndpoint(CDC_In,  Direction::in,  Bulk,      0xC0);			// Activate CDC in endpoint
 80018d6:	23c0      	movs	r3, #192	@ 0xc0
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	462b      	mov	r3, r5
 80018dc:	2200      	movs	r2, #0
 80018de:	2181      	movs	r1, #129	@ 0x81
 80018e0:	4620      	mov	r0, r4
 80018e2:	f7ff fe61 	bl	80015a8 <_ZN10USBHandler16ActivateEndpointEhNS_9DirectionENS_12EndPointTypeEt>
				ActivateEndpoint(CDC_Out, Direction::out, Bulk,      0x110);		// Activate CDC out endpoint
 80018e6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	462b      	mov	r3, r5
 80018ee:	2201      	movs	r2, #1
 80018f0:	4611      	mov	r1, r2
 80018f2:	4620      	mov	r0, r4
 80018f4:	f7ff fe58 	bl	80015a8 <_ZN10USBHandler16ActivateEndpointEhNS_9DirectionENS_12EndPointTypeEt>
				ActivateEndpoint(CDC_Cmd, Direction::in,  Interrupt, 0x100);		// Activate Command IN EP
 80018f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018fc:	9300      	str	r3, [sp, #0]
 80018fe:	2303      	movs	r3, #3
 8001900:	2200      	movs	r2, #0
 8001902:	2182      	movs	r1, #130	@ 0x82
 8001904:	4620      	mov	r0, r4
 8001906:	f7ff fe4f 	bl	80015a8 <_ZN10USBHandler16ActivateEndpointEhNS_9DirectionENS_12EndPointTypeEt>
				EPStartXfer(Direction::in, 0, 0);
 800190a:	2300      	movs	r3, #0
 800190c:	461a      	mov	r2, r3
 800190e:	4619      	mov	r1, r3
 8001910:	4620      	mov	r0, r4
 8001912:	f7ff fddb 	bl	80014cc <_ZN10USBHandler11EPStartXferENS_9DirectionEhm>
 8001916:	e010      	b.n	800193a <_ZN10USBHandler18ProcessSetupPacketEv+0xfe>
	} else if ((req.bmRequest & USB_REQ_RECIPIENT_MASK) == RequestRecipientInterface && (req.bmRequest & USB_REQ_TYPE_MASK) == RequestTypeClass) {
 8001918:	f1bc 0f21 	cmp.w	ip, #33	@ 0x21
 800191c:	d00f      	beq.n	800193e <_ZN10USBHandler18ProcessSetupPacketEv+0x102>
	uint16_t wRegVal = (USB_EPR[ep].EPR & USB_EPTX_DTOGMASK) ^ status;
 800191e:	4a16      	ldr	r2, [pc, #88]	@ (8001978 <_ZN10USBHandler18ProcessSetupPacketEv+0x13c>)
 8001920:	8813      	ldrh	r3, [r2, #0]
 8001922:	b29b      	uxth	r3, r3
	USB_EPR[ep].EPR = wRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8001924:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001928:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800192c:	f083 0310 	eor.w	r3, r3, #16
 8001930:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001934:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001938:	8013      	strh	r3, [r2, #0]
}
 800193a:	b003      	add	sp, #12
 800193c:	bd30      	pop	{r4, r5, pc}
		if (req.wLength != 0) {
 800193e:	b1a3      	cbz	r3, 800196a <_ZN10USBHandler18ProcessSetupPacketEv+0x12e>
			if ((req.bmRequest & USB_REQ_DIRECTION_MASK) != 0)	{		// Device to host
 8001940:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8001944:	d107      	bne.n	8001956 <_ZN10USBHandler18ProcessSetupPacketEv+0x11a>
				cmdOpCode = req.bRequest;
 8001946:	f884 0064 	strb.w	r0, [r4, #100]	@ 0x64
				EPStartXfer(Direction::out, 0, req.wLength);
 800194a:	2200      	movs	r2, #0
 800194c:	2101      	movs	r1, #1
 800194e:	4620      	mov	r0, r4
 8001950:	f7ff fdbc 	bl	80014cc <_ZN10USBHandler11EPStartXferENS_9DirectionEhm>
 8001954:	e7f1      	b.n	800193a <_ZN10USBHandler18ProcessSetupPacketEv+0xfe>
				txBuffSize = req.wLength;
 8001956:	65e3      	str	r3, [r4, #92]	@ 0x5c
				txBuff = (uint8_t*)&USBD_CDC_LineCoding;
 8001958:	f104 0274 	add.w	r2, r4, #116	@ 0x74
 800195c:	65a2      	str	r2, [r4, #88]	@ 0x58
				EPStartXfer(Direction::in, 0, req.wLength);
 800195e:	2200      	movs	r2, #0
 8001960:	4611      	mov	r1, r2
 8001962:	4620      	mov	r0, r4
 8001964:	f7ff fdb2 	bl	80014cc <_ZN10USBHandler11EPStartXferENS_9DirectionEhm>
 8001968:	e7e7      	b.n	800193a <_ZN10USBHandler18ProcessSetupPacketEv+0xfe>
			EPStartXfer(Direction::in, 0, 0);
 800196a:	2300      	movs	r3, #0
 800196c:	461a      	mov	r2, r3
 800196e:	4619      	mov	r1, r3
 8001970:	4620      	mov	r0, r4
 8001972:	f7ff fdab 	bl	80014cc <_ZN10USBHandler11EPStartXferENS_9DirectionEhm>
 8001976:	e7e0      	b.n	800193a <_ZN10USBHandler18ProcessSetupPacketEv+0xfe>
 8001978:	40005c00 	.word	0x40005c00

0800197c <_ZN10USBHandler19USBInterruptHandlerEv>:
	USB->ISTR &= ~(USB_ISTR_SOF | USB_ISTR_ESOF);
 800197c:	4a98      	ldr	r2, [pc, #608]	@ (8001be0 <_ZN10USBHandler19USBInterruptHandlerEv+0x264>)
 800197e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8001982:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001986:	041b      	lsls	r3, r3, #16
 8001988:	0c1b      	lsrs	r3, r3, #16
 800198a:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
	if ((USB->ISTR) == 0) {
 800198e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8001992:	b29b      	uxth	r3, r3
 8001994:	2b00      	cmp	r3, #0
 8001996:	f000 81a9 	beq.w	8001cec <_ZN10USBHandler19USBInterruptHandlerEv+0x370>
{
 800199a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800199e:	b085      	sub	sp, #20
 80019a0:	4605      	mov	r5, r0
		usbDebug[usbDebugNo].Interrupt = USB->ISTR;
		usbDebugEvent++;
	}
#endif

	return (USB->ISTR & interrupt) == interrupt;
 80019a2:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
	while (ReadInterrupts(USB_ISTR_CTR)) {					// Originally PCD_EP_ISR_Handler
 80019a6:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80019aa:	f000 811d 	beq.w	8001be8 <_ZN10USBHandler19USBInterruptHandlerEv+0x26c>
		uint8_t epIndex = USB->ISTR & USB_ISTR_EP_ID;		// Extract highest priority endpoint number
 80019ae:	4617      	mov	r7, r2
				transmitting = false;
 80019b0:	f04f 0800 	mov.w	r8, #0
					rxCount = USB_PMA->COUNT_RX & USB_COUNT0_RX_COUNT0_RX;
 80019b4:	f8df 922c 	ldr.w	r9, [pc, #556]	@ 8001be4 <_ZN10USBHandler19USBInterruptHandlerEv+0x268>
 80019b8:	e039      	b.n	8001a2e <_ZN10USBHandler19USBInterruptHandlerEv+0xb2>
	uint16_t wRegVal = (USB_EPR[ep].EPR & USB_EPTX_DTOGMASK) ^ status;
 80019ba:	883b      	ldrh	r3, [r7, #0]
 80019bc:	b29b      	uxth	r3, r3
	USB_EPR[ep].EPR = wRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX;
 80019be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80019c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80019c6:	f083 0310 	eor.w	r3, r3, #16
 80019ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019d2:	803b      	strh	r3, [r7, #0]
					EPStartXfer(Direction::out, 0, 0);
 80019d4:	4643      	mov	r3, r8
 80019d6:	4642      	mov	r2, r8
 80019d8:	2101      	movs	r1, #1
 80019da:	4628      	mov	r0, r5
 80019dc:	f7ff fd76 	bl	80014cc <_ZN10USBHandler11EPStartXferENS_9DirectionEhm>
 80019e0:	e052      	b.n	8001a88 <_ZN10USBHandler19USBInterruptHandlerEv+0x10c>
				if ((USB->EP0R & USB_EP_SETUP) != 0) {
 80019e2:	883b      	ldrh	r3, [r7, #0]
 80019e4:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 80019e8:	d15d      	bne.n	8001aa6 <_ZN10USBHandler19USBInterruptHandlerEv+0x12a>
	uint16_t wRegVal = (USB_EPR[ep].EPR & USB_EPREG_MASK) & ~USB_EP_CTR_RX;
 80019ea:	883b      	ldrh	r3, [r7, #0]
 80019ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80019f0:	051b      	lsls	r3, r3, #20
 80019f2:	0d1b      	lsrs	r3, r3, #20
	USB_EPR[ep].EPR = wRegVal | USB_EP_CTR_TX;
 80019f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019f8:	803b      	strh	r3, [r7, #0]
					rxCount = USB_PMA->COUNT_RX & USB_COUNT0_RX_COUNT0_RX;
 80019fa:	f8b9 2006 	ldrh.w	r2, [r9, #6]
 80019fe:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001a02:	656a      	str	r2, [r5, #84]	@ 0x54
					if (rxCount != 0) {
 8001a04:	2a00      	cmp	r2, #0
 8001a06:	d164      	bne.n	8001ad2 <_ZN10USBHandler19USBInterruptHandlerEv+0x156>
	uint16_t wRegVal = (USB_EPR[ep].EPR & USB_EPRX_DTOGMASK) ^ status;
 8001a08:	883b      	ldrh	r3, [r7, #0]
 8001a0a:	b29b      	uxth	r3, r3
	USB_EPR[ep].EPR = wRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8001a0c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001a10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001a14:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8001a18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a20:	803b      	strh	r3, [r7, #0]
	return (USB->ISTR & interrupt) == interrupt;
 8001a22:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
	while (ReadInterrupts(USB_ISTR_CTR)) {					// Originally PCD_EP_ISR_Handler
 8001a26:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8001a2a:	f000 80dd 	beq.w	8001be8 <_ZN10USBHandler19USBInterruptHandlerEv+0x26c>
		uint8_t epIndex = USB->ISTR & USB_ISTR_EP_ID;		// Extract highest priority endpoint number
 8001a2e:	f8b7 4044 	ldrh.w	r4, [r7, #68]	@ 0x44
		if (epIndex == 0) {
 8001a32:	f014 040f 	ands.w	r4, r4, #15
 8001a36:	d16c      	bne.n	8001b12 <_ZN10USBHandler19USBInterruptHandlerEv+0x196>
			if ((USB->ISTR & USB_ISTR_DIR) == 0) {			// DIR = 0: Direction IN
 8001a38:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8001a3c:	f013 0f10 	tst.w	r3, #16
 8001a40:	d1cf      	bne.n	80019e2 <_ZN10USBHandler19USBInterruptHandlerEv+0x66>
	uint16_t wRegVal = (USB_EPR[ep].EPR & USB_EPREG_MASK) & ~USB_EP_CTR_TX;
 8001a42:	883b      	ldrh	r3, [r7, #0]
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001a4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
	USB_EPR[ep].EPR = wRegVal | USB_EP_CTR_RX;
 8001a4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	803b      	strh	r3, [r7, #0]
				uint16_t txBytes = USB_PMA->COUNT_TX & USB_COUNT0_TX_COUNT0_TX_Msk;
 8001a5a:	f8b9 4002 	ldrh.w	r4, [r9, #2]
 8001a5e:	f3c4 0409 	ubfx	r4, r4, #0, #10
				txBuff += txBytes;
 8001a62:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8001a64:	4423      	add	r3, r4
 8001a66:	65ab      	str	r3, [r5, #88]	@ 0x58
				if (txRemaining > maxPacket) {
 8001a68:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8001a6a:	2b40      	cmp	r3, #64	@ 0x40
 8001a6c:	d9a5      	bls.n	80019ba <_ZN10USBHandler19USBInterruptHandlerEv+0x3e>
					txRemaining -= maxPacket;
 8001a6e:	3b40      	subs	r3, #64	@ 0x40
 8001a70:	662b      	str	r3, [r5, #96]	@ 0x60
					EPStartXfer(Direction::in, 0, txRemaining);
 8001a72:	4642      	mov	r2, r8
 8001a74:	4641      	mov	r1, r8
 8001a76:	4628      	mov	r0, r5
 8001a78:	f7ff fd28 	bl	80014cc <_ZN10USBHandler11EPStartXferENS_9DirectionEhm>
					EPStartXfer(Direction::out, 0, 0);
 8001a7c:	4643      	mov	r3, r8
 8001a7e:	4642      	mov	r2, r8
 8001a80:	2101      	movs	r1, #1
 8001a82:	4628      	mov	r0, r5
 8001a84:	f7ff fd22 	bl	80014cc <_ZN10USBHandler11EPStartXferENS_9DirectionEhm>
				if (devAddress > 0 && txBytes == 0) {
 8001a88:	f895 3065 	ldrb.w	r3, [r5, #101]	@ 0x65
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d0c8      	beq.n	8001a22 <_ZN10USBHandler19USBInterruptHandlerEv+0xa6>
 8001a90:	2c00      	cmp	r4, #0
 8001a92:	d1c6      	bne.n	8001a22 <_ZN10USBHandler19USBInterruptHandlerEv+0xa6>
					USB->DADDR = (devAddress | USB_DADDR_EF);
 8001a94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a98:	4a51      	ldr	r2, [pc, #324]	@ (8001be0 <_ZN10USBHandler19USBInterruptHandlerEv+0x264>)
 8001a9a:	f8a2 304c 	strh.w	r3, [r2, #76]	@ 0x4c
					devAddress = 0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	f885 3065 	strb.w	r3, [r5, #101]	@ 0x65
 8001aa4:	e7bd      	b.n	8001a22 <_ZN10USBHandler19USBInterruptHandlerEv+0xa6>
					rxCount = USB_PMA->COUNT_RX & USB_COUNT0_RX_COUNT0_RX_Msk;
 8001aa6:	4b4f      	ldr	r3, [pc, #316]	@ (8001be4 <_ZN10USBHandler19USBInterruptHandlerEv+0x268>)
 8001aa8:	88da      	ldrh	r2, [r3, #6]
 8001aaa:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001aae:	656a      	str	r2, [r5, #84]	@ 0x54
					ReadPMA(0x18, rxCount);					// Read setup data into rxBuff
 8001ab0:	2118      	movs	r1, #24
 8001ab2:	4628      	mov	r0, r5
 8001ab4:	f7ff fcd8 	bl	8001468 <_ZN10USBHandler7ReadPMAEtt>
	uint16_t wRegVal = (USB_EPR[ep].EPR & USB_EPREG_MASK) & ~USB_EP_CTR_RX;
 8001ab8:	4a49      	ldr	r2, [pc, #292]	@ (8001be0 <_ZN10USBHandler19USBInterruptHandlerEv+0x264>)
 8001aba:	8813      	ldrh	r3, [r2, #0]
 8001abc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ac0:	051b      	lsls	r3, r3, #20
 8001ac2:	0d1b      	lsrs	r3, r3, #20
	USB_EPR[ep].EPR = wRegVal | USB_EP_CTR_TX;
 8001ac4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ac8:	8013      	strh	r3, [r2, #0]
					ProcessSetupPacket();					// Parse setup packet into request, locate data (eg descriptor) and populate TX buffer
 8001aca:	4628      	mov	r0, r5
 8001acc:	f7ff feb6 	bl	800183c <_ZN10USBHandler18ProcessSetupPacketEv>
 8001ad0:	e7a7      	b.n	8001a22 <_ZN10USBHandler19USBInterruptHandlerEv+0xa6>
						ReadPMA(0x18, rxCount);
 8001ad2:	2118      	movs	r1, #24
 8001ad4:	4628      	mov	r0, r5
 8001ad6:	f7ff fcc7 	bl	8001468 <_ZN10USBHandler7ReadPMAEtt>
						if (devState == DeviceState::Configured && cmdOpCode != 0) {
 8001ada:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d193      	bne.n	8001a08 <_ZN10USBHandler19USBInterruptHandlerEv+0x8c>
 8001ae0:	f895 3064 	ldrb.w	r3, [r5, #100]	@ 0x64
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d08f      	beq.n	8001a08 <_ZN10USBHandler19USBInterruptHandlerEv+0x8c>
							if (cmdOpCode == 0x20) {			// SET_LINE_CODING - capture the data passed to return when queried with GET_LINE_CODING
 8001ae8:	2b20      	cmp	r3, #32
 8001aea:	d009      	beq.n	8001b00 <_ZN10USBHandler19USBInterruptHandlerEv+0x184>
							EPStartXfer(Direction::in, 0, 0);
 8001aec:	2300      	movs	r3, #0
 8001aee:	461a      	mov	r2, r3
 8001af0:	4619      	mov	r1, r3
 8001af2:	4628      	mov	r0, r5
 8001af4:	f7ff fcea 	bl	80014cc <_ZN10USBHandler11EPStartXferENS_9DirectionEhm>
							cmdOpCode = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	f885 3064 	strb.w	r3, [r5, #100]	@ 0x64
 8001afe:	e783      	b.n	8001a08 <_ZN10USBHandler19USBInterruptHandlerEv+0x8c>
								USBD_CDC_LineCoding = *(reinterpret_cast<USBD_CDC_LineCodingTypeDef*>(rxBuff));
 8001b00:	f105 0374 	add.w	r3, r5, #116	@ 0x74
 8001b04:	f105 0214 	add.w	r2, r5, #20
 8001b08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b0c:	e883 0003 	stmia.w	r3, {r0, r1}
 8001b10:	e7ec      	b.n	8001aec <_ZN10USBHandler19USBInterruptHandlerEv+0x170>
			if ((USB_EPR[epIndex].EPR & USB_EP_CTR_RX) != 0) {
 8001b12:	f104 5680 	add.w	r6, r4, #268435456	@ 0x10000000
 8001b16:	f506 56b8 	add.w	r6, r6, #5888	@ 0x1700
 8001b1a:	00b6      	lsls	r6, r6, #2
 8001b1c:	8833      	ldrh	r3, [r6, #0]
 8001b1e:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8001b22:	d129      	bne.n	8001b78 <_ZN10USBHandler19USBInterruptHandlerEv+0x1fc>
			if ((USB_EPR[epIndex].EPR & USB_EP_CTR_TX) != 0) {
 8001b24:	8833      	ldrh	r3, [r6, #0]
 8001b26:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001b2a:	f43f af7a 	beq.w	8001a22 <_ZN10USBHandler19USBInterruptHandlerEv+0xa6>
				transmitting = false;
 8001b2e:	f885 8010 	strb.w	r8, [r5, #16]
	uint16_t wRegVal = (USB_EPR[ep].EPR & USB_EPREG_MASK) & ~USB_EP_CTR_TX;
 8001b32:	8833      	ldrh	r3, [r6, #0]
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001b3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
	USB_EPR[ep].EPR = wRegVal | USB_EP_CTR_RX;
 8001b3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	8033      	strh	r3, [r6, #0]
				uint16_t txBytes = USB_PMA[epIndex].COUNT_TX & USB_COUNT0_TX_COUNT0_TX;
 8001b4a:	f104 6300 	add.w	r3, r4, #134217728	@ 0x8000000
 8001b4e:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	885a      	ldrh	r2, [r3, #2]
				if (txBuffSize >= txBytes) {					// Transmitting data larger than buffer size
 8001b56:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8001b58:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	f4ff af60 	bcc.w	8001a22 <_ZN10USBHandler19USBInterruptHandlerEv+0xa6>
					txBuffSize -= txBytes;
 8001b62:	1a9b      	subs	r3, r3, r2
 8001b64:	65eb      	str	r3, [r5, #92]	@ 0x5c
					txBuff += txBytes;
 8001b66:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8001b68:	4411      	add	r1, r2
 8001b6a:	65a9      	str	r1, [r5, #88]	@ 0x58
					EPStartXfer(Direction::in, epIndex, txBuffSize);
 8001b6c:	4622      	mov	r2, r4
 8001b6e:	2100      	movs	r1, #0
 8001b70:	4628      	mov	r0, r5
 8001b72:	f7ff fcab 	bl	80014cc <_ZN10USBHandler11EPStartXferENS_9DirectionEhm>
 8001b76:	e754      	b.n	8001a22 <_ZN10USBHandler19USBInterruptHandlerEv+0xa6>
	uint16_t wRegVal = (USB_EPR[ep].EPR & USB_EPREG_MASK) & ~USB_EP_CTR_RX;
 8001b78:	8833      	ldrh	r3, [r6, #0]
 8001b7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b7e:	051b      	lsls	r3, r3, #20
 8001b80:	0d1b      	lsrs	r3, r3, #20
	USB_EPR[ep].EPR = wRegVal | USB_EP_CTR_TX;
 8001b82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b86:	8033      	strh	r3, [r6, #0]
				rxCount = USB_PMA[epIndex].COUNT_RX & USB_COUNT0_RX_COUNT0_RX;
 8001b88:	f104 6300 	add.w	r3, r4, #134217728	@ 0x8000000
 8001b8c:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	88da      	ldrh	r2, [r3, #6]
 8001b94:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001b98:	656a      	str	r2, [r5, #84]	@ 0x54
				if (rxCount != 0) {
 8001b9a:	b9ca      	cbnz	r2, 8001bd0 <_ZN10USBHandler19USBInterruptHandlerEv+0x254>
	uint16_t wRegVal = (USB_EPR[ep].EPR & USB_EPRX_DTOGMASK) ^ status;
 8001b9c:	8833      	ldrh	r3, [r6, #0]
 8001b9e:	b29b      	uxth	r3, r3
	USB_EPR[ep].EPR = wRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX;
 8001ba0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001ba4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ba8:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8001bac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bb4:	8033      	strh	r3, [r6, #0]
				cdcDataHandler(rxBuff, rxCount);
 8001bb6:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8001bb8:	f105 0214 	add.w	r2, r5, #20
 8001bbc:	9202      	str	r2, [sp, #8]
 8001bbe:	9303      	str	r3, [sp, #12]
       *  stored by `this`.
       */
      _Res
      operator()(_ArgTypes... __args) const
      {
	if (_M_empty())
 8001bc0:	68ab      	ldr	r3, [r5, #8]
 8001bc2:	b15b      	cbz	r3, 8001bdc <_ZN10USBHandler19USBInterruptHandlerEv+0x260>
	  __throw_bad_function_call();
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8001bc4:	68eb      	ldr	r3, [r5, #12]
 8001bc6:	aa03      	add	r2, sp, #12
 8001bc8:	a902      	add	r1, sp, #8
 8001bca:	4628      	mov	r0, r5
 8001bcc:	4798      	blx	r3
 8001bce:	e7a9      	b.n	8001b24 <_ZN10USBHandler19USBInterruptHandlerEv+0x1a8>
					ReadPMA(USB_PMA[epIndex].ADDR_RX, rxCount);
 8001bd0:	8899      	ldrh	r1, [r3, #4]
 8001bd2:	b289      	uxth	r1, r1
 8001bd4:	4628      	mov	r0, r5
 8001bd6:	f7ff fc47 	bl	8001468 <_ZN10USBHandler7ReadPMAEtt>
 8001bda:	e7df      	b.n	8001b9c <_ZN10USBHandler19USBInterruptHandlerEv+0x220>
	  __throw_bad_function_call();
 8001bdc:	f001 f922 	bl	8002e24 <_ZSt25__throw_bad_function_callv>
 8001be0:	40005c00 	.word	0x40005c00
 8001be4:	40006000 	.word	0x40006000
	return (USB->ISTR & interrupt) == interrupt;
 8001be8:	4b41      	ldr	r3, [pc, #260]	@ (8001cf0 <_ZN10USBHandler19USBInterruptHandlerEv+0x374>)
 8001bea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
	if (ReadInterrupts(USB_ISTR_WKUP)) {
 8001bee:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8001bf2:	d018      	beq.n	8001c26 <_ZN10USBHandler19USBInterruptHandlerEv+0x2aa>
		USB->CNTR &= ~USB_CNTR_FSUSP;
 8001bf4:	4a3e      	ldr	r2, [pc, #248]	@ (8001cf0 <_ZN10USBHandler19USBInterruptHandlerEv+0x374>)
 8001bf6:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8001bfa:	f023 0308 	bic.w	r3, r3, #8
 8001bfe:	041b      	lsls	r3, r3, #16
 8001c00:	0c1b      	lsrs	r3, r3, #16
 8001c02:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
		USB->CNTR &= ~USB_CNTR_LPMODE;
 8001c06:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8001c0a:	f023 0304 	bic.w	r3, r3, #4
 8001c0e:	041b      	lsls	r3, r3, #16
 8001c10:	0c1b      	lsrs	r3, r3, #16
 8001c12:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
		USB->ISTR &= ~USB_ISTR_WKUP;
 8001c16:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8001c1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001c1e:	041b      	lsls	r3, r3, #16
 8001c20:	0c1b      	lsrs	r3, r3, #16
 8001c22:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
	return (USB->ISTR & interrupt) == interrupt;
 8001c26:	4b32      	ldr	r3, [pc, #200]	@ (8001cf0 <_ZN10USBHandler19USBInterruptHandlerEv+0x374>)
 8001c28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
	if (ReadInterrupts(USB_ISTR_SUSP)) {
 8001c2c:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8001c30:	d018      	beq.n	8001c64 <_ZN10USBHandler19USBInterruptHandlerEv+0x2e8>
		USB->CNTR |= USB_CNTR_FSUSP;
 8001c32:	4a2f      	ldr	r2, [pc, #188]	@ (8001cf0 <_ZN10USBHandler19USBInterruptHandlerEv+0x374>)
 8001c34:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	f043 0308 	orr.w	r3, r3, #8
 8001c3e:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
		USB->ISTR &= ~USB_ISTR_SUSP;
 8001c42:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8001c46:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001c4a:	041b      	lsls	r3, r3, #16
 8001c4c:	0c1b      	lsrs	r3, r3, #16
 8001c4e:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
		USB->CNTR |= USB_CNTR_LPMODE;
 8001c52:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	f043 0304 	orr.w	r3, r3, #4
 8001c5c:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
		devState = DeviceState::Suspended;
 8001c60:	2300      	movs	r3, #0
 8001c62:	66ab      	str	r3, [r5, #104]	@ 0x68
	return (USB->ISTR & interrupt) == interrupt;
 8001c64:	4b22      	ldr	r3, [pc, #136]	@ (8001cf0 <_ZN10USBHandler19USBInterruptHandlerEv+0x374>)
 8001c66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
	if (ReadInterrupts(USB_ISTR_RESET))	{
 8001c6a:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8001c6e:	d120      	bne.n	8001cb2 <_ZN10USBHandler19USBInterruptHandlerEv+0x336>
	return (USB->ISTR & interrupt) == interrupt;
 8001c70:	4b1f      	ldr	r3, [pc, #124]	@ (8001cf0 <_ZN10USBHandler19USBInterruptHandlerEv+0x374>)
 8001c72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
	if (ReadInterrupts(USB_ISTR_ESOF)) {
 8001c76:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001c7a:	d008      	beq.n	8001c8e <_ZN10USBHandler19USBInterruptHandlerEv+0x312>
		USB->ISTR &= ~USB_ISTR_ESOF;
 8001c7c:	4a1c      	ldr	r2, [pc, #112]	@ (8001cf0 <_ZN10USBHandler19USBInterruptHandlerEv+0x374>)
 8001c7e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8001c82:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c86:	041b      	lsls	r3, r3, #16
 8001c88:	0c1b      	lsrs	r3, r3, #16
 8001c8a:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
	return (USB->ISTR & interrupt) == interrupt;
 8001c8e:	4b18      	ldr	r3, [pc, #96]	@ (8001cf0 <_ZN10USBHandler19USBInterruptHandlerEv+0x374>)
 8001c90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
	if (ReadInterrupts(USB_ISTR_ERR)) {
 8001c94:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8001c98:	d008      	beq.n	8001cac <_ZN10USBHandler19USBInterruptHandlerEv+0x330>
		USB->ISTR &= ~USB_ISTR_ERR;
 8001c9a:	4a15      	ldr	r2, [pc, #84]	@ (8001cf0 <_ZN10USBHandler19USBInterruptHandlerEv+0x374>)
 8001c9c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8001ca0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001ca4:	041b      	lsls	r3, r3, #16
 8001ca6:	0c1b      	lsrs	r3, r3, #16
 8001ca8:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
}
 8001cac:	b005      	add	sp, #20
 8001cae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		USB->ISTR &= ~USB_ISTR_RESET;
 8001cb2:	4c0f      	ldr	r4, [pc, #60]	@ (8001cf0 <_ZN10USBHandler19USBInterruptHandlerEv+0x374>)
 8001cb4:	f8b4 3044 	ldrh.w	r3, [r4, #68]	@ 0x44
 8001cb8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001cbc:	041b      	lsls	r3, r3, #16
 8001cbe:	0c1b      	lsrs	r3, r3, #16
 8001cc0:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
		ActivateEndpoint(0, Direction::out, Control, 0x18);
 8001cc4:	2318      	movs	r3, #24
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	2300      	movs	r3, #0
 8001cca:	2201      	movs	r2, #1
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4628      	mov	r0, r5
 8001cd0:	f7ff fc6a 	bl	80015a8 <_ZN10USBHandler16ActivateEndpointEhNS_9DirectionENS_12EndPointTypeEt>
		ActivateEndpoint(0, Direction::in,  Control, 0x58);
 8001cd4:	2358      	movs	r3, #88	@ 0x58
 8001cd6:	9300      	str	r3, [sp, #0]
 8001cd8:	2300      	movs	r3, #0
 8001cda:	461a      	mov	r2, r3
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4628      	mov	r0, r5
 8001ce0:	f7ff fc62 	bl	80015a8 <_ZN10USBHandler16ActivateEndpointEhNS_9DirectionENS_12EndPointTypeEt>
		USB->DADDR = USB_DADDR_EF;						// Enable endpoint and set address to 0
 8001ce4:	2380      	movs	r3, #128	@ 0x80
 8001ce6:	f8a4 304c 	strh.w	r3, [r4, #76]	@ 0x4c
 8001cea:	e7c1      	b.n	8001c70 <_ZN10USBHandler19USBInterruptHandlerEv+0x2f4>
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	40005c00 	.word	0x40005c00

08001cf4 <_ZN10USBHandler8SendDataEPKhth>:
}


void USBHandler::SendData(const uint8_t* data, uint16_t len, uint8_t endpoint)
{
 8001cf4:	b508      	push	{r3, lr}
 8001cf6:	469c      	mov	ip, r3
	if (devState == DeviceState::Configured) {
 8001cf8:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d000      	beq.n	8001d00 <_ZN10USBHandler8SendDataEPKhth+0xc>
			txBuff = (uint8_t*)data;
			txBuffSize = len;
			EPStartXfer(Direction::in, endpoint, len);
		}
	}
}
 8001cfe:	bd08      	pop	{r3, pc}
		if (!transmitting) {
 8001d00:	7c03      	ldrb	r3, [r0, #16]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1fb      	bne.n	8001cfe <_ZN10USBHandler8SendDataEPKhth+0xa>
			transmitting = true;
 8001d06:	2301      	movs	r3, #1
 8001d08:	7403      	strb	r3, [r0, #16]
			txBuff = (uint8_t*)data;
 8001d0a:	6581      	str	r1, [r0, #88]	@ 0x58
			txBuffSize = len;
 8001d0c:	65c2      	str	r2, [r0, #92]	@ 0x5c
			EPStartXfer(Direction::in, endpoint, len);
 8001d0e:	4613      	mov	r3, r2
 8001d10:	4662      	mov	r2, ip
 8001d12:	2100      	movs	r1, #0
 8001d14:	f7ff fbda 	bl	80014cc <_ZN10USBHandler11EPStartXferENS_9DirectionEhm>
}
 8001d18:	e7f1      	b.n	8001cfe <_ZN10USBHandler8SendDataEPKhth+0xa>

08001d1a <_ZN10USBHandler10SendStringEPKc>:


void USBHandler::SendString(const char* s)
{
 8001d1a:	b538      	push	{r3, r4, r5, lr}
 8001d1c:	4604      	mov	r4, r0
 8001d1e:	460d      	mov	r5, r1
	uint16_t counter = 0;
	while (transmitting && counter < 10000) {
 8001d20:	7c03      	ldrb	r3, [r0, #16]
 8001d22:	b12b      	cbz	r3, 8001d30 <_ZN10USBHandler10SendStringEPKc+0x16>
 8001d24:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1fb      	bne.n	8001d28 <_ZN10USBHandler10SendStringEPKc+0xe>
		++counter;
	}
	SendData((uint8_t*)s, strlen(s), CDC_In);
 8001d30:	4628      	mov	r0, r5
 8001d32:	f7fe fac5 	bl	80002c0 <strlen>
 8001d36:	2381      	movs	r3, #129	@ 0x81
 8001d38:	b282      	uxth	r2, r0
 8001d3a:	4629      	mov	r1, r5
 8001d3c:	4620      	mov	r0, r4
 8001d3e:	f7ff ffd9 	bl	8001cf4 <_ZN10USBHandler8SendDataEPKhth>
}
 8001d42:	bd38      	pop	{r3, r4, r5, pc}

08001d44 <_ZN10USBHandler10SendStringENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:


void USBHandler::SendString(std::string s)
{
 8001d44:	b508      	push	{r3, lr}
	SendString(s.c_str());
 8001d46:	6809      	ldr	r1, [r1, #0]
 8001d48:	f7ff ffe7 	bl	8001d1a <_ZN10USBHandler10SendStringEPKc>
}
 8001d4c:	bd08      	pop	{r3, pc}
	...

08001d50 <_ZN8Envelope9CordicExpEf>:
}

float Envelope::CordicExp(float x)
{
	// use CORDIC sinh function and generate e^x = sinh(x) + cosh(x)
	CORDIC->CSR = (6 << CORDIC_CSR_FUNC_Pos) | 		// 0: Cos, 1: Sin, 2: Phase, 3: Modulus, 4: Arctan, 5: cosh, 6: sinh, 7: Arctanh, 8: ln, 9: Square Root
 8001d50:	4b1a      	ldr	r3, [pc, #104]	@ (8001dbc <_ZN8Envelope9CordicExpEf+0x6c>)
 8001d52:	4a1b      	ldr	r2, [pc, #108]	@ (8001dc0 <_ZN8Envelope9CordicExpEf+0x70>)
 8001d54:	601a      	str	r2, [r3, #0]
			CORDIC_CSR_NRES |						// 2 Results as we need both sinh and cosh
			(6 << CORDIC_CSR_PRECISION_Pos);		// Set precision to 6 (gives 6 * 4 = 24 iterations in 6 clock cycles)

	// convert float to q1_31 format scaling x by 1/2 at the same time
	int q31;
	if (x < -1.118f) {
 8001d56:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 8001dc4 <_ZN8Envelope9CordicExpEf+0x74>
 8001d5a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d62:	d516      	bpl.n	8001d92 <_ZN8Envelope9CordicExpEf+0x42>
		q31 = (int)((x + 1.0f) * 1073741824.0f);	// as range of x is limited to -1.118 to +1.118 reduce exponent by e^-1 (note that only values from around -1.75 to 0 used in this mechanism)
 8001d64:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8001d68:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001d6c:	eebe 0ac1 	vcvt.s32.f32	s0, s0, #30
		q31 = (int)(x * 1073741824.0f);
	}

	//volatile float etest = std::exp(x);

	CORDIC->WDATA = q31;
 8001d70:	ed83 0a01 	vstr	s0, [r3, #4]

	// convert values back to floats scaling by * 2 at the same time
	float sinh = (float)((int)CORDIC->RDATA) / 1073741824.0f;	// command will block until RDATA is ready - no need to poll RRDY flag
 8001d74:	ed93 0a02 	vldr	s0, [r3, #8]
	float cosh = (float)((int)CORDIC->RDATA) / 1073741824.0f;
 8001d78:	edd3 7a02 	vldr	s15, [r3, #8]
	float sinh = (float)((int)CORDIC->RDATA) / 1073741824.0f;	// command will block until RDATA is ready - no need to poll RRDY flag
 8001d7c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
	float cosh = (float)((int)CORDIC->RDATA) / 1073741824.0f;
 8001d80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	float res = sinh + cosh;
	if (x < -1.118f) {
		return res * 0.3678794411714f;				// multiply by e^-1 to correct range offset
 8001d84:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001d88:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8001dc8 <_ZN8Envelope9CordicExpEf+0x78>
 8001d8c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001d90:	4770      	bx	lr
		q31 = (int)(x * 1073741824.0f);
 8001d92:	eebe 0ac1 	vcvt.s32.f32	s0, s0, #30
	CORDIC->WDATA = q31;
 8001d96:	4b09      	ldr	r3, [pc, #36]	@ (8001dbc <_ZN8Envelope9CordicExpEf+0x6c>)
 8001d98:	ed83 0a01 	vstr	s0, [r3, #4]
	float sinh = (float)((int)CORDIC->RDATA) / 1073741824.0f;	// command will block until RDATA is ready - no need to poll RRDY flag
 8001d9c:	ed93 0a02 	vldr	s0, [r3, #8]
	float cosh = (float)((int)CORDIC->RDATA) / 1073741824.0f;
 8001da0:	edd3 7a02 	vldr	s15, [r3, #8]
	float sinh = (float)((int)CORDIC->RDATA) / 1073741824.0f;	// command will block until RDATA is ready - no need to poll RRDY flag
 8001da4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
	float cosh = (float)((int)CORDIC->RDATA) / 1073741824.0f;
 8001da8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	float res = sinh + cosh;
 8001dac:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001db0:	eddf 7a06 	vldr	s15, [pc, #24]	@ 8001dcc <_ZN8Envelope9CordicExpEf+0x7c>
 8001db4:	ee20 0a27 	vmul.f32	s0, s0, s15
	} else {
		return res;
	}
}
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	40020c00 	.word	0x40020c00
 8001dc0:	00080166 	.word	0x00080166
 8001dc4:	bf8f1aa0 	.word	0xbf8f1aa0
 8001dc8:	2fbc5ab2 	.word	0x2fbc5ab2
 8001dcc:	30800000 	.word	0x30800000

08001dd0 <_ZN8Envelope12calcEnvelopeEv>:
}



void Envelope::calcEnvelope()
{
 8001dd0:	b538      	push	{r3, r4, r5, lr}
 8001dd2:	ed2d 8b02 	vpush	{d8}
 8001dd6:	4604      	mov	r4, r0
	// Gate on
	if ((gatePort->IDR & (1 << gatePin)) == 0) {
 8001dd8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8001dda:	691a      	ldr	r2, [r3, #16]
 8001ddc:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 8001de0:	2301      	movs	r3, #1
 8001de2:	408b      	lsls	r3, r1
 8001de4:	4213      	tst	r3, r2
 8001de6:	f040 80c3 	bne.w	8001f70 <_ZN8Envelope12calcEnvelopeEv+0x1a0>

		longADSR = (shortPort->IDR & (1 << shortPin)) != 0;
 8001dea:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8001dec:	691d      	ldr	r5, [r3, #16]
 8001dee:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8001df2:	2301      	movs	r3, #1
 8001df4:	fa03 f202 	lsl.w	r2, r3, r2
 8001df8:	4015      	ands	r5, r2
 8001dfa:	bf14      	ite	ne
 8001dfc:	461a      	movne	r2, r3
 8001dfe:	2200      	moveq	r2, #0
 8001e00:	7102      	strb	r2, [r0, #4]
		tremolo = (tremPort->IDR & (1 << tremPin)) == 0;
 8001e02:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8001e04:	6912      	ldr	r2, [r2, #16]
 8001e06:	f890 1048 	ldrb.w	r1, [r0, #72]	@ 0x48
 8001e0a:	408b      	lsls	r3, r1
 8001e0c:	4213      	tst	r3, r2
 8001e0e:	bf0c      	ite	eq
 8001e10:	2301      	moveq	r3, #1
 8001e12:	2300      	movne	r3, #0
 8001e14:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24

		sustain = adsr.sustain;
 8001e18:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8001e1a:	8893      	ldrh	r3, [r2, #4]
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	ee07 3a90 	vmov	s15, r3
 8001e22:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001e26:	ed80 8a04 	vstr	s16, [r0, #16]

		switch (gateState) {
 8001e2a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8001e2c:	2b04      	cmp	r3, #4
 8001e2e:	f200 80cb 	bhi.w	8001fc8 <_ZN8Envelope12calcEnvelopeEv+0x1f8>
 8001e32:	e8df f003 	tbb	[pc, r3]
 8001e36:	0903      	.short	0x0903
 8001e38:	9a58      	.short	0x9a58
 8001e3a:	06          	.byte	0x06
 8001e3b:	00          	.byte	0x00
		case gateStates::off:
			gateState = gateStates::attack;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	6283      	str	r3, [r0, #40]	@ 0x28
			break;
 8001e40:	e0c2      	b.n	8001fc8 <_ZN8Envelope12calcEnvelopeEv+0x1f8>

		case gateStates::release:
			gateState = gateStates::attack;
 8001e42:	2301      	movs	r3, #1
 8001e44:	6283      	str	r3, [r0, #40]	@ 0x28
			break;
 8001e46:	e0bf      	b.n	8001fc8 <_ZN8Envelope12calcEnvelopeEv+0x1f8>

		case gateStates::attack: {

			attack = std::round(((attack * 31.0f) + static_cast<float>(adsr.attack)) / 32.0f);
 8001e48:	8813      	ldrh	r3, [r2, #0]
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	edd0 7a02 	vldr	s15, [r0, #8]
 8001e50:	eeb3 7a0f 	vmov.f32	s14, #63	@ 0x41f80000  31.0
 8001e54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e58:	ee07 3a10 	vmov	s14, r3
 8001e5c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001e60:	ee77 7a87 	vadd.f32	s15, s15, s14
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8001e64:	ed9f 0a82 	vldr	s0, [pc, #520]	@ 8002070 <_ZN8Envelope12calcEnvelopeEv+0x2a0>
 8001e68:	ee27 0a80 	vmul.f32	s0, s15, s0
 8001e6c:	f001 f964 	bl	8003138 <roundf>
 8001e70:	ed84 0a02 	vstr	s0, [r4, #8]

			// fullRange = value of fully charged capacitor; comparitor value is 4096 where cap is charged enough to trigger decay phase
			const float fullRange = 5000.0f;

			// scales attack pot to allow more range at low end of pot, exponentially longer times at upper end
			float maxDurationMult = (longADSR ? 7.7f : 0.9f) / 1.73f;		// 1.73 allows duration to be set in seconds
 8001e74:	2d00      	cmp	r5, #0
 8001e76:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 8002074 <_ZN8Envelope12calcEnvelopeEv+0x2a4>
 8001e7a:	eddf 7a7f 	vldr	s15, [pc, #508]	@ 8002078 <_ZN8Envelope12calcEnvelopeEv+0x2a8>
 8001e7e:	bf18      	it	ne
 8001e80:	eeb0 7a67 	vmovne.f32	s14, s15

			// RC value - attackScale represents R component; maxDurationMult represents capacitor size (Reduce rc for a steeper curve)
			float rc = std::pow(static_cast<float>(attack) / 4096.f, 3.0f) * maxDurationMult;		// Using a^3 for fast approximation for measured charging rate (^2.9)
 8001e84:	eddf 7a7d 	vldr	s15, [pc, #500]	@ 800207c <_ZN8Envelope12calcEnvelopeEv+0x2ac>
 8001e88:	ee60 7a27 	vmul.f32	s15, s0, s15
 8001e8c:	ee27 0aa7 	vmul.f32	s0, s15, s15
 8001e90:	ee60 7a27 	vmul.f32	s15, s0, s15
 8001e94:	ee67 7a87 	vmul.f32	s15, s15, s14

			if (rc != 0.0f) {
 8001e98:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea0:	d104      	bne.n	8001eac <_ZN8Envelope12calcEnvelopeEv+0xdc>
			} else {
				currentLevel = fullRange;
			}

			if (currentLevel >= 4095.0f) {
				currentLevel = 4095.0f;
 8001ea2:	4b77      	ldr	r3, [pc, #476]	@ (8002080 <_ZN8Envelope12calcEnvelopeEv+0x2b0>)
 8001ea4:	61a3      	str	r3, [r4, #24]
				gateState = gateStates::decay;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001eaa:	e08d      	b.n	8001fc8 <_ZN8Envelope12calcEnvelopeEv+0x1f8>
				currentLevel = fullRange - (fullRange - currentLevel) * CordicExp(-timeStep / rc);
 8001eac:	ed94 0a06 	vldr	s0, [r4, #24]
 8001eb0:	eddf 8a74 	vldr	s17, [pc, #464]	@ 8002084 <_ZN8Envelope12calcEnvelopeEv+0x2b4>
 8001eb4:	ee30 8a68 	vsub.f32	s16, s0, s17
 8001eb8:	ed94 0a00 	vldr	s0, [r4]
 8001ebc:	eeb1 0a40 	vneg.f32	s0, s0
 8001ec0:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8001ec4:	4620      	mov	r0, r4
 8001ec6:	f7ff ff43 	bl	8001d50 <_ZN8Envelope9CordicExpEf>
 8001eca:	ee28 0a00 	vmul.f32	s0, s16, s0
 8001ece:	ee70 8a28 	vadd.f32	s17, s0, s17
 8001ed2:	edc4 8a06 	vstr	s17, [r4, #24]
			if (currentLevel >= 4095.0f) {
 8001ed6:	eddf 7a6c 	vldr	s15, [pc, #432]	@ 8002088 <_ZN8Envelope12calcEnvelopeEv+0x2b8>
 8001eda:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee2:	db71      	blt.n	8001fc8 <_ZN8Envelope12calcEnvelopeEv+0x1f8>
 8001ee4:	e7dd      	b.n	8001ea2 <_ZN8Envelope12calcEnvelopeEv+0xd2>
			break;

		}

		case gateStates::decay: {
			decay = adsr.decay;
 8001ee6:	8853      	ldrh	r3, [r2, #2]
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	8183      	strh	r3, [r0, #12]

			// scales decay pot to allow more range at low end of pot, exponentially longer times at upper end
			float maxDurationMult = (longADSR ? 44.0f : 5.28f) / 4.4;		// to scale maximum delay time
 8001eec:	2d00      	cmp	r5, #0
 8001eee:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 800208c <_ZN8Envelope12calcEnvelopeEv+0x2bc>
 8001ef2:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8001ef6:	bf18      	it	ne
 8001ef8:	eeb0 7a67 	vmovne.f32	s14, s15

			// RC value - decayScale represents R component; maxDurationMult represents capacitor size
			float rc = std::pow((float)decay / 4096.0f, 2.0f) * maxDurationMult;		// Use x^2 as approximation for measured x^2.4
 8001efc:	ee07 3a90 	vmov	s15, r3
 8001f00:	eefb 7aca 	vcvt.f32.u32	s15, s15, #12
 8001f04:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001f08:	ee67 7a87 	vmul.f32	s15, s15, s14

			if (rc != 0.0f && currentLevel > sustain) {
 8001f0c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f14:	d008      	beq.n	8001f28 <_ZN8Envelope12calcEnvelopeEv+0x158>
 8001f16:	ed90 7a06 	vldr	s14, [r0, #24]
 8001f1a:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8001f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f22:	d413      	bmi.n	8001f4c <_ZN8Envelope12calcEnvelopeEv+0x17c>
 8001f24:	eddf 7a5a 	vldr	s15, [pc, #360]	@ 8002090 <_ZN8Envelope12calcEnvelopeEv+0x2c0>
				 * float exponent = -newXPos / rc;
				 * float newYPos = std::exp(exponent);		// Capacitor discharging equation
				 * currentLevel = (newYPos * yHeight) + sustain;
				 */

				currentLevel = sustain + (currentLevel - sustain) * CordicExp(-timeStep / rc);
 8001f28:	edc4 7a06 	vstr	s15, [r4, #24]

			} else {
				currentLevel = 0.0f;
			}

			if (currentLevel <= sustain + 1.5f) {				// add a little extra to avoid getting stuck in infinitely small decrease
 8001f2c:	edd4 6a04 	vldr	s13, [r4, #16]
 8001f30:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8001f34:	ee36 7a87 	vadd.f32	s14, s13, s14
 8001f38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f40:	db42      	blt.n	8001fc8 <_ZN8Envelope12calcEnvelopeEv+0x1f8>
				currentLevel = sustain;
 8001f42:	edc4 6a06 	vstr	s13, [r4, #24]
				gateState = gateStates::sustain;
 8001f46:	2303      	movs	r3, #3
 8001f48:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001f4a:	e03d      	b.n	8001fc8 <_ZN8Envelope12calcEnvelopeEv+0x1f8>
				currentLevel = sustain + (currentLevel - sustain) * CordicExp(-timeStep / rc);
 8001f4c:	ee77 8a48 	vsub.f32	s17, s14, s16
 8001f50:	ed90 0a00 	vldr	s0, [r0]
 8001f54:	eeb1 0a40 	vneg.f32	s0, s0
 8001f58:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8001f5c:	f7ff fef8 	bl	8001d50 <_ZN8Envelope9CordicExpEf>
 8001f60:	ee28 7a80 	vmul.f32	s14, s17, s0
 8001f64:	ee77 7a08 	vadd.f32	s15, s14, s16
 8001f68:	e7de      	b.n	8001f28 <_ZN8Envelope12calcEnvelopeEv+0x158>


			break;
		}
		case gateStates::sustain:
			currentLevel = sustain;
 8001f6a:	ed80 8a06 	vstr	s16, [r0, #24]
			break;
 8001f6e:	e02b      	b.n	8001fc8 <_ZN8Envelope12calcEnvelopeEv+0x1f8>
		}

	} else {
		if (currentLevel > 0.0f) {
 8001f70:	ed90 8a06 	vldr	s16, [r0, #24]
 8001f74:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8001f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f7c:	dd61      	ble.n	8002042 <_ZN8Envelope12calcEnvelopeEv+0x272>
			gateState = gateStates::release;
 8001f7e:	2304      	movs	r3, #4
 8001f80:	6283      	str	r3, [r0, #40]	@ 0x28
			release = adsr.release;
 8001f82:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001f84:	88db      	ldrh	r3, [r3, #6]
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	8283      	strh	r3, [r0, #20]

			float maxDurationMult = (longADSR ? 14.585f : 1.15f);		// to scale maximum delay time
 8001f8a:	7902      	ldrb	r2, [r0, #4]
 8001f8c:	2a00      	cmp	r2, #0
 8001f8e:	eddf 7a41 	vldr	s15, [pc, #260]	@ 8002094 <_ZN8Envelope12calcEnvelopeEv+0x2c4>
 8001f92:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8002098 <_ZN8Envelope12calcEnvelopeEv+0x2c8>
 8001f96:	bf18      	it	ne
 8001f98:	eef0 7a47 	vmovne.f32	s15, s14

			// RC value - decayScale represents R component; maxDurationMult represents capacitor size
			float rc = std::pow(static_cast<float>(release) / 4096.0f, 2.0f) * maxDurationMult;
 8001f9c:	ee00 3a10 	vmov	s0, r3
 8001fa0:	eebb 0aca 	vcvt.f32.u32	s0, s0, #12
 8001fa4:	ee20 0a00 	vmul.f32	s0, s0, s0
 8001fa8:	ee20 0a27 	vmul.f32	s0, s0, s15
			if (rc != 0.0f && currentLevel > 1.0f) {
 8001fac:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb4:	d006      	beq.n	8001fc4 <_ZN8Envelope12calcEnvelopeEv+0x1f4>
 8001fb6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8001fba:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8001fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc2:	dc31      	bgt.n	8002028 <_ZN8Envelope12calcEnvelopeEv+0x258>
				 * currentLevel = newYPos * 4096.0f;
				 */

				currentLevel = currentLevel * CordicExp(-timeStep / rc);
			} else {
				currentLevel = 0.0f;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	61a3      	str	r3, [r4, #24]
		} else {
			gateState = gateStates::off;
		}
	}

	if (tremolo) {
 8001fc8:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d045      	beq.n	800205c <_ZN8Envelope12calcEnvelopeEv+0x28c>
		CORDIC->CSR = (0 << CORDIC_CSR_FUNC_Pos) | 		// 0: Cosine, 1: Sine, 2: Phase, 3: Modulus, 4: Arctangent, 5: Hyperbolic cosine, 6: Hyperbolic sine, 7: Arctanh, 8: Natural logarithm, 9: Square Root
 8001fd0:	4b32      	ldr	r3, [pc, #200]	@ (800209c <_ZN8Envelope12calcEnvelopeEv+0x2cc>)
 8001fd2:	2250      	movs	r2, #80	@ 0x50
 8001fd4:	601a      	str	r2, [r3, #0]
				(5 << CORDIC_CSR_PRECISION_Pos);		// Set precision to 5 (gives 5 * 4 = 20 iterations in 5 clock cycles)

		CORDIC->WDATA = tremCosinePos;		// This should be a value between -1 and 1 in q1.31 format, relating to -pi to +pi
 8001fd6:	69e2      	ldr	r2, [r4, #28]
 8001fd8:	605a      	str	r2, [r3, #4]

		if (Envelopes::tremSpeed != 0) {
 8001fda:	4b31      	ldr	r3, [pc, #196]	@ (80020a0 <_ZN8Envelope12calcEnvelopeEv+0x2d0>)
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	b39a      	cbz	r2, 8002048 <_ZN8Envelope12calcEnvelopeEv+0x278>
			tremCosinePos += 4294967295 / Envelopes::tremSpeed;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	f7fe fe06 	bl	8000bf8 <__aeabi_ldivmod>
 8001fec:	69e3      	ldr	r3, [r4, #28]
 8001fee:	4418      	add	r0, r3
 8001ff0:	61e0      	str	r0, [r4, #28]
		} else {
			tremCosinePos += (adc.Tremolo + 50) * 400;
		}

		tremCosineVal = static_cast<float>(static_cast<int32_t>(CORDIC->RDATA)) / 4294967295.0f + 0.5f;
 8001ff2:	4b2a      	ldr	r3, [pc, #168]	@ (800209c <_ZN8Envelope12calcEnvelopeEv+0x2cc>)
 8001ff4:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ff8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ffc:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80020a4 <_ZN8Envelope12calcEnvelopeEv+0x2d4>
 8002000:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002004:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002008:	ee77 7a87 	vadd.f32	s15, s15, s14
 800200c:	edc4 7a08 	vstr	s15, [r4, #32]
		*outputDAC = static_cast<uint32_t>(currentLevel * tremCosineVal);
 8002010:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002012:	ed94 7a06 	vldr	s14, [r4, #24]
 8002016:	ee67 7a87 	vmul.f32	s15, s15, s14
 800201a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800201e:	edc3 7a00 	vstr	s15, [r3]
		*outputDAC = static_cast<uint32_t>(currentLevel);
	}



}
 8002022:	ecbd 8b02 	vpop	{d8}
 8002026:	bd38      	pop	{r3, r4, r5, pc}
				currentLevel = currentLevel * CordicExp(-timeStep / rc);
 8002028:	edd0 7a00 	vldr	s15, [r0]
 800202c:	eef1 7a67 	vneg.f32	s15, s15
 8002030:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8002034:	f7ff fe8c 	bl	8001d50 <_ZN8Envelope9CordicExpEf>
 8002038:	ee28 8a00 	vmul.f32	s16, s16, s0
 800203c:	ed84 8a06 	vstr	s16, [r4, #24]
 8002040:	e7c2      	b.n	8001fc8 <_ZN8Envelope12calcEnvelopeEv+0x1f8>
			gateState = gateStates::off;
 8002042:	2300      	movs	r3, #0
 8002044:	6283      	str	r3, [r0, #40]	@ 0x28
 8002046:	e7bf      	b.n	8001fc8 <_ZN8Envelope12calcEnvelopeEv+0x1f8>
			tremCosinePos += (adc.Tremolo + 50) * 400;
 8002048:	4b17      	ldr	r3, [pc, #92]	@ (80020a8 <_ZN8Envelope12calcEnvelopeEv+0x2d8>)
 800204a:	8a1b      	ldrh	r3, [r3, #16]
 800204c:	b29b      	uxth	r3, r3
 800204e:	3332      	adds	r3, #50	@ 0x32
 8002050:	69e0      	ldr	r0, [r4, #28]
 8002052:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8002056:	fb02 0003 	mla	r0, r2, r3, r0
 800205a:	e7c9      	b.n	8001ff0 <_ZN8Envelope12calcEnvelopeEv+0x220>
		tremCosinePos = 0;								// Reset cosine position to 0 so that it starts at full level when turned on
 800205c:	2300      	movs	r3, #0
 800205e:	61e3      	str	r3, [r4, #28]
		*outputDAC = static_cast<uint32_t>(currentLevel);
 8002060:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002062:	edd4 7a06 	vldr	s15, [r4, #24]
 8002066:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800206a:	edc3 7a00 	vstr	s15, [r3]
}
 800206e:	e7d8      	b.n	8002022 <_ZN8Envelope12calcEnvelopeEv+0x252>
 8002070:	3d000000 	.word	0x3d000000
 8002074:	3f052ddf 	.word	0x3f052ddf
 8002078:	408e6d81 	.word	0x408e6d81
 800207c:	39800000 	.word	0x39800000
 8002080:	457ff000 	.word	0x457ff000
 8002084:	459c4000 	.word	0x459c4000
 8002088:	c4624000 	.word	0xc4624000
 800208c:	3f99999a 	.word	0x3f99999a
 8002090:	00000000 	.word	0x00000000
 8002094:	3f933333 	.word	0x3f933333
 8002098:	41695c29 	.word	0x41695c29
 800209c:	40020c00 	.word	0x40020c00
 80020a0:	200001ec 	.word	0x200001ec
 80020a4:	2f800000 	.word	0x2f800000
 80020a8:	200004e8 	.word	0x200004e8

080020ac <_ZN9Envelopes13calcEnvelopesEv>:
{
 80020ac:	b538      	push	{r3, r4, r5, lr}
	DEBUG_ON
 80020ae:	4a44      	ldr	r2, [pc, #272]	@ (80021c0 <_ZN9Envelopes13calcEnvelopesEv+0x114>)
 80020b0:	6953      	ldr	r3, [r2, #20]
 80020b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020b6:	6153      	str	r3, [r2, #20]
	if ((GPIOA->IDR & GPIO_IDR_IDR_9) == 0) {		// Clock signal high
 80020b8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	f413 7f00 	tst.w	r3, #512	@ 0x200
 80020c2:	d143      	bne.n	800214c <_ZN9Envelopes13calcEnvelopesEv+0xa0>
		if (!clockHigh) {
 80020c4:	7c03      	ldrb	r3, [r0, #16]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d142      	bne.n	8002150 <_ZN9Envelopes13calcEnvelopesEv+0xa4>
			clockInterval = clockCounter - lastClock;
 80020ca:	6883      	ldr	r3, [r0, #8]
 80020cc:	68c2      	ldr	r2, [r0, #12]
 80020ce:	1a9a      	subs	r2, r3, r2
 80020d0:	6042      	str	r2, [r0, #4]
			lastClock = clockCounter;
 80020d2:	60c3      	str	r3, [r0, #12]
			clockHigh = true;
 80020d4:	2201      	movs	r2, #1
 80020d6:	7402      	strb	r2, [r0, #16]
	clockValid = (clockCounter - lastClock < (SAMPLERATE * 2));					// Valid clock interval is within a second
 80020d8:	7002      	strb	r2, [r0, #0]
	++clockCounter;
 80020da:	4413      	add	r3, r2
 80020dc:	6083      	str	r3, [r0, #8]
		if (adc.Tremolo > tremHysteresis + 20 || adc.Tremolo < tremHysteresis - 20) {
 80020de:	4b39      	ldr	r3, [pc, #228]	@ (80021c4 <_ZN9Envelopes13calcEnvelopesEv+0x118>)
 80020e0:	8a1b      	ldrh	r3, [r3, #16]
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	6942      	ldr	r2, [r0, #20]
 80020e6:	f102 0114 	add.w	r1, r2, #20
 80020ea:	428b      	cmp	r3, r1
 80020ec:	d805      	bhi.n	80020fa <_ZN9Envelopes13calcEnvelopesEv+0x4e>
 80020ee:	4b35      	ldr	r3, [pc, #212]	@ (80021c4 <_ZN9Envelopes13calcEnvelopesEv+0x118>)
 80020f0:	8a1b      	ldrh	r3, [r3, #16]
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	3a14      	subs	r2, #20
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d20a      	bcs.n	8002110 <_ZN9Envelopes13calcEnvelopesEv+0x64>
			tremHysteresis = adc.Tremolo;
 80020fa:	4b32      	ldr	r3, [pc, #200]	@ (80021c4 <_ZN9Envelopes13calcEnvelopesEv+0x118>)
 80020fc:	8a1b      	ldrh	r3, [r3, #16]
 80020fe:	b29b      	uxth	r3, r3
 8002100:	6143      	str	r3, [r0, #20]
			if (tremHysteresis < 682)				tremMult = 8.0f;
 8002102:	f240 22a9 	movw	r2, #681	@ 0x2a9
 8002106:	4293      	cmp	r3, r2
 8002108:	d839      	bhi.n	800217e <_ZN9Envelopes13calcEnvelopesEv+0xd2>
 800210a:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 800210e:	6183      	str	r3, [r0, #24]
		tremSpeed = static_cast<uint32_t>(tremMult * static_cast<float>(clockInterval));
 8002110:	edd0 7a01 	vldr	s15, [r0, #4]
 8002114:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002118:	ed90 7a06 	vldr	s14, [r0, #24]
 800211c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002120:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002124:	ee17 3a90 	vmov	r3, s15
 8002128:	4a27      	ldr	r2, [pc, #156]	@ (80021c8 <_ZN9Envelopes13calcEnvelopesEv+0x11c>)
 800212a:	6013      	str	r3, [r2, #0]
	for (Envelope& env : envelope) {
 800212c:	f100 041c 	add.w	r4, r0, #28
 8002130:	f500 75a6 	add.w	r5, r0, #332	@ 0x14c
		env.calcEnvelope();
 8002134:	4620      	mov	r0, r4
 8002136:	f7ff fe4b 	bl	8001dd0 <_ZN8Envelope12calcEnvelopeEv>
	for (Envelope& env : envelope) {
 800213a:	344c      	adds	r4, #76	@ 0x4c
 800213c:	42ac      	cmp	r4, r5
 800213e:	d1f9      	bne.n	8002134 <_ZN9Envelopes13calcEnvelopesEv+0x88>
	DEBUG_OFF
 8002140:	4a1f      	ldr	r2, [pc, #124]	@ (80021c0 <_ZN9Envelopes13calcEnvelopesEv+0x114>)
 8002142:	6953      	ldr	r3, [r2, #20]
 8002144:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002148:	6153      	str	r3, [r2, #20]
}
 800214a:	bd38      	pop	{r3, r4, r5, pc}
		clockHigh = false;
 800214c:	2300      	movs	r3, #0
 800214e:	7403      	strb	r3, [r0, #16]
	clockValid = (clockCounter - lastClock < (SAMPLERATE * 2));					// Valid clock interval is within a second
 8002150:	6882      	ldr	r2, [r0, #8]
 8002152:	68c3      	ldr	r3, [r0, #12]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	ee07 3a90 	vmov	s15, r3
 800215a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800215e:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80021cc <_ZN9Envelopes13calcEnvelopesEv+0x120>
 8002162:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800216a:	bf4c      	ite	mi
 800216c:	2301      	movmi	r3, #1
 800216e:	2300      	movpl	r3, #0
 8002170:	7003      	strb	r3, [r0, #0]
	++clockCounter;
 8002172:	f102 0201 	add.w	r2, r2, #1
 8002176:	6082      	str	r2, [r0, #8]
	if (clockValid) {
 8002178:	d4b1      	bmi.n	80020de <_ZN9Envelopes13calcEnvelopesEv+0x32>
 800217a:	2300      	movs	r3, #0
 800217c:	e7d4      	b.n	8002128 <_ZN9Envelopes13calcEnvelopesEv+0x7c>
			else if (tremHysteresis < 1365) 		tremMult = 4.0f;
 800217e:	f240 5254 	movw	r2, #1364	@ 0x554
 8002182:	4293      	cmp	r3, r2
 8002184:	d803      	bhi.n	800218e <_ZN9Envelopes13calcEnvelopesEv+0xe2>
 8002186:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 800218a:	6183      	str	r3, [r0, #24]
 800218c:	e7c0      	b.n	8002110 <_ZN9Envelopes13calcEnvelopesEv+0x64>
			else if (tremHysteresis < 2048) 		tremMult = 2.0f;
 800218e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002192:	d203      	bcs.n	800219c <_ZN9Envelopes13calcEnvelopesEv+0xf0>
 8002194:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002198:	6183      	str	r3, [r0, #24]
 800219a:	e7b9      	b.n	8002110 <_ZN9Envelopes13calcEnvelopesEv+0x64>
			else if (tremHysteresis < 2731) 		tremMult = 1.0f;
 800219c:	f640 22aa 	movw	r2, #2730	@ 0xaaa
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d803      	bhi.n	80021ac <_ZN9Envelopes13calcEnvelopesEv+0x100>
 80021a4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80021a8:	6183      	str	r3, [r0, #24]
 80021aa:	e7b1      	b.n	8002110 <_ZN9Envelopes13calcEnvelopesEv+0x64>
			else if (tremHysteresis < 3413) 		tremMult = 0.5f;
 80021ac:	f640 5254 	movw	r2, #3412	@ 0xd54
 80021b0:	4293      	cmp	r3, r2
 80021b2:	bf94      	ite	ls
 80021b4:	f04f 537c 	movls.w	r3, #1056964608	@ 0x3f000000
			else 									tremMult = 0.25f;
 80021b8:	f04f 537a 	movhi.w	r3, #1048576000	@ 0x3e800000
 80021bc:	6183      	str	r3, [r0, #24]
 80021be:	e7a7      	b.n	8002110 <_ZN9Envelopes13calcEnvelopesEv+0x64>
 80021c0:	48000400 	.word	0x48000400
 80021c4:	200004e8 	.word	0x200004e8
 80021c8:	200001ec 	.word	0x200001ec
 80021cc:	47bb8000 	.word	0x47bb8000

080021d0 <_Z18SystemClock_Configv>:
#define PLL_P 2


void SystemClock_Config(void) {
	// See page 236 for clock configuration
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;		// SYSCFG + COMP + VREFBUF + OPAMP clock enable
 80021d0:	4b25      	ldr	r3, [pc, #148]	@ (8002268 <_Z18SystemClock_Configv+0x98>)
 80021d2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80021d4:	f042 0201 	orr.w	r2, r2, #1
 80021d8:	661a      	str	r2, [r3, #96]	@ 0x60
	RCC->APB1ENR1 |= RCC_APB1ENR1_PWREN;		// Enable Power Control clock
 80021da:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80021dc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80021e0:	659a      	str	r2, [r3, #88]	@ 0x58
	PWR->CR5 &= ~PWR_CR5_R1MODE;				// Select the Range 1 boost mode
 80021e2:	4922      	ldr	r1, [pc, #136]	@ (800226c <_Z18SystemClock_Configv+0x9c>)
 80021e4:	f8d1 2080 	ldr.w	r2, [r1, #128]	@ 0x80
 80021e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021ec:	f8c1 2080 	str.w	r2, [r1, #128]	@ 0x80

	RCC->CR |= RCC_CR_HSEON;					// HSE ON
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80021f6:	601a      	str	r2, [r3, #0]
	while ((RCC->CR & RCC_CR_HSERDY) == 0);		// Wait till HSE is ready
 80021f8:	461a      	mov	r2, r3
 80021fa:	6813      	ldr	r3, [r2, #0]
 80021fc:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002200:	d0fb      	beq.n	80021fa <_Z18SystemClock_Configv+0x2a>

	// Configure PLL
	RCC->PLLCFGR = (PLL_M << RCC_PLLCFGR_PLLM_Pos) | (PLL_N << RCC_PLLCFGR_PLLN_Pos) | (PLL_P << RCC_PLLCFGR_PLLPDIV_Pos) | (PLL_R << RCC_PLLCFGR_PLLR_Pos) | (RCC_PLLCFGR_PLLSRC_HSE);
 8002202:	4b19      	ldr	r3, [pc, #100]	@ (8002268 <_Z18SystemClock_Configv+0x98>)
 8002204:	4a1a      	ldr	r2, [pc, #104]	@ (8002270 <_Z18SystemClock_Configv+0xa0>)
 8002206:	60da      	str	r2, [r3, #12]
	RCC->CR |= RCC_CR_PLLON;					// Enable the main PLL
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800220e:	601a      	str	r2, [r3, #0]
	RCC->PLLCFGR = RCC_PLLCFGR_PLLREN;			// Enable PLL R (drives AHB clock)
 8002210:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002214:	60da      	str	r2, [r3, #12]
	while ((RCC->CR & RCC_CR_PLLRDY) == 0);		// Wait till the main PLL is ready
 8002216:	461a      	mov	r2, r3
 8002218:	6813      	ldr	r3, [r2, #0]
 800221a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800221e:	d0fb      	beq.n	8002218 <_Z18SystemClock_Configv+0x48>

	// Configure Flash prefetch and wait state. NB STM32G431 is a category 2 device (128KB flash in 1 bank)
	FLASH->ACR |= FLASH_ACR_LATENCY_4WS | FLASH_ACR_PRFTEN;
 8002220:	4b14      	ldr	r3, [pc, #80]	@ (8002274 <_Z18SystemClock_Configv+0xa4>)
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	f442 7282 	orr.w	r2, r2, #260	@ 0x104
 8002228:	601a      	str	r2, [r3, #0]
	FLASH->ACR &= ~FLASH_ACR_LATENCY_1WS;
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	f022 0201 	bic.w	r2, r2, #1
 8002230:	601a      	str	r2, [r3, #0]

	// The system clock must be divided by 2 using the AHB prescaler before switching to a higher system frequency.
	RCC->CFGR |= RCC_CFGR_HPRE_DIV2;			// HCLK = SYSCLK / 2
 8002232:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800223c:	609a      	str	r2, [r3, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL;				// Select the main PLL as system clock source
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	f042 0203 	orr.w	r2, r2, #3
 8002244:	609a      	str	r2, [r3, #8]

	// Wait till the main PLL is used as system clock source
	while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8002246:	461a      	mov	r2, r3
 8002248:	6893      	ldr	r3, [r2, #8]
 800224a:	f003 030c 	and.w	r3, r3, #12
 800224e:	2b0c      	cmp	r3, #12
 8002250:	d1fa      	bne.n	8002248 <_Z18SystemClock_Configv+0x78>

	// Reset the AHB clock (previously divided by 2) and set APB clocks
	RCC->CFGR &= ~RCC_CFGR_HPRE_Msk;
 8002252:	4b05      	ldr	r3, [pc, #20]	@ (8002268 <_Z18SystemClock_Configv+0x98>)
 8002254:	689a      	ldr	r2, [r3, #8]
 8002256:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800225a:	609a      	str	r2, [r3, #8]
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;			// PCLK1 = HCLK / 1 (APB1)
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	609a      	str	r2, [r3, #8]
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;			// PCLK2 = HCLK / 1 (APB2)
 8002260:	689a      	ldr	r2, [r3, #8]
 8002262:	609a      	str	r2, [r3, #8]
}
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	40021000 	.word	0x40021000
 800226c:	40007000 	.word	0x40007000
 8002270:	10005513 	.word	0x10005513
 8002274:	40022000 	.word	0x40022000

08002278 <_Z11InitSysTickv>:


void InitSysTick()
{
	SysTick_Config(SystemCoreClock / SYSTICK);		// gives 1ms
 8002278:	4b0c      	ldr	r3, [pc, #48]	@ (80022ac <_Z11InitSysTickv+0x34>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a0c      	ldr	r2, [pc, #48]	@ (80022b0 <_Z11InitSysTickv+0x38>)
 800227e:	fba2 2303 	umull	r2, r3, r2, r3
 8002282:	099b      	lsrs	r3, r3, #6
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002284:	3b01      	subs	r3, #1
 8002286:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800228a:	d20a      	bcs.n	80022a2 <_Z11InitSysTickv+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800228c:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8002290:	6153      	str	r3, [r2, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002292:	4b08      	ldr	r3, [pc, #32]	@ (80022b4 <_Z11InitSysTickv+0x3c>)
 8002294:	21f0      	movs	r1, #240	@ 0xf0
 8002296:	f883 1023 	strb.w	r1, [r3, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800229a:	2300      	movs	r3, #0
 800229c:	6193      	str	r3, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800229e:	2307      	movs	r3, #7
 80022a0:	6113      	str	r3, [r2, #16]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a2:	4b04      	ldr	r3, [pc, #16]	@ (80022b4 <_Z11InitSysTickv+0x3c>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	NVIC_SetPriority(SysTick_IRQn, 0);
}
 80022aa:	4770      	bx	lr
 80022ac:	20000004 	.word	0x20000004
 80022b0:	10624dd3 	.word	0x10624dd3
 80022b4:	e000ed00 	.word	0xe000ed00

080022b8 <_Z7InitDACv>:

void InitDAC()
{
	// Configure 4 DAC outputs PA4 and PA5 are regular DAC1 buffered outputs; PA2 and PB1 are DAC3 via OpAmp1 and OpAmp3 (Manual p.789)

	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;			// Enable GPIO Clock
 80022b8:	4b26      	ldr	r3, [pc, #152]	@ (8002354 <_Z7InitDACv+0x9c>)
 80022ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80022bc:	f042 0201 	orr.w	r2, r2, #1
 80022c0:	64da      	str	r2, [r3, #76]	@ 0x4c
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;			// Enable GPIO Clock
 80022c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80022c4:	f042 0202 	orr.w	r2, r2, #2
 80022c8:	64da      	str	r2, [r3, #76]	@ 0x4c
	RCC->AHB2ENR |= RCC_AHB2ENR_DAC1EN;				// Enable DAC Clock
 80022ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80022cc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80022d0:	64da      	str	r2, [r3, #76]	@ 0x4c
	RCC->AHB2ENR |= RCC_AHB2ENR_DAC3EN;				// Enable DAC Clock
 80022d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80022d4:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80022d8:	64da      	str	r2, [r3, #76]	@ 0x4c

	DAC1->MCR &= ~DAC_MCR_MODE1_Msk;				// Set to normal mode: DAC channel1 is connected to external pin with Buffer enabled
 80022da:	4b1f      	ldr	r3, [pc, #124]	@ (8002358 <_Z7InitDACv+0xa0>)
 80022dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80022de:	f022 0207 	bic.w	r2, r2, #7
 80022e2:	63da      	str	r2, [r3, #60]	@ 0x3c
	DAC1->CR |= DAC_CR_EN1;							// Enable DAC using PA4 (DAC_OUT1)
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	f042 0201 	orr.w	r2, r2, #1
 80022ea:	601a      	str	r2, [r3, #0]

	DAC1->MCR &= ~DAC_MCR_MODE2_Msk;				// Set to normal mode: DAC channel2 is connected to external pin with Buffer enabled
 80022ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80022ee:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 80022f2:	63da      	str	r2, [r3, #60]	@ 0x3c
	DAC1->CR |= DAC_CR_EN2;							// Enable DAC using PA5 (DAC_OUT2)
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80022fa:	601a      	str	r2, [r3, #0]

	// output triggered with DAC->DHR12R1 = x;

	// Opamp for DAC3 Channel 1: Follower configuration mode - output on PA2
	DAC3->MCR |= DAC_MCR_MODE1_0 | DAC_MCR_MODE1_1;	// 011: DAC channel1 is connected to on chip peripherals with Buffer disabled
 80022fc:	4a17      	ldr	r2, [pc, #92]	@ (800235c <_Z7InitDACv+0xa4>)
 80022fe:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8002300:	f043 0303 	orr.w	r3, r3, #3
 8002304:	63d3      	str	r3, [r2, #60]	@ 0x3c
	DAC3->CR |= DAC_CR_EN1;							// Enable DAC
 8002306:	6813      	ldr	r3, [r2, #0]
 8002308:	f043 0301 	orr.w	r3, r3, #1
 800230c:	6013      	str	r3, [r2, #0]

	OPAMP1->CSR |= OPAMP_CSR_VMSEL;					// 11: Opamp_out connected to OPAMPx_VINM input
 800230e:	4b14      	ldr	r3, [pc, #80]	@ (8002360 <_Z7InitDACv+0xa8>)
 8002310:	6819      	ldr	r1, [r3, #0]
 8002312:	f041 0160 	orr.w	r1, r1, #96	@ 0x60
 8002316:	6019      	str	r1, [r3, #0]
	OPAMP1->CSR |= OPAMP_CSR_VPSEL;					// 11: DAC3_CH1  connected to OPAMP1 VINP input
 8002318:	6819      	ldr	r1, [r3, #0]
 800231a:	f041 010c 	orr.w	r1, r1, #12
 800231e:	6019      	str	r1, [r3, #0]
	OPAMP1->CSR |= OPAMP_CSR_OPAMPxEN;				// Enable OpAmp: voltage on pin OPAMPx_VINP is buffered to pin OPAMPx_VOUT (PA2)
 8002320:	6819      	ldr	r1, [r3, #0]
 8002322:	f041 0101 	orr.w	r1, r1, #1
 8002326:	6019      	str	r1, [r3, #0]

	// Opamp for DAC3 Channel 2: Follower configuration mode - output on PB1
	// NB According to manual p.790 this should only work on category 3/4 devices and STM32G431 is category 2, but tested working
	DAC3->MCR |= DAC_MCR_MODE2_0 | DAC_MCR_MODE2_1;	// 011: DAC channel2 is connected to on chip peripherals with Buffer disabled
 8002328:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800232a:	f441 3140 	orr.w	r1, r1, #196608	@ 0x30000
 800232e:	63d1      	str	r1, [r2, #60]	@ 0x3c
	DAC3->CR |= DAC_CR_EN2;							// Enable DAC
 8002330:	6811      	ldr	r1, [r2, #0]
 8002332:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8002336:	6011      	str	r1, [r2, #0]

	OPAMP3->CSR |= OPAMP_CSR_VMSEL;					// 11: Opamp_out connected to OPAMPx_VINM input
 8002338:	689a      	ldr	r2, [r3, #8]
 800233a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800233e:	609a      	str	r2, [r3, #8]
	OPAMP3->CSR |= OPAMP_CSR_VPSEL;					// 11: DAC3_CH2  connected to OPAMP1 VINP input
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	f042 020c 	orr.w	r2, r2, #12
 8002346:	609a      	str	r2, [r3, #8]
	OPAMP3->CSR |= OPAMP_CSR_OPAMPxEN;				// Enable OpAmp: voltage on pin OPAMPx_VINP is buffered to pin OPAMPx_VOUT (PB1)
 8002348:	689a      	ldr	r2, [r3, #8]
 800234a:	f042 0201 	orr.w	r2, r2, #1
 800234e:	609a      	str	r2, [r3, #8]

}
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	40021000 	.word	0x40021000
 8002358:	50000800 	.word	0x50000800
 800235c:	50001000 	.word	0x50001000
 8002360:	40010300 	.word	0x40010300

08002364 <_Z6InitIOv>:

void InitIO()
{
	// MODER 00: Input mode, 01: General purpose output mode, 10: Alternate function mode, 11: Analog mode (reset state)

	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;			// reset and clock control - advanced high performance bus - GPIO port A
 8002364:	4b37      	ldr	r3, [pc, #220]	@ (8002444 <_Z6InitIOv+0xe0>)
 8002366:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002368:	f042 0201 	orr.w	r2, r2, #1
 800236c:	64da      	str	r2, [r3, #76]	@ 0x4c
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;			// reset and clock control - advanced high performance bus - GPIO port B
 800236e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002370:	f042 0202 	orr.w	r2, r2, #2
 8002374:	64da      	str	r2, [r3, #76]	@ 0x4c
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;			// reset and clock control - advanced high performance bus - GPIO port C
 8002376:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002378:	f042 0204 	orr.w	r2, r2, #4
 800237c:	64da      	str	r2, [r3, #76]	@ 0x4c

	GPIOB->MODER &= ~GPIO_MODER_MODER13;			// configure PB13 gate 1 input
 800237e:	4b32      	ldr	r3, [pc, #200]	@ (8002448 <_Z6InitIOv+0xe4>)
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8002386:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ~GPIO_MODER_MODER14;			// configure PB14 gate 2 input
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800238e:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ~GPIO_MODER_MODER15;			// configure PB15 gate 3 input
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8002396:	601a      	str	r2, [r3, #0]
	GPIOC->MODER &= ~GPIO_MODER_MODER6;				// configure PC6  gate 4 input
 8002398:	4a2c      	ldr	r2, [pc, #176]	@ (800244c <_Z6InitIOv+0xe8>)
 800239a:	6811      	ldr	r1, [r2, #0]
 800239c:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 80023a0:	6011      	str	r1, [r2, #0]

	// NB PB6 is used in USB Power delivery and by default has a pull down to ground - disable in the PWR register (datasheet p.60 note 5)
	PWR->CR3 |= PWR_CR3_UCPD_DBDIS;
 80023a2:	482b      	ldr	r0, [pc, #172]	@ (8002450 <_Z6InitIOv+0xec>)
 80023a4:	6881      	ldr	r1, [r0, #8]
 80023a6:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 80023aa:	6081      	str	r1, [r0, #8]

	GPIOB->MODER &= ~GPIO_MODER_MODER5;				// configure PB5  Env 1 Short input
 80023ac:	6819      	ldr	r1, [r3, #0]
 80023ae:	f421 6140 	bic.w	r1, r1, #3072	@ 0xc00
 80023b2:	6019      	str	r1, [r3, #0]
	GPIOB->MODER &= ~GPIO_MODER_MODER6;				// configure PB6  Env 1 tremolo input*
 80023b4:	6819      	ldr	r1, [r3, #0]
 80023b6:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 80023ba:	6019      	str	r1, [r3, #0]
	GPIOB->MODER &= ~GPIO_MODER_MODER3;				// configure PB3  Env 2 Short input
 80023bc:	6819      	ldr	r1, [r3, #0]
 80023be:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 80023c2:	6019      	str	r1, [r3, #0]
	GPIOB->MODER &= ~GPIO_MODER_MODER4;				// configure PB4  Env 2 tremolo input
 80023c4:	6819      	ldr	r1, [r3, #0]
 80023c6:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 80023ca:	6019      	str	r1, [r3, #0]
	GPIOC->MODER &= ~GPIO_MODER_MODER10;			// configure PC10 Env 3 Short input
 80023cc:	6811      	ldr	r1, [r2, #0]
 80023ce:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 80023d2:	6011      	str	r1, [r2, #0]
	GPIOC->MODER &= ~GPIO_MODER_MODER12;			// configure PC12 Env 3 tremolo input
 80023d4:	6811      	ldr	r1, [r2, #0]
 80023d6:	f021 7140 	bic.w	r1, r1, #50331648	@ 0x3000000
 80023da:	6011      	str	r1, [r2, #0]
	GPIOB->MODER &= ~GPIO_MODER_MODER12;			// configure PB12 Env 4 Short input
 80023dc:	6819      	ldr	r1, [r3, #0]
 80023de:	f021 7140 	bic.w	r1, r1, #50331648	@ 0x3000000
 80023e2:	6019      	str	r1, [r3, #0]
	GPIOA->MODER &= ~GPIO_MODER_MODER15;			// configure PA15 Env 4 tremolo input
 80023e4:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 80023e8:	6808      	ldr	r0, [r1, #0]
 80023ea:	f020 4040 	bic.w	r0, r0, #3221225472	@ 0xc0000000
 80023ee:	6008      	str	r0, [r1, #0]

	GPIOB->PUPDR |= GPIO_PUPDR_PUPDR5_0;			// configure PB5  Env 1 Pull-up
 80023f0:	68d8      	ldr	r0, [r3, #12]
 80023f2:	f440 6080 	orr.w	r0, r0, #1024	@ 0x400
 80023f6:	60d8      	str	r0, [r3, #12]
	GPIOB->PUPDR |= GPIO_PUPDR_PUPDR6_0;			// configure PB6  Env 1 Pull-up
 80023f8:	68d8      	ldr	r0, [r3, #12]
 80023fa:	f440 5080 	orr.w	r0, r0, #4096	@ 0x1000
 80023fe:	60d8      	str	r0, [r3, #12]
	GPIOB->PUPDR |= GPIO_PUPDR_PUPDR3_0;			// configure PB3  Env 2 Pull-up
 8002400:	68d8      	ldr	r0, [r3, #12]
 8002402:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 8002406:	60d8      	str	r0, [r3, #12]
	GPIOB->PUPDR |= GPIO_PUPDR_PUPDR4_0;			// configure PB4  Env 2 Pull-up
 8002408:	68d8      	ldr	r0, [r3, #12]
 800240a:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
 800240e:	60d8      	str	r0, [r3, #12]
	GPIOC->PUPDR |= GPIO_PUPDR_PUPDR10_0;			// configure PC10 Env 3 Pull-up
 8002410:	68d0      	ldr	r0, [r2, #12]
 8002412:	f440 1080 	orr.w	r0, r0, #1048576	@ 0x100000
 8002416:	60d0      	str	r0, [r2, #12]
	GPIOC->PUPDR |= GPIO_PUPDR_PUPDR12_0;			// configure PC12 Env 3 Pull-up
 8002418:	68d0      	ldr	r0, [r2, #12]
 800241a:	f040 7080 	orr.w	r0, r0, #16777216	@ 0x1000000
 800241e:	60d0      	str	r0, [r2, #12]
	GPIOB->PUPDR |= GPIO_PUPDR_PUPDR12_0;			// configure PB12 Env 4 Pull-up
 8002420:	68da      	ldr	r2, [r3, #12]
 8002422:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8002426:	60da      	str	r2, [r3, #12]
	GPIOA->PUPDR |= GPIO_PUPDR_PUPDR15_0;			// configure PA15 Env 4 Pull-up
 8002428:	68ca      	ldr	r2, [r1, #12]
 800242a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800242e:	60ca      	str	r2, [r1, #12]

	GPIOA->MODER &= ~GPIO_MODER_MODER9;				// configure PA9 clock input
 8002430:	680a      	ldr	r2, [r1, #0]
 8002432:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8002436:	600a      	str	r2, [r1, #0]
	GPIOB->MODER &= ~GPIO_MODER_MODER9_1;			// configure PB9 debug out
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	f422 2200 	bic.w	r2, r2, #524288	@ 0x80000
 800243e:	601a      	str	r2, [r3, #0]
}
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	40021000 	.word	0x40021000
 8002448:	48000400 	.word	0x48000400
 800244c:	48000800 	.word	0x48000800
 8002450:	40007000 	.word	0x40007000

08002454 <_Z12InitEnvTimerv>:


//	Setup Timer 3 on an interrupt to trigger sample output
void InitEnvTimer() {
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM3EN;			// Enable Timer 3
 8002454:	4a0e      	ldr	r2, [pc, #56]	@ (8002490 <_Z12InitEnvTimerv+0x3c>)
 8002456:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8002458:	f043 0302 	orr.w	r3, r3, #2
 800245c:	6593      	str	r3, [r2, #88]	@ 0x58
	TIM3->PSC = 34;									// Set prescaler
 800245e:	4b0d      	ldr	r3, [pc, #52]	@ (8002494 <_Z12InitEnvTimerv+0x40>)
 8002460:	2222      	movs	r2, #34	@ 0x22
 8002462:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM3->ARR = 103; 								// Set auto reload register - 170Mhz / 33 / 103 = ~50kHz
 8002464:	2267      	movs	r2, #103	@ 0x67
 8002466:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM3->DIER |= TIM_DIER_UIE;						// DMA/interrupt enable register
 8002468:	68da      	ldr	r2, [r3, #12]
 800246a:	f042 0201 	orr.w	r2, r2, #1
 800246e:	60da      	str	r2, [r3, #12]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002470:	4a09      	ldr	r2, [pc, #36]	@ (8002498 <_Z12InitEnvTimerv+0x44>)
 8002472:	f04f 5100 	mov.w	r1, #536870912	@ 0x20000000
 8002476:	6011      	str	r1, [r2, #0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002478:	2100      	movs	r1, #0
 800247a:	f882 131d 	strb.w	r1, [r2, #797]	@ 0x31d
	NVIC_EnableIRQ(TIM3_IRQn);
	NVIC_SetPriority(TIM3_IRQn, 0);					// Lower is higher priority

	TIM3->CR1 |= TIM_CR1_CEN;
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	f042 0201 	orr.w	r2, r2, #1
 8002484:	601a      	str	r2, [r3, #0]
	TIM3->EGR |= TIM_EGR_UG;						//  Re-initializes counter and generates update of registers
 8002486:	695a      	ldr	r2, [r3, #20]
 8002488:	f042 0201 	orr.w	r2, r2, #1
 800248c:	615a      	str	r2, [r3, #20]
}
 800248e:	4770      	bx	lr
 8002490:	40021000 	.word	0x40021000
 8002494:	40000400 	.word	0x40000400
 8002498:	e000e100 	.word	0xe000e100

0800249c <_Z11InitAdcPinsP11ADC_TypeDefSt16initializer_listIhE>:


void InitAdcPins(ADC_TypeDef* ADC_No, std::initializer_list<uint8_t> channels) {
 800249c:	b530      	push	{r4, r5, lr}
 800249e:	b083      	sub	sp, #12
 80024a0:	ab02      	add	r3, sp, #8
 80024a2:	e903 0006 	stmdb	r3, {r1, r2}
      constexpr const_iterator
      begin() const noexcept { return _M_array; }

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 80024a6:	9b01      	ldr	r3, [sp, #4]
 80024a8:	eb01 0e03 	add.w	lr, r1, r3
	uint8_t sequence = 1;

	for (auto channel: channels) {
 80024ac:	4571      	cmp	r1, lr
 80024ae:	d04c      	beq.n	800254a <_Z11InitAdcPinsP11ADC_TypeDefSt16initializer_listIhE+0xae>
 80024b0:	f101 3cff 	add.w	ip, r1, #4294967295
 80024b4:	f10e 3eff 	add.w	lr, lr, #4294967295
	uint8_t sequence = 1;
 80024b8:	2201      	movs	r2, #1

		// 000: 3 cycles, 001: 15 cycles, 010: 28 cycles, 011: 56 cycles, 100: 84 cycles, 101: 112 cycles, 110: 144 cycles, 111: 480 cycles
		if (channel < 10)
			ADC_No->SMPR1 |= 0b010 << (3 * channel);
		else
			ADC_No->SMPR2 |= 0b010 << (3 * (channel - 10));
 80024ba:	2402      	movs	r4, #2
 80024bc:	e02f      	b.n	800251e <_Z11InitAdcPinsP11ADC_TypeDefSt16initializer_listIhE+0x82>
		} else if (sequence < 10) {
 80024be:	2a09      	cmp	r2, #9
 80024c0:	d809      	bhi.n	80024d6 <_Z11InitAdcPinsP11ADC_TypeDefSt16initializer_listIhE+0x3a>
			ADC_No->SQR2 |= channel << ((sequence - 5) * 6);
 80024c2:	6b45      	ldr	r5, [r0, #52]	@ 0x34
 80024c4:	1f51      	subs	r1, r2, #5
 80024c6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80024ca:	0049      	lsls	r1, r1, #1
 80024cc:	fa03 f101 	lsl.w	r1, r3, r1
 80024d0:	4329      	orrs	r1, r5
 80024d2:	6341      	str	r1, [r0, #52]	@ 0x34
 80024d4:	e02f      	b.n	8002536 <_Z11InitAdcPinsP11ADC_TypeDefSt16initializer_listIhE+0x9a>
		} else if (sequence < 15) {
 80024d6:	2a0e      	cmp	r2, #14
 80024d8:	d80a      	bhi.n	80024f0 <_Z11InitAdcPinsP11ADC_TypeDefSt16initializer_listIhE+0x54>
			ADC_No->SQR3 |= channel << ((sequence - 10) * 6);
 80024da:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 80024dc:	f1a2 010a 	sub.w	r1, r2, #10
 80024e0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80024e4:	0049      	lsls	r1, r1, #1
 80024e6:	fa03 f101 	lsl.w	r1, r3, r1
 80024ea:	4329      	orrs	r1, r5
 80024ec:	6381      	str	r1, [r0, #56]	@ 0x38
 80024ee:	e022      	b.n	8002536 <_Z11InitAdcPinsP11ADC_TypeDefSt16initializer_listIhE+0x9a>
			ADC_No->SQR4 |= channel << ((sequence - 15) * 6);
 80024f0:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 80024f2:	f1a2 010f 	sub.w	r1, r2, #15
 80024f6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80024fa:	0049      	lsls	r1, r1, #1
 80024fc:	fa03 f101 	lsl.w	r1, r3, r1
 8002500:	4329      	orrs	r1, r5
 8002502:	63c1      	str	r1, [r0, #60]	@ 0x3c
 8002504:	e017      	b.n	8002536 <_Z11InitAdcPinsP11ADC_TypeDefSt16initializer_listIhE+0x9a>
			ADC_No->SMPR2 |= 0b010 << (3 * (channel - 10));
 8002506:	6981      	ldr	r1, [r0, #24]
 8002508:	3b0a      	subs	r3, #10
 800250a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800250e:	fa04 f303 	lsl.w	r3, r4, r3
 8002512:	430b      	orrs	r3, r1
 8002514:	6183      	str	r3, [r0, #24]

		sequence++;
 8002516:	3201      	adds	r2, #1
 8002518:	b2d2      	uxtb	r2, r2
	for (auto channel: channels) {
 800251a:	45f4      	cmp	ip, lr
 800251c:	d015      	beq.n	800254a <_Z11InitAdcPinsP11ADC_TypeDefSt16initializer_listIhE+0xae>
 800251e:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
		if (sequence < 5) {
 8002522:	2a04      	cmp	r2, #4
 8002524:	d8cb      	bhi.n	80024be <_Z11InitAdcPinsP11ADC_TypeDefSt16initializer_listIhE+0x22>
			ADC_No->SQR1 |= channel << ((sequence) * 6);
 8002526:	6b05      	ldr	r5, [r0, #48]	@ 0x30
 8002528:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800252c:	0049      	lsls	r1, r1, #1
 800252e:	fa03 f101 	lsl.w	r1, r3, r1
 8002532:	4329      	orrs	r1, r5
 8002534:	6301      	str	r1, [r0, #48]	@ 0x30
		if (channel < 10)
 8002536:	2b09      	cmp	r3, #9
 8002538:	d8e5      	bhi.n	8002506 <_Z11InitAdcPinsP11ADC_TypeDefSt16initializer_listIhE+0x6a>
			ADC_No->SMPR1 |= 0b010 << (3 * channel);
 800253a:	6941      	ldr	r1, [r0, #20]
 800253c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002540:	fa04 f303 	lsl.w	r3, r4, r3
 8002544:	430b      	orrs	r3, r1
 8002546:	6143      	str	r3, [r0, #20]
 8002548:	e7e5      	b.n	8002516 <_Z11InitAdcPinsP11ADC_TypeDefSt16initializer_listIhE+0x7a>
	}
}
 800254a:	b003      	add	sp, #12
 800254c:	bd30      	pop	{r4, r5, pc}
	...

08002550 <_Z7InitADCPVt>:


void InitADC(volatile uint16_t* ADC_array)
{
 8002550:	b510      	push	{r4, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	4604      	mov	r4, r0
	// Initialize Clocks
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 8002556:	4b65      	ldr	r3, [pc, #404]	@ (80026ec <_Z7InitADCPVt+0x19c>)
 8002558:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800255a:	f042 0201 	orr.w	r2, r2, #1
 800255e:	649a      	str	r2, [r3, #72]	@ 0x48
	RCC->AHB1ENR |= RCC_AHB1ENR_DMAMUX1EN;
 8002560:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002562:	f042 0204 	orr.w	r2, r2, #4
 8002566:	649a      	str	r2, [r3, #72]	@ 0x48
	RCC->AHB2ENR |= RCC_AHB2ENR_ADC12EN;
 8002568:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800256a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800256e:	64da      	str	r2, [r3, #76]	@ 0x4c
	RCC->CCIPR |= RCC_CCIPR_ADC12SEL_1;				// 00: pll2_p_ck (default), 01: pll3_r_ck clock, 10: per_ck clock
 8002570:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002574:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8002578:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

	DMA1_Channel1->CCR &= ~DMA_CCR_EN;
 800257c:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8002580:	689a      	ldr	r2, [r3, #8]
 8002582:	f022 0201 	bic.w	r2, r2, #1
 8002586:	609a      	str	r2, [r3, #8]
	DMA1_Channel1->CCR |= DMA_CCR_CIRC;				// Circular mode to keep refilling buffer
 8002588:	689a      	ldr	r2, [r3, #8]
 800258a:	f042 0220 	orr.w	r2, r2, #32
 800258e:	609a      	str	r2, [r3, #8]
	DMA1_Channel1->CCR |= DMA_CCR_MINC;				// Memory in increment mode
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002596:	609a      	str	r2, [r3, #8]
	DMA1_Channel1->CCR |= DMA_CCR_PSIZE_0;			// Peripheral size: 8 bit; 01 = 16 bit; 10 = 32 bit
 8002598:	689a      	ldr	r2, [r3, #8]
 800259a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800259e:	609a      	str	r2, [r3, #8]
	DMA1_Channel1->CCR |= DMA_CCR_MSIZE_0;			// Memory size: 8 bit; 01 = 16 bit; 10 = 32 bit
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80025a6:	609a      	str	r2, [r3, #8]
	DMA1_Channel1->CCR |= DMA_CCR_PL_0;				// Priority: 00 = low; 01 = Medium; 10 = High; 11 = Very High
 80025a8:	689a      	ldr	r2, [r3, #8]
 80025aa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80025ae:	609a      	str	r2, [r3, #8]

	DMA1->IFCR = 0x3F << DMA_IFCR_CGIF1_Pos;		// clear all five interrupts for this stream
 80025b0:	223f      	movs	r2, #63	@ 0x3f
 80025b2:	605a      	str	r2, [r3, #4]

	DMAMUX1_Channel0->CCR |= 5; 					// DMA request MUX input 5 = ADC1 (See p.427)
 80025b4:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 80025b8:	f042 0205 	orr.w	r2, r2, #5
 80025bc:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
	DMAMUX1_ChannelStatus->CFR |= DMAMUX_CFR_CSOF0; // Channel 1 Clear synchronization overrun event flag
 80025c0:	4a4b      	ldr	r2, [pc, #300]	@ (80026f0 <_Z7InitADCPVt+0x1a0>)
 80025c2:	f8d2 3084 	ldr.w	r3, [r2, #132]	@ 0x84
 80025c6:	f043 0301 	orr.w	r3, r3, #1
 80025ca:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

	ADC1->CR &= ~ADC_CR_DEEPPWD;					// Deep power down: 0: ADC not in deep-power down	1: ADC in deep-power-down (default reset state)
 80025ce:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 80025d8:	609a      	str	r2, [r3, #8]
	ADC1->CR |= ADC_CR_ADVREGEN;					// Enable ADC internal voltage regulator
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80025e0:	609a      	str	r2, [r3, #8]

	// Wait until voltage regulator settled
	volatile uint32_t wait_loop_index = (SystemCoreClock / (100000UL * 2UL));
 80025e2:	4b44      	ldr	r3, [pc, #272]	@ (80026f4 <_Z7InitADCPVt+0x1a4>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	099b      	lsrs	r3, r3, #6
 80025e8:	4a43      	ldr	r2, [pc, #268]	@ (80026f8 <_Z7InitADCPVt+0x1a8>)
 80025ea:	fba2 2303 	umull	r2, r3, r2, r3
 80025ee:	099b      	lsrs	r3, r3, #6
 80025f0:	9300      	str	r3, [sp, #0]
	while (wait_loop_index != 0UL) {
 80025f2:	9b00      	ldr	r3, [sp, #0]
 80025f4:	b12b      	cbz	r3, 8002602 <_Z7InitADCPVt+0xb2>
		wait_loop_index--;
 80025f6:	9b00      	ldr	r3, [sp, #0]
 80025f8:	3b01      	subs	r3, #1
 80025fa:	9300      	str	r3, [sp, #0]
	while (wait_loop_index != 0UL) {
 80025fc:	9b00      	ldr	r3, [sp, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1f9      	bne.n	80025f6 <_Z7InitADCPVt+0xa6>
	}
	while ((ADC1->CR & ADC_CR_ADVREGEN) != ADC_CR_ADVREGEN) {}
 8002602:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002606:	6893      	ldr	r3, [r2, #8]
 8002608:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800260c:	d0fb      	beq.n	8002606 <_Z7InitADCPVt+0xb6>

	ADC12_COMMON->CCR |= ADC_CCR_CKMODE;			// adc_hclk/4 (Synchronous clock mode)
 800260e:	4a3b      	ldr	r2, [pc, #236]	@ (80026fc <_Z7InitADCPVt+0x1ac>)
 8002610:	6893      	ldr	r3, [r2, #8]
 8002612:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8002616:	6093      	str	r3, [r2, #8]
	ADC1->CFGR |= ADC_CFGR_CONT;					// 1: Continuous conversion mode for regular conversions
 8002618:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800261c:	68da      	ldr	r2, [r3, #12]
 800261e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002622:	60da      	str	r2, [r3, #12]
	ADC1->CFGR |= ADC_CFGR_OVRMOD;					// Overrun Mode 1: ADC_DR register is overwritten with the last conversion result when an overrun is detected.
 8002624:	68da      	ldr	r2, [r3, #12]
 8002626:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800262a:	60da      	str	r2, [r3, #12]
	ADC1->CFGR |= ADC_CFGR_DMACFG;					// 0: DMA One Shot Mode selected, 1: DMA Circular Mode selected
 800262c:	68da      	ldr	r2, [r3, #12]
 800262e:	f042 0202 	orr.w	r2, r2, #2
 8002632:	60da      	str	r2, [r3, #12]
	ADC1->CFGR |= ADC_CFGR_DMAEN;					// Enable ADC DMA
 8002634:	68da      	ldr	r2, [r3, #12]
 8002636:	f042 0201 	orr.w	r2, r2, #1
 800263a:	60da      	str	r2, [r3, #12]

	// For scan mode: set number of channels to be converted
	ADC1->SQR1 |= (ADC_BUFFER_LENGTH - 1);
 800263c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800263e:	f042 0208 	orr.w	r2, r2, #8
 8002642:	631a      	str	r2, [r3, #48]	@ 0x30

	// Start calibration
	ADC1->CR &= ~ADC_CR_ADCALDIF;					// Calibration in single ended mode
 8002644:	689a      	ldr	r2, [r3, #8]
 8002646:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800264a:	609a      	str	r2, [r3, #8]
	ADC1->CR |= ADC_CR_ADCAL;
 800264c:	689a      	ldr	r2, [r3, #8]
 800264e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002652:	609a      	str	r2, [r3, #8]
	while ((ADC1->CR & ADC_CR_ADCAL) == ADC_CR_ADCAL) {};
 8002654:	461a      	mov	r2, r3
 8002656:	6893      	ldr	r3, [r2, #8]
 8002658:	2b00      	cmp	r3, #0
 800265a:	dbfc      	blt.n	8002656 <_Z7InitADCPVt+0x106>
	7	PB0 ADC1_IN15		Env2 Release

	8	PB11 ADC12_IN14		LFO Speed
	*/

	InitAdcPins(ADC1, {6, 7, 8, 9, 1, 2, 4, 15, 14});
 800265c:	4a28      	ldr	r2, [pc, #160]	@ (8002700 <_Z7InitADCPVt+0x1b0>)
 800265e:	ab03      	add	r3, sp, #12
 8002660:	ca07      	ldmia	r2, {r0, r1, r2}
 8002662:	c303      	stmia	r3!, {r0, r1}
 8002664:	701a      	strb	r2, [r3, #0]
 8002666:	ab03      	add	r3, sp, #12
 8002668:	9301      	str	r3, [sp, #4]
 800266a:	2309      	movs	r3, #9
 800266c:	9302      	str	r3, [sp, #8]
 800266e:	ab01      	add	r3, sp, #4
 8002670:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002674:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002678:	f7ff ff10 	bl	800249c <_Z11InitAdcPinsP11ADC_TypeDefSt16initializer_listIhE>


	// Enable ADC
	ADC1->CR |= ADC_CR_ADEN;
 800267c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002680:	6893      	ldr	r3, [r2, #8]
 8002682:	f043 0301 	orr.w	r3, r3, #1
 8002686:	6093      	str	r3, [r2, #8]
	while ((ADC1->ISR & ADC_ISR_ADRDY) == 0) {}
 8002688:	6813      	ldr	r3, [r2, #0]
 800268a:	f013 0f01 	tst.w	r3, #1
 800268e:	d0fb      	beq.n	8002688 <_Z7InitADCPVt+0x138>

	DMAMUX1_ChannelStatus->CFR |= DMAMUX_CFR_CSOF0; // Channel 1 Clear synchronization overrun event flag
 8002690:	4a17      	ldr	r2, [pc, #92]	@ (80026f0 <_Z7InitADCPVt+0x1a0>)
 8002692:	f8d2 3084 	ldr.w	r3, [r2, #132]	@ 0x84
 8002696:	f043 0301 	orr.w	r3, r3, #1
 800269a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
	DMA1->IFCR = 0x3F << DMA_IFCR_CGIF1_Pos;		// clear all five interrupts for this stream
 800269e:	4b19      	ldr	r3, [pc, #100]	@ (8002704 <_Z7InitADCPVt+0x1b4>)
 80026a0:	223f      	movs	r2, #63	@ 0x3f
 80026a2:	605a      	str	r2, [r3, #4]

	DMA1_Channel1->CNDTR |= ADC_BUFFER_LENGTH;		// Number of data items to transfer (ie size of ADC buffer)
 80026a4:	68da      	ldr	r2, [r3, #12]
 80026a6:	f042 0209 	orr.w	r2, r2, #9
 80026aa:	60da      	str	r2, [r3, #12]
	DMA1_Channel1->CPAR = (uint32_t)(&(ADC1->DR));	// Configure the peripheral data register address 0x40022040
 80026ac:	4a16      	ldr	r2, [pc, #88]	@ (8002708 <_Z7InitADCPVt+0x1b8>)
 80026ae:	611a      	str	r2, [r3, #16]
	DMA1_Channel1->CMAR = (uint32_t)(ADC_array);	// Configure the memory address (note that M1AR is used for double-buffer mode) 0x24000040
 80026b0:	615c      	str	r4, [r3, #20]

	DMA1_Channel1->CCR |= DMA_CCR_EN;				// Enable DMA and wait
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	f042 0201 	orr.w	r2, r2, #1
 80026b8:	609a      	str	r2, [r3, #8]
	wait_loop_index = (SystemCoreClock / (100000UL * 2UL));
 80026ba:	4b0e      	ldr	r3, [pc, #56]	@ (80026f4 <_Z7InitADCPVt+0x1a4>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	099b      	lsrs	r3, r3, #6
 80026c0:	4a0d      	ldr	r2, [pc, #52]	@ (80026f8 <_Z7InitADCPVt+0x1a8>)
 80026c2:	fba2 2303 	umull	r2, r3, r2, r3
 80026c6:	099b      	lsrs	r3, r3, #6
 80026c8:	9300      	str	r3, [sp, #0]
	while (wait_loop_index != 0UL) {
 80026ca:	9b00      	ldr	r3, [sp, #0]
 80026cc:	b12b      	cbz	r3, 80026da <_Z7InitADCPVt+0x18a>
		wait_loop_index--;
 80026ce:	9b00      	ldr	r3, [sp, #0]
 80026d0:	3b01      	subs	r3, #1
 80026d2:	9300      	str	r3, [sp, #0]
	while (wait_loop_index != 0UL) {
 80026d4:	9b00      	ldr	r3, [sp, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1f9      	bne.n	80026ce <_Z7InitADCPVt+0x17e>
	}

	ADC1->CR |= ADC_CR_ADSTART;						// Start ADC
 80026da:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80026de:	6893      	ldr	r3, [r2, #8]
 80026e0:	f043 0304 	orr.w	r3, r3, #4
 80026e4:	6093      	str	r3, [r2, #8]
}
 80026e6:	b006      	add	sp, #24
 80026e8:	bd10      	pop	{r4, pc}
 80026ea:	bf00      	nop
 80026ec:	40021000 	.word	0x40021000
 80026f0:	40020800 	.word	0x40020800
 80026f4:	20000004 	.word	0x20000004
 80026f8:	053e2d63 	.word	0x053e2d63
 80026fc:	50000300 	.word	0x50000300
 8002700:	08005b00 	.word	0x08005b00
 8002704:	40020000 	.word	0x40020000
 8002708:	50000040 	.word	0x50000040

0800270c <_Z10InitCordicv>:


void InitCordic()
{
	RCC->AHB1ENR |= RCC_AHB1ENR_CORDICEN;
 800270c:	4a02      	ldr	r2, [pc, #8]	@ (8002718 <_Z10InitCordicv+0xc>)
 800270e:	6c93      	ldr	r3, [r2, #72]	@ 0x48
 8002710:	f043 0308 	orr.w	r3, r3, #8
 8002714:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8002716:	4770      	bx	lr
 8002718:	40021000 	.word	0x40021000

0800271c <_ZN10USBHandlerC1Ev>:
class USBHandler {
 800271c:	b570      	push	{r4, r5, r6, lr}
 800271e:	4604      	mov	r4, r0
      : _Function_base() { }
 8002720:	2500      	movs	r5, #0
 8002722:	6005      	str	r5, [r0, #0]
 8002724:	6045      	str	r5, [r0, #4]
 8002726:	6085      	str	r5, [r0, #8]
 8002728:	60c5      	str	r5, [r0, #12]
 800272a:	f880 5065 	strb.w	r5, [r0, #101]	@ 0x65
 800272e:	4e1a      	ldr	r6, [pc, #104]	@ (8002798 <_ZN10USBHandlerC1Ev+0x7c>)
 8002730:	f100 0c7c 	add.w	ip, r0, #124	@ 0x7c
 8002734:	46b6      	mov	lr, r6
 8002736:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800273a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800273e:	f8de 3000 	ldr.w	r3, [lr]
 8002742:	f8ac 3000 	strh.w	r3, [ip]
 8002746:	224b      	movs	r2, #75	@ 0x4b
 8002748:	f106 0114 	add.w	r1, r6, #20
 800274c:	f104 008e 	add.w	r0, r4, #142	@ 0x8e
 8002750:	f001 fc37 	bl	8003fc2 <memcpy>
 8002754:	f106 0360 	add.w	r3, r6, #96	@ 0x60
 8002758:	cb07      	ldmia	r3!, {r0, r1, r2}
 800275a:	f8c4 00d9 	str.w	r0, [r4, #217]	@ 0xd9
 800275e:	f8c4 10dd 	str.w	r1, [r4, #221]	@ 0xdd
 8002762:	f8c4 20e1 	str.w	r2, [r4, #225]	@ 0xe1
 8002766:	f8c4 50e5 	str.w	r5, [r4, #229]	@ 0xe5
 800276a:	f8c4 50e9 	str.w	r5, [r4, #233]	@ 0xe9
 800276e:	f8c4 50ed 	str.w	r5, [r4, #237]	@ 0xed
 8002772:	f8c4 50f1 	str.w	r5, [r4, #241]	@ 0xf1
 8002776:	f8c4 50f5 	str.w	r5, [r4, #245]	@ 0xf5
 800277a:	f8c4 50f9 	str.w	r5, [r4, #249]	@ 0xf9
 800277e:	f8a4 50fd 	strh.w	r5, [r4, #253]	@ 0xfd
 8002782:	231a      	movs	r3, #26
 8002784:	f884 30e5 	strb.w	r3, [r4, #229]	@ 0xe5
 8002788:	2303      	movs	r3, #3
 800278a:	f884 30e6 	strb.w	r3, [r4, #230]	@ 0xe6
 800278e:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 8002790:	f8c4 00ff 	str.w	r0, [r4, #255]	@ 0xff
 8002794:	4620      	mov	r0, r4
 8002796:	bd70      	pop	{r4, r5, r6, pc}
 8002798:	08005b0c 	.word	0x08005b0c

0800279c <SysTick_Handler>:
void SysTick_Handler(void) {

	SysTickVal++;
 800279c:	4a02      	ldr	r2, [pc, #8]	@ (80027a8 <SysTick_Handler+0xc>)
 800279e:	6813      	ldr	r3, [r2, #0]
 80027a0:	3301      	adds	r3, #1
 80027a2:	6013      	str	r3, [r2, #0]
}
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	200004fc 	.word	0x200004fc

080027ac <TIM3_IRQHandler>:

void TIM3_IRQHandler() {
 80027ac:	b508      	push	{r3, lr}
	TIM3->SR &= ~TIM_SR_UIF;
 80027ae:	4a04      	ldr	r2, [pc, #16]	@ (80027c0 <TIM3_IRQHandler+0x14>)
 80027b0:	6913      	ldr	r3, [r2, #16]
 80027b2:	f023 0301 	bic.w	r3, r3, #1
 80027b6:	6113      	str	r3, [r2, #16]
	//GPIOC->ODR |= GPIO_IDR_ID6;
	envelopes.calcEnvelopes();
 80027b8:	4802      	ldr	r0, [pc, #8]	@ (80027c4 <TIM3_IRQHandler+0x18>)
 80027ba:	f7ff fc77 	bl	80020ac <_ZN9Envelopes13calcEnvelopesEv>
	//GPIOC->ODR &= ~GPIO_ODR_ODR_6;
}
 80027be:	bd08      	pop	{r3, pc}
 80027c0:	40000400 	.word	0x40000400
 80027c4:	20000398 	.word	0x20000398

080027c8 <USB_LP_IRQHandler>:

void USB_LP_IRQHandler() {
 80027c8:	b508      	push	{r3, lr}
	usb.USBInterruptHandler();
 80027ca:	4802      	ldr	r0, [pc, #8]	@ (80027d4 <USB_LP_IRQHandler+0xc>)
 80027cc:	f7ff f8d6 	bl	800197c <_ZN10USBHandler19USBInterruptHandlerEv>
}
 80027d0:	bd08      	pop	{r3, pc}
 80027d2:	bf00      	nop
 80027d4:	20000214 	.word	0x20000214

080027d8 <NMI_Handler>:

void NMI_Handler(void) {}
 80027d8:	4770      	bx	lr

080027da <HardFault_Handler>:

void HardFault_Handler(void) {
	while (1) {}
 80027da:	e7fe      	b.n	80027da <HardFault_Handler>

080027dc <MemManage_Handler>:
}

void MemManage_Handler(void) {
	while (1) {}
 80027dc:	e7fe      	b.n	80027dc <MemManage_Handler>

080027de <BusFault_Handler>:
}

void BusFault_Handler(void) {
	while (1) {}
 80027de:	e7fe      	b.n	80027de <BusFault_Handler>

080027e0 <UsageFault_Handler>:
}

void UsageFault_Handler(void) {
	while (1) {}
 80027e0:	e7fe      	b.n	80027e0 <UsageFault_Handler>

080027e2 <SVC_Handler>:
}

void SVC_Handler(void) {}
 80027e2:	4770      	bx	lr

080027e4 <DebugMon_Handler>:

void DebugMon_Handler(void) {}
 80027e4:	4770      	bx	lr

080027e6 <PendSV_Handler>:

void PendSV_Handler(void) {}
 80027e6:	4770      	bx	lr

080027e8 <main>:
}


extern uint32_t SystemCoreClock;
int main(void)
{
 80027e8:	b508      	push	{r3, lr}
	SystemInit();							// Activates floating point coprocessor and resets clock
 80027ea:	f000 fa0d 	bl	8002c08 <SystemInit>
	SystemClock_Config();					// Configure the clock and PLL
 80027ee:	f7ff fcef 	bl	80021d0 <_Z18SystemClock_Configv>
	SystemCoreClockUpdate();				// Update SystemCoreClock (system clock frequency) derived from settings of oscillators, prescalers and PLL
 80027f2:	f000 fa1b 	bl	8002c2c <SystemCoreClockUpdate>
	InitSysTick();
 80027f6:	f7ff fd3f 	bl	8002278 <_Z11InitSysTickv>
	InitDAC();
 80027fa:	f7ff fd5d 	bl	80022b8 <_Z7InitDACv>
	InitIO();
 80027fe:	f7ff fdb1 	bl	8002364 <_Z6InitIOv>
	InitEnvTimer();
 8002802:	f7ff fe27 	bl	8002454 <_Z12InitEnvTimerv>
	InitADC(reinterpret_cast<volatile uint16_t*>(&adc));
 8002806:	480f      	ldr	r0, [pc, #60]	@ (8002844 <main+0x5c>)
 8002808:	f7ff fea2 	bl	8002550 <_Z7InitADCPVt>
	InitUart();
 800280c:	f000 fa78 	bl	8002d00 <_Z8InitUartv>
	InitCordic();
 8002810:	f7ff ff7c 	bl	800270c <_Z10InitCordicv>

	usb.InitUSB();
 8002814:	480c      	ldr	r0, [pc, #48]	@ (8002848 <main+0x60>)
 8002816:	f7fe fe91 	bl	800153c <_ZN10USBHandler7InitUSBEv>

	while (1) {
		if ((GPIOC->IDR & GPIO_IDR_ID13) != 0 && SysTickVal > buttonDebounce + 1000) {
 800281a:	4e0c      	ldr	r6, [pc, #48]	@ (800284c <main+0x64>)
 800281c:	4d0c      	ldr	r5, [pc, #48]	@ (8002850 <main+0x68>)
 800281e:	4c0d      	ldr	r4, [pc, #52]	@ (8002854 <main+0x6c>)
 8002820:	e00a      	b.n	8002838 <main+0x50>
 8002822:	682a      	ldr	r2, [r5, #0]
 8002824:	6823      	ldr	r3, [r4, #0]
 8002826:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800282a:	4293      	cmp	r3, r2
			buttonDebounce = SysTickVal;
 800282c:	bf3c      	itt	cc
 800282e:	682b      	ldrcc	r3, [r5, #0]
 8002830:	6023      	strcc	r3, [r4, #0]
#if (USB_DEBUG)
			usb.OutputDebug();
#endif
		}
		serial.Command();			// Check for incoming CDC commands
 8002832:	4809      	ldr	r0, [pc, #36]	@ (8002858 <main+0x70>)
 8002834:	f7fe fc2c 	bl	8001090 <_ZN13SerialHandler7CommandEv>
		if ((GPIOC->IDR & GPIO_IDR_ID13) != 0 && SysTickVal > buttonDebounce + 1000) {
 8002838:	6933      	ldr	r3, [r6, #16]
 800283a:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 800283e:	d1f0      	bne.n	8002822 <main+0x3a>
 8002840:	e7f7      	b.n	8002832 <main+0x4a>
 8002842:	bf00      	nop
 8002844:	200004e8 	.word	0x200004e8
 8002848:	20000214 	.word	0x20000214
 800284c:	48000800 	.word	0x48000800
 8002850:	200004fc 	.word	0x200004fc
 8002854:	200004e4 	.word	0x200004e4
 8002858:	200001f0 	.word	0x200001f0

0800285c <_GLOBAL__sub_I_SysTickVal>:
	}
}
 800285c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

struct Envelope {
	friend class SerialHandler;					// Allow the serial handler access to private data for debug printing
public:
	Envelope(volatile ADSR& adsr, volatile uint32_t* outputDAC, GPIO_TypeDef* gatePort, uint8_t gatePin, GPIO_TypeDef* shortPort, uint8_t shortPin, GPIO_TypeDef* tremPort, uint8_t tremPin)
	 : adsr(adsr), outputDAC{outputDAC}, gatePort{gatePort}, gatePin{gatePin}, shortPort{shortPort}, shortPin{shortPin}, tremPort{tremPort}, tremPin{tremPin} {}
 8002860:	4b5c      	ldr	r3, [pc, #368]	@ (80029d4 <_GLOBAL__sub_I_SysTickVal+0x178>)
 8002862:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 80029d8 <_GLOBAL__sub_I_SysTickVal+0x17c>
 8002866:	edc3 7a07 	vstr	s15, [r3, #28]
 800286a:	2601      	movs	r6, #1
 800286c:	f883 6020 	strb.w	r6, [r3, #32]
 8002870:	f8df e18c 	ldr.w	lr, [pc, #396]	@ 8002a00 <_GLOBAL__sub_I_SysTickVal+0x1a4>
 8002874:	f8c3 e024 	str.w	lr, [r3, #36]	@ 0x24
 8002878:	2200      	movs	r2, #0
 800287a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800287c:	f8df c184 	ldr.w	ip, [pc, #388]	@ 8002a04 <_GLOBAL__sub_I_SysTickVal+0x1a8>
 8002880:	f8c3 c02c 	str.w	ip, [r3, #44]	@ 0x2c
 8002884:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8002888:	861d      	strh	r5, [r3, #48]	@ 0x30
 800288a:	2000      	movs	r0, #0
 800288c:	6358      	str	r0, [r3, #52]	@ 0x34
 800288e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002890:	63d8      	str	r0, [r3, #60]	@ 0x3c
 8002892:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002896:	645a      	str	r2, [r3, #68]	@ 0x44
 8002898:	4c50      	ldr	r4, [pc, #320]	@ (80029dc <_GLOBAL__sub_I_SysTickVal+0x180>)
 800289a:	649c      	str	r4, [r3, #72]	@ 0x48
 800289c:	4950      	ldr	r1, [pc, #320]	@ (80029e0 <_GLOBAL__sub_I_SysTickVal+0x184>)
 800289e:	64d9      	str	r1, [r3, #76]	@ 0x4c
 80028a0:	4950      	ldr	r1, [pc, #320]	@ (80029e4 <_GLOBAL__sub_I_SysTickVal+0x188>)
 80028a2:	6519      	str	r1, [r3, #80]	@ 0x50
 80028a4:	270d      	movs	r7, #13
 80028a6:	f883 7054 	strb.w	r7, [r3, #84]	@ 0x54
 80028aa:	6599      	str	r1, [r3, #88]	@ 0x58
 80028ac:	2705      	movs	r7, #5
 80028ae:	f883 705c 	strb.w	r7, [r3, #92]	@ 0x5c
 80028b2:	6619      	str	r1, [r3, #96]	@ 0x60
 80028b4:	f04f 0906 	mov.w	r9, #6
 80028b8:	f883 9064 	strb.w	r9, [r3, #100]	@ 0x64
 80028bc:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68
 80028c0:	f883 606c 	strb.w	r6, [r3, #108]	@ 0x6c
 80028c4:	f8c3 e070 	str.w	lr, [r3, #112]	@ 0x70
 80028c8:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
 80028cc:	f8c3 c078 	str.w	ip, [r3, #120]	@ 0x78
 80028d0:	f8a3 507c 	strh.w	r5, [r3, #124]	@ 0x7c
 80028d4:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
 80028d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80028dc:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
 80028e0:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
 80028e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80028e8:	f8c3 4094 	str.w	r4, [r3, #148]	@ 0x94
 80028ec:	4f3e      	ldr	r7, [pc, #248]	@ (80029e8 <_GLOBAL__sub_I_SysTickVal+0x18c>)
 80028ee:	f8c3 7098 	str.w	r7, [r3, #152]	@ 0x98
 80028f2:	f8c3 109c 	str.w	r1, [r3, #156]	@ 0x9c
 80028f6:	270e      	movs	r7, #14
 80028f8:	f883 70a0 	strb.w	r7, [r3, #160]	@ 0xa0
 80028fc:	f8c3 10a4 	str.w	r1, [r3, #164]	@ 0xa4
 8002900:	2703      	movs	r7, #3
 8002902:	f883 70a8 	strb.w	r7, [r3, #168]	@ 0xa8
 8002906:	f8c3 10ac 	str.w	r1, [r3, #172]	@ 0xac
 800290a:	2704      	movs	r7, #4
 800290c:	f883 70b0 	strb.w	r7, [r3, #176]	@ 0xb0
 8002910:	edc3 7a2d 	vstr	s15, [r3, #180]	@ 0xb4
 8002914:	f883 60b8 	strb.w	r6, [r3, #184]	@ 0xb8
 8002918:	f8c3 e0bc 	str.w	lr, [r3, #188]	@ 0xbc
 800291c:	f8a3 20c0 	strh.w	r2, [r3, #192]	@ 0xc0
 8002920:	f8c3 c0c4 	str.w	ip, [r3, #196]	@ 0xc4
 8002924:	f8a3 50c8 	strh.w	r5, [r3, #200]	@ 0xc8
 8002928:	f8c3 00cc 	str.w	r0, [r3, #204]	@ 0xcc
 800292c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8002930:	f8c3 00d4 	str.w	r0, [r3, #212]	@ 0xd4
 8002934:	f883 20d8 	strb.w	r2, [r3, #216]	@ 0xd8
 8002938:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
 800293c:	3408      	adds	r4, #8
 800293e:	f8c3 40e0 	str.w	r4, [r3, #224]	@ 0xe0
 8002942:	4f2a      	ldr	r7, [pc, #168]	@ (80029ec <_GLOBAL__sub_I_SysTickVal+0x190>)
 8002944:	f8c3 70e4 	str.w	r7, [r3, #228]	@ 0xe4
 8002948:	f8c3 10e8 	str.w	r1, [r3, #232]	@ 0xe8
 800294c:	f04f 080f 	mov.w	r8, #15
 8002950:	f883 80ec 	strb.w	r8, [r3, #236]	@ 0xec
 8002954:	4f26      	ldr	r7, [pc, #152]	@ (80029f0 <_GLOBAL__sub_I_SysTickVal+0x194>)
 8002956:	f8c3 70f0 	str.w	r7, [r3, #240]	@ 0xf0
 800295a:	f04f 0a0a 	mov.w	sl, #10
 800295e:	f883 a0f4 	strb.w	sl, [r3, #244]	@ 0xf4
 8002962:	f8c3 70f8 	str.w	r7, [r3, #248]	@ 0xf8
 8002966:	f04f 0a0c 	mov.w	sl, #12
 800296a:	f883 a0fc 	strb.w	sl, [r3, #252]	@ 0xfc
 800296e:	edc3 7a40 	vstr	s15, [r3, #256]	@ 0x100
 8002972:	f883 6104 	strb.w	r6, [r3, #260]	@ 0x104
 8002976:	f8c3 e108 	str.w	lr, [r3, #264]	@ 0x108
 800297a:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
 800297e:	f8c3 c110 	str.w	ip, [r3, #272]	@ 0x110
 8002982:	f8a3 5114 	strh.w	r5, [r3, #276]	@ 0x114
 8002986:	f8c3 0118 	str.w	r0, [r3, #280]	@ 0x118
 800298a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
 800298e:	f8c3 0120 	str.w	r0, [r3, #288]	@ 0x120
 8002992:	f883 2124 	strb.w	r2, [r3, #292]	@ 0x124
 8002996:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
 800299a:	f8c3 412c 	str.w	r4, [r3, #300]	@ 0x12c
 800299e:	4a15      	ldr	r2, [pc, #84]	@ (80029f4 <_GLOBAL__sub_I_SysTickVal+0x198>)
 80029a0:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
 80029a4:	f8c3 7134 	str.w	r7, [r3, #308]	@ 0x134
 80029a8:	f883 9138 	strb.w	r9, [r3, #312]	@ 0x138
 80029ac:	f8c3 113c 	str.w	r1, [r3, #316]	@ 0x13c
 80029b0:	f883 a140 	strb.w	sl, [r3, #320]	@ 0x140
 80029b4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80029b8:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
 80029bc:	f883 8148 	strb.w	r8, [r3, #328]	@ 0x148
USBHandler usb;
 80029c0:	4c0d      	ldr	r4, [pc, #52]	@ (80029f8 <_GLOBAL__sub_I_SysTickVal+0x19c>)
 80029c2:	4620      	mov	r0, r4
 80029c4:	f7ff feaa 	bl	800271c <_ZN10USBHandlerC1Ev>
SerialHandler serial(usb);
 80029c8:	4621      	mov	r1, r4
 80029ca:	480c      	ldr	r0, [pc, #48]	@ (80029fc <_GLOBAL__sub_I_SysTickVal+0x1a0>)
 80029cc:	f7fe fafe 	bl	8000fcc <_ZN13SerialHandlerC1ER10USBHandler>
}
 80029d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029d4:	20000398 	.word	0x20000398
 80029d8:	37aec33e 	.word	0x37aec33e
 80029dc:	200004e8 	.word	0x200004e8
 80029e0:	50000808 	.word	0x50000808
 80029e4:	48000400 	.word	0x48000400
 80029e8:	50000814 	.word	0x50000814
 80029ec:	50001014 	.word	0x50001014
 80029f0:	48000800 	.word	0x48000800
 80029f4:	50001008 	.word	0x50001008
 80029f8:	20000214 	.word	0x20000214
 80029fc:	200001f0 	.word	0x200001f0
 8002a00:	44480000 	.word	0x44480000
 8002a04:	457ff000 	.word	0x457ff000

08002a08 <_GLOBAL__sub_D_SysTickVal>:
 8002a08:	b508      	push	{r3, lr}
      { _M_dispose(); }
 8002a0a:	4805      	ldr	r0, [pc, #20]	@ (8002a20 <_GLOBAL__sub_D_SysTickVal+0x18>)
 8002a0c:	f000 fa3e 	bl	8002e8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
      if (_M_manager)
 8002a10:	4b04      	ldr	r3, [pc, #16]	@ (8002a24 <_GLOBAL__sub_D_SysTickVal+0x1c>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	b11b      	cbz	r3, 8002a1e <_GLOBAL__sub_D_SysTickVal+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8002a16:	4803      	ldr	r0, [pc, #12]	@ (8002a24 <_GLOBAL__sub_D_SysTickVal+0x1c>)
 8002a18:	2203      	movs	r2, #3
 8002a1a:	4601      	mov	r1, r0
 8002a1c:	4798      	blx	r3
 8002a1e:	bd08      	pop	{r3, pc}
 8002a20:	200001f8 	.word	0x200001f8
 8002a24:	20000214 	.word	0x20000214

08002a28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a28:	480d      	ldr	r0, [pc, #52]	@ (8002a60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a2a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a2c:	480d      	ldr	r0, [pc, #52]	@ (8002a64 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a2e:	490e      	ldr	r1, [pc, #56]	@ (8002a68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a30:	4a0e      	ldr	r2, [pc, #56]	@ (8002a6c <LoopForever+0xe>)
  movs r3, #0
 8002a32:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002a34:	e002      	b.n	8002a3c <LoopCopyDataInit>

08002a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a3a:	3304      	adds	r3, #4

08002a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a40:	d3f9      	bcc.n	8002a36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a42:	4a0b      	ldr	r2, [pc, #44]	@ (8002a70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a44:	4c0b      	ldr	r4, [pc, #44]	@ (8002a74 <LoopForever+0x16>)
  movs r3, #0
 8002a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a48:	e001      	b.n	8002a4e <LoopFillZerobss>

08002a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a4c:	3204      	adds	r2, #4

08002a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a50:	d3fb      	bcc.n	8002a4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a52:	f000 f8d9 	bl	8002c08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a56:	f001 fa8d 	bl	8003f74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a5a:	f7ff fec5 	bl	80027e8 <main>

08002a5e <LoopForever>:

LoopForever:
    b LoopForever
 8002a5e:	e7fe      	b.n	8002a5e <LoopForever>
  ldr   r0, =_estack
 8002a60:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002a64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a68:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8002a6c:	08006170 	.word	0x08006170
  ldr r2, =_sbss
 8002a70:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8002a74:	200006c0 	.word	0x200006c0

08002a78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a78:	e7fe      	b.n	8002a78 <ADC1_2_IRQHandler>

08002a7a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	af00      	add	r7, sp, #0
	return 1;
 8002a7e:	2301      	movs	r3, #1
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr

08002a8a <_kill>:

int _kill(int pid, int sig)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b082      	sub	sp, #8
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
 8002a92:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a94:	f001 fa68 	bl	8003f68 <__errno>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2216      	movs	r2, #22
 8002a9c:	601a      	str	r2, [r3, #0]
	return -1;
 8002a9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <_exit>:

void _exit (int status)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b082      	sub	sp, #8
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002ab2:	f04f 31ff 	mov.w	r1, #4294967295
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7ff ffe7 	bl	8002a8a <_kill>
	while (1) {}		/* Make sure we hang here */
 8002abc:	bf00      	nop
 8002abe:	e7fd      	b.n	8002abc <_exit+0x12>

08002ac0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002acc:	2300      	movs	r3, #0
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	e00a      	b.n	8002ae8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ad2:	f3af 8000 	nop.w
 8002ad6:	4601      	mov	r1, r0
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	1c5a      	adds	r2, r3, #1
 8002adc:	60ba      	str	r2, [r7, #8]
 8002ade:	b2ca      	uxtb	r2, r1
 8002ae0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	617b      	str	r3, [r7, #20]
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	dbf0      	blt.n	8002ad2 <_read+0x12>
	}

return len;
 8002af0:	687b      	ldr	r3, [r7, #4]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3718      	adds	r7, #24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b086      	sub	sp, #24
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	60f8      	str	r0, [r7, #12]
 8002b02:	60b9      	str	r1, [r7, #8]
 8002b04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b06:	2300      	movs	r3, #0
 8002b08:	617b      	str	r3, [r7, #20]
 8002b0a:	e009      	b.n	8002b20 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	1c5a      	adds	r2, r3, #1
 8002b10:	60ba      	str	r2, [r7, #8]
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	617b      	str	r3, [r7, #20]
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	dbf1      	blt.n	8002b0c <_write+0x12>
	}
	return len;
 8002b28:	687b      	ldr	r3, [r7, #4]
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3718      	adds	r7, #24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <_close>:

int _close(int file)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b083      	sub	sp, #12
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
	return -1;
 8002b3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b083      	sub	sp, #12
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
 8002b52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b5a:	605a      	str	r2, [r3, #4]
	return 0;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr

08002b6a <_isatty>:

int _isatty(int file)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b083      	sub	sp, #12
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
	return 1;
 8002b72:	2301      	movs	r3, #1
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
	return 0;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
	...

08002b9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ba4:	4a14      	ldr	r2, [pc, #80]	@ (8002bf8 <_sbrk+0x5c>)
 8002ba6:	4b15      	ldr	r3, [pc, #84]	@ (8002bfc <_sbrk+0x60>)
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bb0:	4b13      	ldr	r3, [pc, #76]	@ (8002c00 <_sbrk+0x64>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d102      	bne.n	8002bbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bb8:	4b11      	ldr	r3, [pc, #68]	@ (8002c00 <_sbrk+0x64>)
 8002bba:	4a12      	ldr	r2, [pc, #72]	@ (8002c04 <_sbrk+0x68>)
 8002bbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bbe:	4b10      	ldr	r3, [pc, #64]	@ (8002c00 <_sbrk+0x64>)
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d207      	bcs.n	8002bdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bcc:	f001 f9cc 	bl	8003f68 <__errno>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	220c      	movs	r2, #12
 8002bd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bda:	e009      	b.n	8002bf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bdc:	4b08      	ldr	r3, [pc, #32]	@ (8002c00 <_sbrk+0x64>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002be2:	4b07      	ldr	r3, [pc, #28]	@ (8002c00 <_sbrk+0x64>)
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4413      	add	r3, r2
 8002bea:	4a05      	ldr	r2, [pc, #20]	@ (8002c00 <_sbrk+0x64>)
 8002bec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bee:	68fb      	ldr	r3, [r7, #12]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3718      	adds	r7, #24
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	20008000 	.word	0x20008000
 8002bfc:	00000400 	.word	0x00000400
 8002c00:	20000500 	.word	0x20000500
 8002c04:	200006c0 	.word	0x200006c0

08002c08 <SystemInit>:
 * @param  None
 * @retval None
 */

void SystemInit(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002c0c:	4b06      	ldr	r3, [pc, #24]	@ (8002c28 <SystemInit+0x20>)
 8002c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c12:	4a05      	ldr	r2, [pc, #20]	@ (8002c28 <SystemInit+0x20>)
 8002c14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

	/* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
	SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c1c:	bf00      	nop
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	e000ed00 	.word	0xe000ed00

08002c2c <SystemCoreClockUpdate>:
 *
 * @param  None
 * @retval None
 */
void SystemCoreClockUpdate(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b087      	sub	sp, #28
 8002c30:	af00      	add	r7, sp, #0
	uint32_t tmp, pllvco, pllr, pllsource, pllm;

	/* Get SYSCLK source -------------------------------------------------------*/
	switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c32:	4b2e      	ldr	r3, [pc, #184]	@ (8002cec <SystemCoreClockUpdate+0xc0>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 030c 	and.w	r3, r3, #12
 8002c3a:	2b0c      	cmp	r3, #12
 8002c3c:	d00e      	beq.n	8002c5c <SystemCoreClockUpdate+0x30>
 8002c3e:	2b0c      	cmp	r3, #12
 8002c40:	d83e      	bhi.n	8002cc0 <SystemCoreClockUpdate+0x94>
 8002c42:	2b04      	cmp	r3, #4
 8002c44:	d002      	beq.n	8002c4c <SystemCoreClockUpdate+0x20>
 8002c46:	2b08      	cmp	r3, #8
 8002c48:	d004      	beq.n	8002c54 <SystemCoreClockUpdate+0x28>
		pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25) + 1U) * 2U;
		SystemCoreClock = pllvco/pllr;
		break;

	default:
		break;
 8002c4a:	e039      	b.n	8002cc0 <SystemCoreClockUpdate+0x94>
		SystemCoreClock = HSI_VALUE;
 8002c4c:	4b28      	ldr	r3, [pc, #160]	@ (8002cf0 <SystemCoreClockUpdate+0xc4>)
 8002c4e:	4a29      	ldr	r2, [pc, #164]	@ (8002cf4 <SystemCoreClockUpdate+0xc8>)
 8002c50:	601a      	str	r2, [r3, #0]
		break;
 8002c52:	e036      	b.n	8002cc2 <SystemCoreClockUpdate+0x96>
		SystemCoreClock = HSE_VALUE;
 8002c54:	4b26      	ldr	r3, [pc, #152]	@ (8002cf0 <SystemCoreClockUpdate+0xc4>)
 8002c56:	4a28      	ldr	r2, [pc, #160]	@ (8002cf8 <SystemCoreClockUpdate+0xcc>)
 8002c58:	601a      	str	r2, [r3, #0]
		break;
 8002c5a:	e032      	b.n	8002cc2 <SystemCoreClockUpdate+0x96>
		pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002c5c:	4b23      	ldr	r3, [pc, #140]	@ (8002cec <SystemCoreClockUpdate+0xc0>)
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f003 0303 	and.w	r3, r3, #3
 8002c64:	613b      	str	r3, [r7, #16]
		pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4) + 1U ;
 8002c66:	4b21      	ldr	r3, [pc, #132]	@ (8002cec <SystemCoreClockUpdate+0xc0>)
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	091b      	lsrs	r3, r3, #4
 8002c6c:	f003 030f 	and.w	r3, r3, #15
 8002c70:	3301      	adds	r3, #1
 8002c72:	60fb      	str	r3, [r7, #12]
		if (pllsource == 0x02UL) /* HSI used as PLL clock source */
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d105      	bne.n	8002c86 <SystemCoreClockUpdate+0x5a>
			pllvco = (HSI_VALUE / pllm);
 8002c7a:	4a1e      	ldr	r2, [pc, #120]	@ (8002cf4 <SystemCoreClockUpdate+0xc8>)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c82:	617b      	str	r3, [r7, #20]
 8002c84:	e004      	b.n	8002c90 <SystemCoreClockUpdate+0x64>
			pllvco = (HSE_VALUE / pllm);
 8002c86:	4a1c      	ldr	r2, [pc, #112]	@ (8002cf8 <SystemCoreClockUpdate+0xcc>)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8e:	617b      	str	r3, [r7, #20]
		pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8);
 8002c90:	4b16      	ldr	r3, [pc, #88]	@ (8002cec <SystemCoreClockUpdate+0xc0>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	0a1b      	lsrs	r3, r3, #8
 8002c96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	fb02 f303 	mul.w	r3, r2, r3
 8002ca0:	617b      	str	r3, [r7, #20]
		pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25) + 1U) * 2U;
 8002ca2:	4b12      	ldr	r3, [pc, #72]	@ (8002cec <SystemCoreClockUpdate+0xc0>)
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	0e5b      	lsrs	r3, r3, #25
 8002ca8:	f003 0303 	and.w	r3, r3, #3
 8002cac:	3301      	adds	r3, #1
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	60bb      	str	r3, [r7, #8]
		SystemCoreClock = pllvco/pllr;
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cba:	4a0d      	ldr	r2, [pc, #52]	@ (8002cf0 <SystemCoreClockUpdate+0xc4>)
 8002cbc:	6013      	str	r3, [r2, #0]
		break;
 8002cbe:	e000      	b.n	8002cc2 <SystemCoreClockUpdate+0x96>
		break;
 8002cc0:	bf00      	nop
	}
	/* Compute HCLK clock frequency --------------------------------------------*/
	/* Get HCLK prescaler */
	tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8002cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8002cec <SystemCoreClockUpdate+0xc0>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	091b      	lsrs	r3, r3, #4
 8002cc8:	f003 030f 	and.w	r3, r3, #15
 8002ccc:	4a0b      	ldr	r2, [pc, #44]	@ (8002cfc <SystemCoreClockUpdate+0xd0>)
 8002cce:	5cd3      	ldrb	r3, [r2, r3]
 8002cd0:	607b      	str	r3, [r7, #4]
	/* HCLK clock frequency */
	SystemCoreClock >>= tmp;
 8002cd2:	4b07      	ldr	r3, [pc, #28]	@ (8002cf0 <SystemCoreClockUpdate+0xc4>)
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8002cdc:	4a04      	ldr	r2, [pc, #16]	@ (8002cf0 <SystemCoreClockUpdate+0xc4>)
 8002cde:	6013      	str	r3, [r2, #0]
}
 8002ce0:	bf00      	nop
 8002ce2:	371c      	adds	r7, #28
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	20000004 	.word	0x20000004
 8002cf4:	00f42400 	.word	0x00f42400
 8002cf8:	007a1200 	.word	0x007a1200
 8002cfc:	08005da0 	.word	0x08005da0

08002d00 <_Z8InitUartv>:
// Manages communication to ST Link debugger UART
void InitUart() {
	// MODER 00: Input mode, 01: General purpose output mode, 10: Alternate function mode, 11: Analog mode (reset state)

	// PC4 USART1_TX, PC5 USART1_RX [PA3 RX USART2_RX]
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;			// reset and clock control - advanced high performance bus - GPIO port C
 8002d00:	4b21      	ldr	r3, [pc, #132]	@ (8002d88 <_Z8InitUartv+0x88>)
 8002d02:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002d04:	f042 0204 	orr.w	r2, r2, #4
 8002d08:	64da      	str	r2, [r3, #76]	@ 0x4c
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8002d0a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002d0c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d10:	661a      	str	r2, [r3, #96]	@ 0x60

//	GPIOC->MODER &= ~GPIO_MODER_MODER4_1;			// configure PC4 test out
//	GPIOC->MODER &= ~GPIO_MODER_MODER5_1;			// configure PC5 test out

	GPIOC->MODER &= ~GPIO_MODER_MODE4_0;			// Set alternate function on PC4
 8002d12:	4a1e      	ldr	r2, [pc, #120]	@ (8002d8c <_Z8InitUartv+0x8c>)
 8002d14:	6813      	ldr	r3, [r2, #0]
 8002d16:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d1a:	6013      	str	r3, [r2, #0]
	GPIOC->AFR[0] |= 7 << GPIO_AFRL_AFSEL4_Pos;		// Alternate function for USART1_TX is AF7
 8002d1c:	6a13      	ldr	r3, [r2, #32]
 8002d1e:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8002d22:	6213      	str	r3, [r2, #32]
	GPIOC->MODER &= ~GPIO_MODER_MODE5_0;			// Set alternate function on PC5
 8002d24:	6813      	ldr	r3, [r2, #0]
 8002d26:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002d2a:	6013      	str	r3, [r2, #0]
	GPIOC->AFR[0] |= 7 << GPIO_AFRL_AFSEL5_Pos;		// Alternate function for USART1_RX is AF7
 8002d2c:	6a13      	ldr	r3, [r2, #32]
 8002d2e:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8002d32:	6213      	str	r3, [r2, #32]

	// By default clock source is muxed to peripheral clock 2 which is system clock (change clock source in RCC->CCIPR1)
	// Calculations depended on oversampling mode set in CR1 OVER8. Default = 0: Oversampling by 16
	int USARTDIV = (SystemCoreClock) / 230400;		//clk / desired_baud
 8002d34:	4b16      	ldr	r3, [pc, #88]	@ (8002d90 <_Z8InitUartv+0x90>)
 8002d36:	6819      	ldr	r1, [r3, #0]
 8002d38:	4b16      	ldr	r3, [pc, #88]	@ (8002d94 <_Z8InitUartv+0x94>)
 8002d3a:	fba3 3101 	umull	r3, r1, r3, r1
 8002d3e:	0c49      	lsrs	r1, r1, #17
	USART1->BRR = USARTDIV & ~8;					// BRR[3] must not be set
 8002d40:	f021 0108 	bic.w	r1, r1, #8
 8002d44:	4b14      	ldr	r3, [pc, #80]	@ (8002d98 <_Z8InitUartv+0x98>)
 8002d46:	60d9      	str	r1, [r3, #12]
	USART1->CR1 &= ~USART_CR1_M;					// 0: 1 Start bit, 8 Data bits, n Stop bit; 	1: 1 Start bit, 9 Data bits, n Stop bit
 8002d48:	6819      	ldr	r1, [r3, #0]
 8002d4a:	f021 2110 	bic.w	r1, r1, #268439552	@ 0x10001000
 8002d4e:	6019      	str	r1, [r3, #0]
	USART1->CR1 |= USART_CR1_RE;					// Receive enable
 8002d50:	6819      	ldr	r1, [r3, #0]
 8002d52:	f041 0104 	orr.w	r1, r1, #4
 8002d56:	6019      	str	r1, [r3, #0]
	USART1->CR1 |= USART_CR1_TE;					// Transmitter enable
 8002d58:	6819      	ldr	r1, [r3, #0]
 8002d5a:	f041 0108 	orr.w	r1, r1, #8
 8002d5e:	6019      	str	r1, [r3, #0]

	// Set up interrupts
	USART1->CR1 |= USART_CR1_RXNEIE;
 8002d60:	6819      	ldr	r1, [r3, #0]
 8002d62:	f041 0120 	orr.w	r1, r1, #32
 8002d66:	6019      	str	r1, [r3, #0]
 8002d68:	490c      	ldr	r1, [pc, #48]	@ (8002d9c <_Z8InitUartv+0x9c>)
 8002d6a:	2030      	movs	r0, #48	@ 0x30
 8002d6c:	f881 0325 	strb.w	r0, [r1, #805]	@ 0x325
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d70:	2020      	movs	r0, #32
 8002d72:	6048      	str	r0, [r1, #4]
	NVIC_SetPriority(USART1_IRQn, 3);				// Lower is higher priority
	NVIC_EnableIRQ(USART1_IRQn);

	USART1->CR1 |= USART_CR1_UE;					// USART Enable
 8002d74:	6819      	ldr	r1, [r3, #0]
 8002d76:	f041 0101 	orr.w	r1, r1, #1
 8002d7a:	6019      	str	r1, [r3, #0]

	// configure PC13 user button on nucleo board
	GPIOC->MODER &= ~GPIO_MODER_MODE13_Msk;
 8002d7c:	6813      	ldr	r3, [r2, #0]
 8002d7e:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8002d82:	6013      	str	r3, [r2, #0]

}
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	48000800 	.word	0x48000800
 8002d90:	20000004 	.word	0x20000004
 8002d94:	91a2b3c5 	.word	0x91a2b3c5
 8002d98:	40013800 	.word	0x40013800
 8002d9c:	e000e100 	.word	0xe000e100

08002da0 <USART1_IRQHandler>:

extern "C" {

// USART Decoder
void USART1_IRQHandler() {
	if (!uartCmdRdy) {
 8002da0:	4b0e      	ldr	r3, [pc, #56]	@ (8002ddc <USART1_IRQHandler+0x3c>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	b993      	cbnz	r3, 8002dcc <USART1_IRQHandler+0x2c>
		uartCmd[uartCmdPos] = USART1->RDR; 				// accessing RDR automatically resets the receive flag
 8002da6:	4b0e      	ldr	r3, [pc, #56]	@ (8002de0 <USART1_IRQHandler+0x40>)
 8002da8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	480d      	ldr	r0, [pc, #52]	@ (8002de4 <USART1_IRQHandler+0x44>)
 8002dae:	7803      	ldrb	r3, [r0, #0]
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	490d      	ldr	r1, [pc, #52]	@ (8002de8 <USART1_IRQHandler+0x48>)
 8002db4:	54ca      	strb	r2, [r1, r3]
		if (uartCmd[uartCmdPos] == 10) {
 8002db6:	7803      	ldrb	r3, [r0, #0]
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	5ccb      	ldrb	r3, [r1, r3]
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b0a      	cmp	r3, #10
 8002dc0:	d005      	beq.n	8002dce <USART1_IRQHandler+0x2e>
			uartCmdRdy = true;
			uartCmdPos = 0;
		} else {
			uartCmdPos++;
 8002dc2:	4a08      	ldr	r2, [pc, #32]	@ (8002de4 <USART1_IRQHandler+0x44>)
 8002dc4:	7813      	ldrb	r3, [r2, #0]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	7013      	strb	r3, [r2, #0]
		}
	}
}
 8002dcc:	4770      	bx	lr
			uartCmdRdy = true;
 8002dce:	4b03      	ldr	r3, [pc, #12]	@ (8002ddc <USART1_IRQHandler+0x3c>)
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	701a      	strb	r2, [r3, #0]
			uartCmdPos = 0;
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	7002      	strb	r2, [r0, #0]
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	20000504 	.word	0x20000504
 8002de0:	40013800 	.word	0x40013800
 8002de4:	2000056c 	.word	0x2000056c
 8002de8:	20000508 	.word	0x20000508

08002dec <_ZdlPvj>:
 8002dec:	f000 b999 	b.w	8003122 <_ZdlPv>

08002df0 <_Znwj>:
 8002df0:	2801      	cmp	r0, #1
 8002df2:	bf38      	it	cc
 8002df4:	2001      	movcc	r0, #1
 8002df6:	b510      	push	{r4, lr}
 8002df8:	4604      	mov	r4, r0
 8002dfa:	4620      	mov	r0, r4
 8002dfc:	f000 f9c8 	bl	8003190 <malloc>
 8002e00:	b100      	cbz	r0, 8002e04 <_Znwj+0x14>
 8002e02:	bd10      	pop	{r4, pc}
 8002e04:	f000 f990 	bl	8003128 <_ZSt15get_new_handlerv>
 8002e08:	b908      	cbnz	r0, 8002e0e <_Znwj+0x1e>
 8002e0a:	f000 f9b9 	bl	8003180 <abort>
 8002e0e:	4780      	blx	r0
 8002e10:	e7f3      	b.n	8002dfa <_Znwj+0xa>

08002e12 <_ZSt17__throw_bad_allocv>:
 8002e12:	b508      	push	{r3, lr}
 8002e14:	f000 f9b4 	bl	8003180 <abort>

08002e18 <_ZSt19__throw_logic_errorPKc>:
 8002e18:	b508      	push	{r3, lr}
 8002e1a:	f000 f9b1 	bl	8003180 <abort>

08002e1e <_ZSt20__throw_length_errorPKc>:
 8002e1e:	b508      	push	{r3, lr}
 8002e20:	f000 f9ae 	bl	8003180 <abort>

08002e24 <_ZSt25__throw_bad_function_callv>:
 8002e24:	b508      	push	{r3, lr}
 8002e26:	f000 f9ab 	bl	8003180 <abort>

08002e2a <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8002e2a:	b10a      	cbz	r2, 8002e30 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8002e2c:	f001 b8c9 	b.w	8003fc2 <memcpy>
 8002e30:	4770      	bx	lr

08002e32 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 8002e32:	b10a      	cbz	r2, 8002e38 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 8002e34:	f000 bfc7 	b.w	8003dc6 <memcmp>
 8002e38:	4610      	mov	r0, r2
 8002e3a:	4770      	bx	lr

08002e3c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 8002e3c:	f850 3b08 	ldr.w	r3, [r0], #8
 8002e40:	1a1b      	subs	r3, r3, r0
 8002e42:	4258      	negs	r0, r3
 8002e44:	4158      	adcs	r0, r3
 8002e46:	4770      	bx	lr

08002e48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8002e48:	b508      	push	{r3, lr}
 8002e4a:	680b      	ldr	r3, [r1, #0]
 8002e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e50:	d302      	bcc.n	8002e58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8002e52:	480d      	ldr	r0, [pc, #52]	@ (8002e88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8002e54:	f7ff ffe3 	bl	8002e1e <_ZSt20__throw_length_errorPKc>
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d90b      	bls.n	8002e74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8002e5c:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8002e60:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8002e64:	d206      	bcs.n	8002e74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8002e66:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002e6a:	bf2a      	itet	cs
 8002e6c:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 8002e70:	6008      	strcc	r0, [r1, #0]
 8002e72:	600b      	strcs	r3, [r1, #0]
 8002e74:	6808      	ldr	r0, [r1, #0]
 8002e76:	3001      	adds	r0, #1
 8002e78:	d501      	bpl.n	8002e7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8002e7a:	f7ff ffca 	bl	8002e12 <_ZSt17__throw_bad_allocv>
 8002e7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002e82:	f7ff bfb5 	b.w	8002df0 <_Znwj>
 8002e86:	bf00      	nop
 8002e88:	08005db0 	.word	0x08005db0

08002e8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8002e8c:	b510      	push	{r4, lr}
 8002e8e:	4604      	mov	r4, r0
 8002e90:	f7ff ffd4 	bl	8002e3c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8002e94:	b920      	cbnz	r0, 8002ea0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 8002e96:	6820      	ldr	r0, [r4, #0]
 8002e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e9c:	f000 b941 	b.w	8003122 <_ZdlPv>
 8002ea0:	bd10      	pop	{r4, pc}

08002ea2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8002ea2:	6840      	ldr	r0, [r0, #4]
 8002ea4:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8002ea8:	3901      	subs	r1, #1
 8002eaa:	1a09      	subs	r1, r1, r0
 8002eac:	4291      	cmp	r1, r2
 8002eae:	b508      	push	{r3, lr}
 8002eb0:	d202      	bcs.n	8002eb8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7ff ffb3 	bl	8002e1e <_ZSt20__throw_length_errorPKc>
 8002eb8:	bd08      	pop	{r3, pc}

08002eba <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 8002eba:	6803      	ldr	r3, [r0, #0]
 8002ebc:	428b      	cmp	r3, r1
 8002ebe:	d806      	bhi.n	8002ece <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 8002ec0:	6842      	ldr	r2, [r0, #4]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	4299      	cmp	r1, r3
 8002ec6:	bf94      	ite	ls
 8002ec8:	2000      	movls	r0, #0
 8002eca:	2001      	movhi	r0, #1
 8002ecc:	4770      	bx	lr
 8002ece:	2001      	movs	r0, #1
 8002ed0:	4770      	bx	lr

08002ed2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8002ed2:	2a01      	cmp	r2, #1
 8002ed4:	b410      	push	{r4}
 8002ed6:	d104      	bne.n	8002ee2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 8002ed8:	780a      	ldrb	r2, [r1, #0]
 8002eda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ede:	7002      	strb	r2, [r0, #0]
 8002ee0:	4770      	bx	lr
 8002ee2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ee6:	f7ff bfa0 	b.w	8002e2a <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

08002eea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8002eea:	2a01      	cmp	r2, #1
 8002eec:	b430      	push	{r4, r5}
 8002eee:	d103      	bne.n	8002ef8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8002ef0:	780b      	ldrb	r3, [r1, #0]
 8002ef2:	7003      	strb	r3, [r0, #0]
 8002ef4:	bc30      	pop	{r4, r5}
 8002ef6:	4770      	bx	lr
 8002ef8:	2a00      	cmp	r2, #0
 8002efa:	d0fb      	beq.n	8002ef4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8002efc:	bc30      	pop	{r4, r5}
 8002efe:	f000 bf72 	b.w	8003de6 <memmove>

08002f02 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 8002f02:	b510      	push	{r4, lr}
 8002f04:	4604      	mov	r4, r0
 8002f06:	f7ff ff99 	bl	8002e3c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8002f0a:	b908      	cbnz	r0, 8002f10 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xe>
 8002f0c:	68a0      	ldr	r0, [r4, #8]
 8002f0e:	bd10      	pop	{r4, pc}
 8002f10:	200f      	movs	r0, #15
 8002f12:	e7fc      	b.n	8002f0e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xc>

08002f14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8002f14:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f18:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8002f1a:	461f      	mov	r7, r3
 8002f1c:	6843      	ldr	r3, [r0, #4]
 8002f1e:	eb01 0802 	add.w	r8, r1, r2
 8002f22:	1ab2      	subs	r2, r6, r2
 8002f24:	441a      	add	r2, r3
 8002f26:	4604      	mov	r4, r0
 8002f28:	460d      	mov	r5, r1
 8002f2a:	eba3 0908 	sub.w	r9, r3, r8
 8002f2e:	9201      	str	r2, [sp, #4]
 8002f30:	f7ff ffe7 	bl	8002f02 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8002f34:	a901      	add	r1, sp, #4
 8002f36:	4602      	mov	r2, r0
 8002f38:	4620      	mov	r0, r4
 8002f3a:	f7ff ff85 	bl	8002e48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8002f3e:	4682      	mov	sl, r0
 8002f40:	b11d      	cbz	r5, 8002f4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x36>
 8002f42:	6821      	ldr	r1, [r4, #0]
 8002f44:	462a      	mov	r2, r5
 8002f46:	f7ff ffc4 	bl	8002ed2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8002f4a:	b137      	cbz	r7, 8002f5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 8002f4c:	b12e      	cbz	r6, 8002f5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 8002f4e:	4632      	mov	r2, r6
 8002f50:	4639      	mov	r1, r7
 8002f52:	eb0a 0005 	add.w	r0, sl, r5
 8002f56:	f7ff ffbc 	bl	8002ed2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8002f5a:	f1b9 0f00 	cmp.w	r9, #0
 8002f5e:	d007      	beq.n	8002f70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x5c>
 8002f60:	6821      	ldr	r1, [r4, #0]
 8002f62:	4435      	add	r5, r6
 8002f64:	464a      	mov	r2, r9
 8002f66:	4441      	add	r1, r8
 8002f68:	eb0a 0005 	add.w	r0, sl, r5
 8002f6c:	f7ff ffb1 	bl	8002ed2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8002f70:	4620      	mov	r0, r4
 8002f72:	f7ff ff8b 	bl	8002e8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8002f76:	9b01      	ldr	r3, [sp, #4]
 8002f78:	f8c4 a000 	str.w	sl, [r4]
 8002f7c:	60a3      	str	r3, [r4, #8]
 8002f7e:	b002      	add	sp, #8
 8002f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002f84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>:
 8002f84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002f86:	4604      	mov	r4, r0
 8002f88:	9101      	str	r1, [sp, #4]
 8002f8a:	f7ff ffba 	bl	8002f02 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8002f8e:	9b01      	ldr	r3, [sp, #4]
 8002f90:	4283      	cmp	r3, r0
 8002f92:	4602      	mov	r2, r0
 8002f94:	d90f      	bls.n	8002fb6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x32>
 8002f96:	a901      	add	r1, sp, #4
 8002f98:	4620      	mov	r0, r4
 8002f9a:	f7ff ff55 	bl	8002e48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8002f9e:	6862      	ldr	r2, [r4, #4]
 8002fa0:	6821      	ldr	r1, [r4, #0]
 8002fa2:	3201      	adds	r2, #1
 8002fa4:	4605      	mov	r5, r0
 8002fa6:	f7ff ff94 	bl	8002ed2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8002faa:	4620      	mov	r0, r4
 8002fac:	f7ff ff6e 	bl	8002e8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8002fb0:	9b01      	ldr	r3, [sp, #4]
 8002fb2:	6025      	str	r5, [r4, #0]
 8002fb4:	60a3      	str	r3, [r4, #8]
 8002fb6:	b003      	add	sp, #12
 8002fb8:	bd30      	pop	{r4, r5, pc}
	...

08002fbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 8002fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fc0:	b085      	sub	sp, #20
 8002fc2:	4680      	mov	r8, r0
 8002fc4:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8002fc6:	4614      	mov	r4, r2
 8002fc8:	4689      	mov	r9, r1
 8002fca:	462a      	mov	r2, r5
 8002fcc:	4621      	mov	r1, r4
 8002fce:	461f      	mov	r7, r3
 8002fd0:	4b37      	ldr	r3, [pc, #220]	@ (80030b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf4>)
 8002fd2:	f7ff ff66 	bl	8002ea2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8002fd6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002fda:	9303      	str	r3, [sp, #12]
 8002fdc:	eba5 0b04 	sub.w	fp, r5, r4
 8002fe0:	4640      	mov	r0, r8
 8002fe2:	eb03 0a0b 	add.w	sl, r3, fp
 8002fe6:	f7ff ff8c 	bl	8002f02 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8002fea:	4550      	cmp	r0, sl
 8002fec:	d354      	bcc.n	8003098 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xdc>
 8002fee:	f8d8 6000 	ldr.w	r6, [r8]
 8002ff2:	9b03      	ldr	r3, [sp, #12]
 8002ff4:	444e      	add	r6, r9
 8002ff6:	4639      	mov	r1, r7
 8002ff8:	44a1      	add	r9, r4
 8002ffa:	4640      	mov	r0, r8
 8002ffc:	eba3 0909 	sub.w	r9, r3, r9
 8003000:	f7ff ff5b 	bl	8002eba <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 8003004:	b180      	cbz	r0, 8003028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6c>
 8003006:	f1b9 0f00 	cmp.w	r9, #0
 800300a:	d006      	beq.n	800301a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5e>
 800300c:	42ac      	cmp	r4, r5
 800300e:	d004      	beq.n	800301a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5e>
 8003010:	464a      	mov	r2, r9
 8003012:	1931      	adds	r1, r6, r4
 8003014:	1970      	adds	r0, r6, r5
 8003016:	f7ff ff68 	bl	8002eea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800301a:	b315      	cbz	r5, 8003062 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 800301c:	462a      	mov	r2, r5
 800301e:	4639      	mov	r1, r7
 8003020:	4630      	mov	r0, r6
 8003022:	f7ff ff56 	bl	8002ed2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8003026:	e01c      	b.n	8003062 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8003028:	b135      	cbz	r5, 8003038 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7c>
 800302a:	42ac      	cmp	r4, r5
 800302c:	d33c      	bcc.n	80030a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xec>
 800302e:	462a      	mov	r2, r5
 8003030:	4639      	mov	r1, r7
 8003032:	4630      	mov	r0, r6
 8003034:	f7ff ff59 	bl	8002eea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8003038:	f1b9 0f00 	cmp.w	r9, #0
 800303c:	d011      	beq.n	8003062 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 800303e:	42ac      	cmp	r4, r5
 8003040:	d00f      	beq.n	8003062 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8003042:	464a      	mov	r2, r9
 8003044:	1931      	adds	r1, r6, r4
 8003046:	1970      	adds	r0, r6, r5
 8003048:	f7ff ff4f 	bl	8002eea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800304c:	42ac      	cmp	r4, r5
 800304e:	d208      	bcs.n	8003062 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8003050:	4434      	add	r4, r6
 8003052:	197b      	adds	r3, r7, r5
 8003054:	429c      	cmp	r4, r3
 8003056:	d30f      	bcc.n	8003078 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbc>
 8003058:	462a      	mov	r2, r5
 800305a:	4639      	mov	r1, r7
 800305c:	4630      	mov	r0, r6
 800305e:	f7ff ff44 	bl	8002eea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8003062:	f8d8 3000 	ldr.w	r3, [r8]
 8003066:	f8c8 a004 	str.w	sl, [r8, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	4640      	mov	r0, r8
 800306e:	f803 200a 	strb.w	r2, [r3, sl]
 8003072:	b005      	add	sp, #20
 8003074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003078:	42bc      	cmp	r4, r7
 800307a:	d803      	bhi.n	8003084 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc8>
 800307c:	462a      	mov	r2, r5
 800307e:	eb07 010b 	add.w	r1, r7, fp
 8003082:	e7cd      	b.n	8003020 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x64>
 8003084:	1be4      	subs	r4, r4, r7
 8003086:	4622      	mov	r2, r4
 8003088:	4639      	mov	r1, r7
 800308a:	4630      	mov	r0, r6
 800308c:	f7ff ff2d 	bl	8002eea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8003090:	1b2a      	subs	r2, r5, r4
 8003092:	1971      	adds	r1, r6, r5
 8003094:	1930      	adds	r0, r6, r4
 8003096:	e7c4      	b.n	8003022 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 8003098:	9500      	str	r5, [sp, #0]
 800309a:	463b      	mov	r3, r7
 800309c:	4622      	mov	r2, r4
 800309e:	4649      	mov	r1, r9
 80030a0:	4640      	mov	r0, r8
 80030a2:	f7ff ff37 	bl	8002f14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80030a6:	e7dc      	b.n	8003062 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 80030a8:	f1b9 0f00 	cmp.w	r9, #0
 80030ac:	d0d0      	beq.n	8003050 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x94>
 80030ae:	e7c8      	b.n	8003042 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x86>
 80030b0:	08005dc8 	.word	0x08005dc8

080030b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 80030b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80030b8:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80030bc:	4604      	mov	r4, r0
 80030be:	eb02 0708 	add.w	r7, r2, r8
 80030c2:	460e      	mov	r6, r1
 80030c4:	4615      	mov	r5, r2
 80030c6:	f7ff ff1c 	bl	8002f02 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 80030ca:	42b8      	cmp	r0, r7
 80030cc:	d30e      	bcc.n	80030ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x38>
 80030ce:	b12d      	cbz	r5, 80030dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x28>
 80030d0:	6820      	ldr	r0, [r4, #0]
 80030d2:	462a      	mov	r2, r5
 80030d4:	4631      	mov	r1, r6
 80030d6:	4440      	add	r0, r8
 80030d8:	f7ff fefb 	bl	8002ed2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80030dc:	6823      	ldr	r3, [r4, #0]
 80030de:	6067      	str	r7, [r4, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	4620      	mov	r0, r4
 80030e4:	55da      	strb	r2, [r3, r7]
 80030e6:	b002      	add	sp, #8
 80030e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030ec:	9500      	str	r5, [sp, #0]
 80030ee:	4633      	mov	r3, r6
 80030f0:	2200      	movs	r2, #0
 80030f2:	4641      	mov	r1, r8
 80030f4:	4620      	mov	r0, r4
 80030f6:	f7ff ff0d 	bl	8002f14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80030fa:	e7ef      	b.n	80030dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x28>

080030fc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>:
 80030fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030fe:	6847      	ldr	r7, [r0, #4]
 8003100:	4605      	mov	r5, r0
 8003102:	4608      	mov	r0, r1
 8003104:	460e      	mov	r6, r1
 8003106:	f7fd f8db 	bl	80002c0 <strlen>
 800310a:	4287      	cmp	r7, r0
 800310c:	4604      	mov	r4, r0
 800310e:	463a      	mov	r2, r7
 8003110:	4631      	mov	r1, r6
 8003112:	bf28      	it	cs
 8003114:	4602      	movcs	r2, r0
 8003116:	6828      	ldr	r0, [r5, #0]
 8003118:	f7ff fe8b 	bl	8002e32 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 800311c:	b900      	cbnz	r0, 8003120 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x24>
 800311e:	1b38      	subs	r0, r7, r4
 8003120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003122 <_ZdlPv>:
 8003122:	f000 b83d 	b.w	80031a0 <free>
	...

08003128 <_ZSt15get_new_handlerv>:
 8003128:	4b02      	ldr	r3, [pc, #8]	@ (8003134 <_ZSt15get_new_handlerv+0xc>)
 800312a:	6818      	ldr	r0, [r3, #0]
 800312c:	f3bf 8f5b 	dmb	ish
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	20000570 	.word	0x20000570

08003138 <roundf>:
 8003138:	ee10 0a10 	vmov	r0, s0
 800313c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8003140:	3a7f      	subs	r2, #127	@ 0x7f
 8003142:	2a16      	cmp	r2, #22
 8003144:	dc15      	bgt.n	8003172 <roundf+0x3a>
 8003146:	2a00      	cmp	r2, #0
 8003148:	da08      	bge.n	800315c <roundf+0x24>
 800314a:	3201      	adds	r2, #1
 800314c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8003150:	d101      	bne.n	8003156 <roundf+0x1e>
 8003152:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 8003156:	ee00 3a10 	vmov	s0, r3
 800315a:	4770      	bx	lr
 800315c:	4907      	ldr	r1, [pc, #28]	@ (800317c <roundf+0x44>)
 800315e:	4111      	asrs	r1, r2
 8003160:	4201      	tst	r1, r0
 8003162:	d0fa      	beq.n	800315a <roundf+0x22>
 8003164:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003168:	4113      	asrs	r3, r2
 800316a:	4403      	add	r3, r0
 800316c:	ea23 0301 	bic.w	r3, r3, r1
 8003170:	e7f1      	b.n	8003156 <roundf+0x1e>
 8003172:	2a80      	cmp	r2, #128	@ 0x80
 8003174:	d1f1      	bne.n	800315a <roundf+0x22>
 8003176:	ee30 0a00 	vadd.f32	s0, s0, s0
 800317a:	4770      	bx	lr
 800317c:	007fffff 	.word	0x007fffff

08003180 <abort>:
 8003180:	b508      	push	{r3, lr}
 8003182:	2006      	movs	r0, #6
 8003184:	f000 fe7a 	bl	8003e7c <raise>
 8003188:	2001      	movs	r0, #1
 800318a:	f7ff fc8e 	bl	8002aaa <_exit>
	...

08003190 <malloc>:
 8003190:	4b02      	ldr	r3, [pc, #8]	@ (800319c <malloc+0xc>)
 8003192:	4601      	mov	r1, r0
 8003194:	6818      	ldr	r0, [r3, #0]
 8003196:	f000 b82d 	b.w	80031f4 <_malloc_r>
 800319a:	bf00      	nop
 800319c:	20000180 	.word	0x20000180

080031a0 <free>:
 80031a0:	4b02      	ldr	r3, [pc, #8]	@ (80031ac <free+0xc>)
 80031a2:	4601      	mov	r1, r0
 80031a4:	6818      	ldr	r0, [r3, #0]
 80031a6:	f001 bd67 	b.w	8004c78 <_free_r>
 80031aa:	bf00      	nop
 80031ac:	20000180 	.word	0x20000180

080031b0 <sbrk_aligned>:
 80031b0:	b570      	push	{r4, r5, r6, lr}
 80031b2:	4e0f      	ldr	r6, [pc, #60]	@ (80031f0 <sbrk_aligned+0x40>)
 80031b4:	460c      	mov	r4, r1
 80031b6:	6831      	ldr	r1, [r6, #0]
 80031b8:	4605      	mov	r5, r0
 80031ba:	b911      	cbnz	r1, 80031c2 <sbrk_aligned+0x12>
 80031bc:	f000 feb2 	bl	8003f24 <_sbrk_r>
 80031c0:	6030      	str	r0, [r6, #0]
 80031c2:	4621      	mov	r1, r4
 80031c4:	4628      	mov	r0, r5
 80031c6:	f000 fead 	bl	8003f24 <_sbrk_r>
 80031ca:	1c43      	adds	r3, r0, #1
 80031cc:	d103      	bne.n	80031d6 <sbrk_aligned+0x26>
 80031ce:	f04f 34ff 	mov.w	r4, #4294967295
 80031d2:	4620      	mov	r0, r4
 80031d4:	bd70      	pop	{r4, r5, r6, pc}
 80031d6:	1cc4      	adds	r4, r0, #3
 80031d8:	f024 0403 	bic.w	r4, r4, #3
 80031dc:	42a0      	cmp	r0, r4
 80031de:	d0f8      	beq.n	80031d2 <sbrk_aligned+0x22>
 80031e0:	1a21      	subs	r1, r4, r0
 80031e2:	4628      	mov	r0, r5
 80031e4:	f000 fe9e 	bl	8003f24 <_sbrk_r>
 80031e8:	3001      	adds	r0, #1
 80031ea:	d1f2      	bne.n	80031d2 <sbrk_aligned+0x22>
 80031ec:	e7ef      	b.n	80031ce <sbrk_aligned+0x1e>
 80031ee:	bf00      	nop
 80031f0:	20000574 	.word	0x20000574

080031f4 <_malloc_r>:
 80031f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031f8:	1ccd      	adds	r5, r1, #3
 80031fa:	f025 0503 	bic.w	r5, r5, #3
 80031fe:	3508      	adds	r5, #8
 8003200:	2d0c      	cmp	r5, #12
 8003202:	bf38      	it	cc
 8003204:	250c      	movcc	r5, #12
 8003206:	2d00      	cmp	r5, #0
 8003208:	4606      	mov	r6, r0
 800320a:	db01      	blt.n	8003210 <_malloc_r+0x1c>
 800320c:	42a9      	cmp	r1, r5
 800320e:	d904      	bls.n	800321a <_malloc_r+0x26>
 8003210:	230c      	movs	r3, #12
 8003212:	6033      	str	r3, [r6, #0]
 8003214:	2000      	movs	r0, #0
 8003216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800321a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80032f0 <_malloc_r+0xfc>
 800321e:	f000 f869 	bl	80032f4 <__malloc_lock>
 8003222:	f8d8 3000 	ldr.w	r3, [r8]
 8003226:	461c      	mov	r4, r3
 8003228:	bb44      	cbnz	r4, 800327c <_malloc_r+0x88>
 800322a:	4629      	mov	r1, r5
 800322c:	4630      	mov	r0, r6
 800322e:	f7ff ffbf 	bl	80031b0 <sbrk_aligned>
 8003232:	1c43      	adds	r3, r0, #1
 8003234:	4604      	mov	r4, r0
 8003236:	d158      	bne.n	80032ea <_malloc_r+0xf6>
 8003238:	f8d8 4000 	ldr.w	r4, [r8]
 800323c:	4627      	mov	r7, r4
 800323e:	2f00      	cmp	r7, #0
 8003240:	d143      	bne.n	80032ca <_malloc_r+0xd6>
 8003242:	2c00      	cmp	r4, #0
 8003244:	d04b      	beq.n	80032de <_malloc_r+0xea>
 8003246:	6823      	ldr	r3, [r4, #0]
 8003248:	4639      	mov	r1, r7
 800324a:	4630      	mov	r0, r6
 800324c:	eb04 0903 	add.w	r9, r4, r3
 8003250:	f000 fe68 	bl	8003f24 <_sbrk_r>
 8003254:	4581      	cmp	r9, r0
 8003256:	d142      	bne.n	80032de <_malloc_r+0xea>
 8003258:	6821      	ldr	r1, [r4, #0]
 800325a:	1a6d      	subs	r5, r5, r1
 800325c:	4629      	mov	r1, r5
 800325e:	4630      	mov	r0, r6
 8003260:	f7ff ffa6 	bl	80031b0 <sbrk_aligned>
 8003264:	3001      	adds	r0, #1
 8003266:	d03a      	beq.n	80032de <_malloc_r+0xea>
 8003268:	6823      	ldr	r3, [r4, #0]
 800326a:	442b      	add	r3, r5
 800326c:	6023      	str	r3, [r4, #0]
 800326e:	f8d8 3000 	ldr.w	r3, [r8]
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	bb62      	cbnz	r2, 80032d0 <_malloc_r+0xdc>
 8003276:	f8c8 7000 	str.w	r7, [r8]
 800327a:	e00f      	b.n	800329c <_malloc_r+0xa8>
 800327c:	6822      	ldr	r2, [r4, #0]
 800327e:	1b52      	subs	r2, r2, r5
 8003280:	d420      	bmi.n	80032c4 <_malloc_r+0xd0>
 8003282:	2a0b      	cmp	r2, #11
 8003284:	d917      	bls.n	80032b6 <_malloc_r+0xc2>
 8003286:	1961      	adds	r1, r4, r5
 8003288:	42a3      	cmp	r3, r4
 800328a:	6025      	str	r5, [r4, #0]
 800328c:	bf18      	it	ne
 800328e:	6059      	strne	r1, [r3, #4]
 8003290:	6863      	ldr	r3, [r4, #4]
 8003292:	bf08      	it	eq
 8003294:	f8c8 1000 	streq.w	r1, [r8]
 8003298:	5162      	str	r2, [r4, r5]
 800329a:	604b      	str	r3, [r1, #4]
 800329c:	4630      	mov	r0, r6
 800329e:	f000 f82f 	bl	8003300 <__malloc_unlock>
 80032a2:	f104 000b 	add.w	r0, r4, #11
 80032a6:	1d23      	adds	r3, r4, #4
 80032a8:	f020 0007 	bic.w	r0, r0, #7
 80032ac:	1ac2      	subs	r2, r0, r3
 80032ae:	bf1c      	itt	ne
 80032b0:	1a1b      	subne	r3, r3, r0
 80032b2:	50a3      	strne	r3, [r4, r2]
 80032b4:	e7af      	b.n	8003216 <_malloc_r+0x22>
 80032b6:	6862      	ldr	r2, [r4, #4]
 80032b8:	42a3      	cmp	r3, r4
 80032ba:	bf0c      	ite	eq
 80032bc:	f8c8 2000 	streq.w	r2, [r8]
 80032c0:	605a      	strne	r2, [r3, #4]
 80032c2:	e7eb      	b.n	800329c <_malloc_r+0xa8>
 80032c4:	4623      	mov	r3, r4
 80032c6:	6864      	ldr	r4, [r4, #4]
 80032c8:	e7ae      	b.n	8003228 <_malloc_r+0x34>
 80032ca:	463c      	mov	r4, r7
 80032cc:	687f      	ldr	r7, [r7, #4]
 80032ce:	e7b6      	b.n	800323e <_malloc_r+0x4a>
 80032d0:	461a      	mov	r2, r3
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	42a3      	cmp	r3, r4
 80032d6:	d1fb      	bne.n	80032d0 <_malloc_r+0xdc>
 80032d8:	2300      	movs	r3, #0
 80032da:	6053      	str	r3, [r2, #4]
 80032dc:	e7de      	b.n	800329c <_malloc_r+0xa8>
 80032de:	230c      	movs	r3, #12
 80032e0:	6033      	str	r3, [r6, #0]
 80032e2:	4630      	mov	r0, r6
 80032e4:	f000 f80c 	bl	8003300 <__malloc_unlock>
 80032e8:	e794      	b.n	8003214 <_malloc_r+0x20>
 80032ea:	6005      	str	r5, [r0, #0]
 80032ec:	e7d6      	b.n	800329c <_malloc_r+0xa8>
 80032ee:	bf00      	nop
 80032f0:	20000578 	.word	0x20000578

080032f4 <__malloc_lock>:
 80032f4:	4801      	ldr	r0, [pc, #4]	@ (80032fc <__malloc_lock+0x8>)
 80032f6:	f000 be62 	b.w	8003fbe <__retarget_lock_acquire_recursive>
 80032fa:	bf00      	nop
 80032fc:	200006bc 	.word	0x200006bc

08003300 <__malloc_unlock>:
 8003300:	4801      	ldr	r0, [pc, #4]	@ (8003308 <__malloc_unlock+0x8>)
 8003302:	f000 be5d 	b.w	8003fc0 <__retarget_lock_release_recursive>
 8003306:	bf00      	nop
 8003308:	200006bc 	.word	0x200006bc

0800330c <__cvt>:
 800330c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003310:	ec57 6b10 	vmov	r6, r7, d0
 8003314:	2f00      	cmp	r7, #0
 8003316:	460c      	mov	r4, r1
 8003318:	4619      	mov	r1, r3
 800331a:	463b      	mov	r3, r7
 800331c:	bfbb      	ittet	lt
 800331e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003322:	461f      	movlt	r7, r3
 8003324:	2300      	movge	r3, #0
 8003326:	232d      	movlt	r3, #45	@ 0x2d
 8003328:	700b      	strb	r3, [r1, #0]
 800332a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800332c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003330:	4691      	mov	r9, r2
 8003332:	f023 0820 	bic.w	r8, r3, #32
 8003336:	bfbc      	itt	lt
 8003338:	4632      	movlt	r2, r6
 800333a:	4616      	movlt	r6, r2
 800333c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003340:	d005      	beq.n	800334e <__cvt+0x42>
 8003342:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003346:	d100      	bne.n	800334a <__cvt+0x3e>
 8003348:	3401      	adds	r4, #1
 800334a:	2102      	movs	r1, #2
 800334c:	e000      	b.n	8003350 <__cvt+0x44>
 800334e:	2103      	movs	r1, #3
 8003350:	ab03      	add	r3, sp, #12
 8003352:	9301      	str	r3, [sp, #4]
 8003354:	ab02      	add	r3, sp, #8
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	ec47 6b10 	vmov	d0, r6, r7
 800335c:	4653      	mov	r3, sl
 800335e:	4622      	mov	r2, r4
 8003360:	f000 fec6 	bl	80040f0 <_dtoa_r>
 8003364:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003368:	4605      	mov	r5, r0
 800336a:	d119      	bne.n	80033a0 <__cvt+0x94>
 800336c:	f019 0f01 	tst.w	r9, #1
 8003370:	d00e      	beq.n	8003390 <__cvt+0x84>
 8003372:	eb00 0904 	add.w	r9, r0, r4
 8003376:	2200      	movs	r2, #0
 8003378:	2300      	movs	r3, #0
 800337a:	4630      	mov	r0, r6
 800337c:	4639      	mov	r1, r7
 800337e:	f7fd fbcb 	bl	8000b18 <__aeabi_dcmpeq>
 8003382:	b108      	cbz	r0, 8003388 <__cvt+0x7c>
 8003384:	f8cd 900c 	str.w	r9, [sp, #12]
 8003388:	2230      	movs	r2, #48	@ 0x30
 800338a:	9b03      	ldr	r3, [sp, #12]
 800338c:	454b      	cmp	r3, r9
 800338e:	d31e      	bcc.n	80033ce <__cvt+0xc2>
 8003390:	9b03      	ldr	r3, [sp, #12]
 8003392:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003394:	1b5b      	subs	r3, r3, r5
 8003396:	4628      	mov	r0, r5
 8003398:	6013      	str	r3, [r2, #0]
 800339a:	b004      	add	sp, #16
 800339c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033a0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80033a4:	eb00 0904 	add.w	r9, r0, r4
 80033a8:	d1e5      	bne.n	8003376 <__cvt+0x6a>
 80033aa:	7803      	ldrb	r3, [r0, #0]
 80033ac:	2b30      	cmp	r3, #48	@ 0x30
 80033ae:	d10a      	bne.n	80033c6 <__cvt+0xba>
 80033b0:	2200      	movs	r2, #0
 80033b2:	2300      	movs	r3, #0
 80033b4:	4630      	mov	r0, r6
 80033b6:	4639      	mov	r1, r7
 80033b8:	f7fd fbae 	bl	8000b18 <__aeabi_dcmpeq>
 80033bc:	b918      	cbnz	r0, 80033c6 <__cvt+0xba>
 80033be:	f1c4 0401 	rsb	r4, r4, #1
 80033c2:	f8ca 4000 	str.w	r4, [sl]
 80033c6:	f8da 3000 	ldr.w	r3, [sl]
 80033ca:	4499      	add	r9, r3
 80033cc:	e7d3      	b.n	8003376 <__cvt+0x6a>
 80033ce:	1c59      	adds	r1, r3, #1
 80033d0:	9103      	str	r1, [sp, #12]
 80033d2:	701a      	strb	r2, [r3, #0]
 80033d4:	e7d9      	b.n	800338a <__cvt+0x7e>

080033d6 <__exponent>:
 80033d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033d8:	2900      	cmp	r1, #0
 80033da:	bfba      	itte	lt
 80033dc:	4249      	neglt	r1, r1
 80033de:	232d      	movlt	r3, #45	@ 0x2d
 80033e0:	232b      	movge	r3, #43	@ 0x2b
 80033e2:	2909      	cmp	r1, #9
 80033e4:	7002      	strb	r2, [r0, #0]
 80033e6:	7043      	strb	r3, [r0, #1]
 80033e8:	dd29      	ble.n	800343e <__exponent+0x68>
 80033ea:	f10d 0307 	add.w	r3, sp, #7
 80033ee:	461d      	mov	r5, r3
 80033f0:	270a      	movs	r7, #10
 80033f2:	461a      	mov	r2, r3
 80033f4:	fbb1 f6f7 	udiv	r6, r1, r7
 80033f8:	fb07 1416 	mls	r4, r7, r6, r1
 80033fc:	3430      	adds	r4, #48	@ 0x30
 80033fe:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003402:	460c      	mov	r4, r1
 8003404:	2c63      	cmp	r4, #99	@ 0x63
 8003406:	f103 33ff 	add.w	r3, r3, #4294967295
 800340a:	4631      	mov	r1, r6
 800340c:	dcf1      	bgt.n	80033f2 <__exponent+0x1c>
 800340e:	3130      	adds	r1, #48	@ 0x30
 8003410:	1e94      	subs	r4, r2, #2
 8003412:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003416:	1c41      	adds	r1, r0, #1
 8003418:	4623      	mov	r3, r4
 800341a:	42ab      	cmp	r3, r5
 800341c:	d30a      	bcc.n	8003434 <__exponent+0x5e>
 800341e:	f10d 0309 	add.w	r3, sp, #9
 8003422:	1a9b      	subs	r3, r3, r2
 8003424:	42ac      	cmp	r4, r5
 8003426:	bf88      	it	hi
 8003428:	2300      	movhi	r3, #0
 800342a:	3302      	adds	r3, #2
 800342c:	4403      	add	r3, r0
 800342e:	1a18      	subs	r0, r3, r0
 8003430:	b003      	add	sp, #12
 8003432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003434:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003438:	f801 6f01 	strb.w	r6, [r1, #1]!
 800343c:	e7ed      	b.n	800341a <__exponent+0x44>
 800343e:	2330      	movs	r3, #48	@ 0x30
 8003440:	3130      	adds	r1, #48	@ 0x30
 8003442:	7083      	strb	r3, [r0, #2]
 8003444:	70c1      	strb	r1, [r0, #3]
 8003446:	1d03      	adds	r3, r0, #4
 8003448:	e7f1      	b.n	800342e <__exponent+0x58>
	...

0800344c <_printf_float>:
 800344c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003450:	b08d      	sub	sp, #52	@ 0x34
 8003452:	460c      	mov	r4, r1
 8003454:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003458:	4616      	mov	r6, r2
 800345a:	461f      	mov	r7, r3
 800345c:	4605      	mov	r5, r0
 800345e:	f000 fd15 	bl	8003e8c <_localeconv_r>
 8003462:	6803      	ldr	r3, [r0, #0]
 8003464:	9304      	str	r3, [sp, #16]
 8003466:	4618      	mov	r0, r3
 8003468:	f7fc ff2a 	bl	80002c0 <strlen>
 800346c:	2300      	movs	r3, #0
 800346e:	930a      	str	r3, [sp, #40]	@ 0x28
 8003470:	f8d8 3000 	ldr.w	r3, [r8]
 8003474:	9005      	str	r0, [sp, #20]
 8003476:	3307      	adds	r3, #7
 8003478:	f023 0307 	bic.w	r3, r3, #7
 800347c:	f103 0208 	add.w	r2, r3, #8
 8003480:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003484:	f8d4 b000 	ldr.w	fp, [r4]
 8003488:	f8c8 2000 	str.w	r2, [r8]
 800348c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003490:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003494:	9307      	str	r3, [sp, #28]
 8003496:	f8cd 8018 	str.w	r8, [sp, #24]
 800349a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800349e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80034a2:	4b9c      	ldr	r3, [pc, #624]	@ (8003714 <_printf_float+0x2c8>)
 80034a4:	f04f 32ff 	mov.w	r2, #4294967295
 80034a8:	f7fd fb68 	bl	8000b7c <__aeabi_dcmpun>
 80034ac:	bb70      	cbnz	r0, 800350c <_printf_float+0xc0>
 80034ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80034b2:	4b98      	ldr	r3, [pc, #608]	@ (8003714 <_printf_float+0x2c8>)
 80034b4:	f04f 32ff 	mov.w	r2, #4294967295
 80034b8:	f7fd fb42 	bl	8000b40 <__aeabi_dcmple>
 80034bc:	bb30      	cbnz	r0, 800350c <_printf_float+0xc0>
 80034be:	2200      	movs	r2, #0
 80034c0:	2300      	movs	r3, #0
 80034c2:	4640      	mov	r0, r8
 80034c4:	4649      	mov	r1, r9
 80034c6:	f7fd fb31 	bl	8000b2c <__aeabi_dcmplt>
 80034ca:	b110      	cbz	r0, 80034d2 <_printf_float+0x86>
 80034cc:	232d      	movs	r3, #45	@ 0x2d
 80034ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80034d2:	4a91      	ldr	r2, [pc, #580]	@ (8003718 <_printf_float+0x2cc>)
 80034d4:	4b91      	ldr	r3, [pc, #580]	@ (800371c <_printf_float+0x2d0>)
 80034d6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80034da:	bf94      	ite	ls
 80034dc:	4690      	movls	r8, r2
 80034de:	4698      	movhi	r8, r3
 80034e0:	2303      	movs	r3, #3
 80034e2:	6123      	str	r3, [r4, #16]
 80034e4:	f02b 0304 	bic.w	r3, fp, #4
 80034e8:	6023      	str	r3, [r4, #0]
 80034ea:	f04f 0900 	mov.w	r9, #0
 80034ee:	9700      	str	r7, [sp, #0]
 80034f0:	4633      	mov	r3, r6
 80034f2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80034f4:	4621      	mov	r1, r4
 80034f6:	4628      	mov	r0, r5
 80034f8:	f000 f9d2 	bl	80038a0 <_printf_common>
 80034fc:	3001      	adds	r0, #1
 80034fe:	f040 808d 	bne.w	800361c <_printf_float+0x1d0>
 8003502:	f04f 30ff 	mov.w	r0, #4294967295
 8003506:	b00d      	add	sp, #52	@ 0x34
 8003508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800350c:	4642      	mov	r2, r8
 800350e:	464b      	mov	r3, r9
 8003510:	4640      	mov	r0, r8
 8003512:	4649      	mov	r1, r9
 8003514:	f7fd fb32 	bl	8000b7c <__aeabi_dcmpun>
 8003518:	b140      	cbz	r0, 800352c <_printf_float+0xe0>
 800351a:	464b      	mov	r3, r9
 800351c:	2b00      	cmp	r3, #0
 800351e:	bfbc      	itt	lt
 8003520:	232d      	movlt	r3, #45	@ 0x2d
 8003522:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003526:	4a7e      	ldr	r2, [pc, #504]	@ (8003720 <_printf_float+0x2d4>)
 8003528:	4b7e      	ldr	r3, [pc, #504]	@ (8003724 <_printf_float+0x2d8>)
 800352a:	e7d4      	b.n	80034d6 <_printf_float+0x8a>
 800352c:	6863      	ldr	r3, [r4, #4]
 800352e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003532:	9206      	str	r2, [sp, #24]
 8003534:	1c5a      	adds	r2, r3, #1
 8003536:	d13b      	bne.n	80035b0 <_printf_float+0x164>
 8003538:	2306      	movs	r3, #6
 800353a:	6063      	str	r3, [r4, #4]
 800353c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003540:	2300      	movs	r3, #0
 8003542:	6022      	str	r2, [r4, #0]
 8003544:	9303      	str	r3, [sp, #12]
 8003546:	ab0a      	add	r3, sp, #40	@ 0x28
 8003548:	e9cd a301 	strd	sl, r3, [sp, #4]
 800354c:	ab09      	add	r3, sp, #36	@ 0x24
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	6861      	ldr	r1, [r4, #4]
 8003552:	ec49 8b10 	vmov	d0, r8, r9
 8003556:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800355a:	4628      	mov	r0, r5
 800355c:	f7ff fed6 	bl	800330c <__cvt>
 8003560:	9b06      	ldr	r3, [sp, #24]
 8003562:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003564:	2b47      	cmp	r3, #71	@ 0x47
 8003566:	4680      	mov	r8, r0
 8003568:	d129      	bne.n	80035be <_printf_float+0x172>
 800356a:	1cc8      	adds	r0, r1, #3
 800356c:	db02      	blt.n	8003574 <_printf_float+0x128>
 800356e:	6863      	ldr	r3, [r4, #4]
 8003570:	4299      	cmp	r1, r3
 8003572:	dd41      	ble.n	80035f8 <_printf_float+0x1ac>
 8003574:	f1aa 0a02 	sub.w	sl, sl, #2
 8003578:	fa5f fa8a 	uxtb.w	sl, sl
 800357c:	3901      	subs	r1, #1
 800357e:	4652      	mov	r2, sl
 8003580:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003584:	9109      	str	r1, [sp, #36]	@ 0x24
 8003586:	f7ff ff26 	bl	80033d6 <__exponent>
 800358a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800358c:	1813      	adds	r3, r2, r0
 800358e:	2a01      	cmp	r2, #1
 8003590:	4681      	mov	r9, r0
 8003592:	6123      	str	r3, [r4, #16]
 8003594:	dc02      	bgt.n	800359c <_printf_float+0x150>
 8003596:	6822      	ldr	r2, [r4, #0]
 8003598:	07d2      	lsls	r2, r2, #31
 800359a:	d501      	bpl.n	80035a0 <_printf_float+0x154>
 800359c:	3301      	adds	r3, #1
 800359e:	6123      	str	r3, [r4, #16]
 80035a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d0a2      	beq.n	80034ee <_printf_float+0xa2>
 80035a8:	232d      	movs	r3, #45	@ 0x2d
 80035aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80035ae:	e79e      	b.n	80034ee <_printf_float+0xa2>
 80035b0:	9a06      	ldr	r2, [sp, #24]
 80035b2:	2a47      	cmp	r2, #71	@ 0x47
 80035b4:	d1c2      	bne.n	800353c <_printf_float+0xf0>
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1c0      	bne.n	800353c <_printf_float+0xf0>
 80035ba:	2301      	movs	r3, #1
 80035bc:	e7bd      	b.n	800353a <_printf_float+0xee>
 80035be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80035c2:	d9db      	bls.n	800357c <_printf_float+0x130>
 80035c4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80035c8:	d118      	bne.n	80035fc <_printf_float+0x1b0>
 80035ca:	2900      	cmp	r1, #0
 80035cc:	6863      	ldr	r3, [r4, #4]
 80035ce:	dd0b      	ble.n	80035e8 <_printf_float+0x19c>
 80035d0:	6121      	str	r1, [r4, #16]
 80035d2:	b913      	cbnz	r3, 80035da <_printf_float+0x18e>
 80035d4:	6822      	ldr	r2, [r4, #0]
 80035d6:	07d0      	lsls	r0, r2, #31
 80035d8:	d502      	bpl.n	80035e0 <_printf_float+0x194>
 80035da:	3301      	adds	r3, #1
 80035dc:	440b      	add	r3, r1
 80035de:	6123      	str	r3, [r4, #16]
 80035e0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80035e2:	f04f 0900 	mov.w	r9, #0
 80035e6:	e7db      	b.n	80035a0 <_printf_float+0x154>
 80035e8:	b913      	cbnz	r3, 80035f0 <_printf_float+0x1a4>
 80035ea:	6822      	ldr	r2, [r4, #0]
 80035ec:	07d2      	lsls	r2, r2, #31
 80035ee:	d501      	bpl.n	80035f4 <_printf_float+0x1a8>
 80035f0:	3302      	adds	r3, #2
 80035f2:	e7f4      	b.n	80035de <_printf_float+0x192>
 80035f4:	2301      	movs	r3, #1
 80035f6:	e7f2      	b.n	80035de <_printf_float+0x192>
 80035f8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80035fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80035fe:	4299      	cmp	r1, r3
 8003600:	db05      	blt.n	800360e <_printf_float+0x1c2>
 8003602:	6823      	ldr	r3, [r4, #0]
 8003604:	6121      	str	r1, [r4, #16]
 8003606:	07d8      	lsls	r0, r3, #31
 8003608:	d5ea      	bpl.n	80035e0 <_printf_float+0x194>
 800360a:	1c4b      	adds	r3, r1, #1
 800360c:	e7e7      	b.n	80035de <_printf_float+0x192>
 800360e:	2900      	cmp	r1, #0
 8003610:	bfd4      	ite	le
 8003612:	f1c1 0202 	rsble	r2, r1, #2
 8003616:	2201      	movgt	r2, #1
 8003618:	4413      	add	r3, r2
 800361a:	e7e0      	b.n	80035de <_printf_float+0x192>
 800361c:	6823      	ldr	r3, [r4, #0]
 800361e:	055a      	lsls	r2, r3, #21
 8003620:	d407      	bmi.n	8003632 <_printf_float+0x1e6>
 8003622:	6923      	ldr	r3, [r4, #16]
 8003624:	4642      	mov	r2, r8
 8003626:	4631      	mov	r1, r6
 8003628:	4628      	mov	r0, r5
 800362a:	47b8      	blx	r7
 800362c:	3001      	adds	r0, #1
 800362e:	d12b      	bne.n	8003688 <_printf_float+0x23c>
 8003630:	e767      	b.n	8003502 <_printf_float+0xb6>
 8003632:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003636:	f240 80dd 	bls.w	80037f4 <_printf_float+0x3a8>
 800363a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800363e:	2200      	movs	r2, #0
 8003640:	2300      	movs	r3, #0
 8003642:	f7fd fa69 	bl	8000b18 <__aeabi_dcmpeq>
 8003646:	2800      	cmp	r0, #0
 8003648:	d033      	beq.n	80036b2 <_printf_float+0x266>
 800364a:	4a37      	ldr	r2, [pc, #220]	@ (8003728 <_printf_float+0x2dc>)
 800364c:	2301      	movs	r3, #1
 800364e:	4631      	mov	r1, r6
 8003650:	4628      	mov	r0, r5
 8003652:	47b8      	blx	r7
 8003654:	3001      	adds	r0, #1
 8003656:	f43f af54 	beq.w	8003502 <_printf_float+0xb6>
 800365a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800365e:	4543      	cmp	r3, r8
 8003660:	db02      	blt.n	8003668 <_printf_float+0x21c>
 8003662:	6823      	ldr	r3, [r4, #0]
 8003664:	07d8      	lsls	r0, r3, #31
 8003666:	d50f      	bpl.n	8003688 <_printf_float+0x23c>
 8003668:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800366c:	4631      	mov	r1, r6
 800366e:	4628      	mov	r0, r5
 8003670:	47b8      	blx	r7
 8003672:	3001      	adds	r0, #1
 8003674:	f43f af45 	beq.w	8003502 <_printf_float+0xb6>
 8003678:	f04f 0900 	mov.w	r9, #0
 800367c:	f108 38ff 	add.w	r8, r8, #4294967295
 8003680:	f104 0a1a 	add.w	sl, r4, #26
 8003684:	45c8      	cmp	r8, r9
 8003686:	dc09      	bgt.n	800369c <_printf_float+0x250>
 8003688:	6823      	ldr	r3, [r4, #0]
 800368a:	079b      	lsls	r3, r3, #30
 800368c:	f100 8103 	bmi.w	8003896 <_printf_float+0x44a>
 8003690:	68e0      	ldr	r0, [r4, #12]
 8003692:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003694:	4298      	cmp	r0, r3
 8003696:	bfb8      	it	lt
 8003698:	4618      	movlt	r0, r3
 800369a:	e734      	b.n	8003506 <_printf_float+0xba>
 800369c:	2301      	movs	r3, #1
 800369e:	4652      	mov	r2, sl
 80036a0:	4631      	mov	r1, r6
 80036a2:	4628      	mov	r0, r5
 80036a4:	47b8      	blx	r7
 80036a6:	3001      	adds	r0, #1
 80036a8:	f43f af2b 	beq.w	8003502 <_printf_float+0xb6>
 80036ac:	f109 0901 	add.w	r9, r9, #1
 80036b0:	e7e8      	b.n	8003684 <_printf_float+0x238>
 80036b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	dc39      	bgt.n	800372c <_printf_float+0x2e0>
 80036b8:	4a1b      	ldr	r2, [pc, #108]	@ (8003728 <_printf_float+0x2dc>)
 80036ba:	2301      	movs	r3, #1
 80036bc:	4631      	mov	r1, r6
 80036be:	4628      	mov	r0, r5
 80036c0:	47b8      	blx	r7
 80036c2:	3001      	adds	r0, #1
 80036c4:	f43f af1d 	beq.w	8003502 <_printf_float+0xb6>
 80036c8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80036cc:	ea59 0303 	orrs.w	r3, r9, r3
 80036d0:	d102      	bne.n	80036d8 <_printf_float+0x28c>
 80036d2:	6823      	ldr	r3, [r4, #0]
 80036d4:	07d9      	lsls	r1, r3, #31
 80036d6:	d5d7      	bpl.n	8003688 <_printf_float+0x23c>
 80036d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80036dc:	4631      	mov	r1, r6
 80036de:	4628      	mov	r0, r5
 80036e0:	47b8      	blx	r7
 80036e2:	3001      	adds	r0, #1
 80036e4:	f43f af0d 	beq.w	8003502 <_printf_float+0xb6>
 80036e8:	f04f 0a00 	mov.w	sl, #0
 80036ec:	f104 0b1a 	add.w	fp, r4, #26
 80036f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80036f2:	425b      	negs	r3, r3
 80036f4:	4553      	cmp	r3, sl
 80036f6:	dc01      	bgt.n	80036fc <_printf_float+0x2b0>
 80036f8:	464b      	mov	r3, r9
 80036fa:	e793      	b.n	8003624 <_printf_float+0x1d8>
 80036fc:	2301      	movs	r3, #1
 80036fe:	465a      	mov	r2, fp
 8003700:	4631      	mov	r1, r6
 8003702:	4628      	mov	r0, r5
 8003704:	47b8      	blx	r7
 8003706:	3001      	adds	r0, #1
 8003708:	f43f aefb 	beq.w	8003502 <_printf_float+0xb6>
 800370c:	f10a 0a01 	add.w	sl, sl, #1
 8003710:	e7ee      	b.n	80036f0 <_printf_float+0x2a4>
 8003712:	bf00      	nop
 8003714:	7fefffff 	.word	0x7fefffff
 8003718:	08005ee2 	.word	0x08005ee2
 800371c:	08005ee6 	.word	0x08005ee6
 8003720:	08005eea 	.word	0x08005eea
 8003724:	08005eee 	.word	0x08005eee
 8003728:	08005ef2 	.word	0x08005ef2
 800372c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800372e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003732:	4553      	cmp	r3, sl
 8003734:	bfa8      	it	ge
 8003736:	4653      	movge	r3, sl
 8003738:	2b00      	cmp	r3, #0
 800373a:	4699      	mov	r9, r3
 800373c:	dc36      	bgt.n	80037ac <_printf_float+0x360>
 800373e:	f04f 0b00 	mov.w	fp, #0
 8003742:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003746:	f104 021a 	add.w	r2, r4, #26
 800374a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800374c:	9306      	str	r3, [sp, #24]
 800374e:	eba3 0309 	sub.w	r3, r3, r9
 8003752:	455b      	cmp	r3, fp
 8003754:	dc31      	bgt.n	80037ba <_printf_float+0x36e>
 8003756:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003758:	459a      	cmp	sl, r3
 800375a:	dc3a      	bgt.n	80037d2 <_printf_float+0x386>
 800375c:	6823      	ldr	r3, [r4, #0]
 800375e:	07da      	lsls	r2, r3, #31
 8003760:	d437      	bmi.n	80037d2 <_printf_float+0x386>
 8003762:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003764:	ebaa 0903 	sub.w	r9, sl, r3
 8003768:	9b06      	ldr	r3, [sp, #24]
 800376a:	ebaa 0303 	sub.w	r3, sl, r3
 800376e:	4599      	cmp	r9, r3
 8003770:	bfa8      	it	ge
 8003772:	4699      	movge	r9, r3
 8003774:	f1b9 0f00 	cmp.w	r9, #0
 8003778:	dc33      	bgt.n	80037e2 <_printf_float+0x396>
 800377a:	f04f 0800 	mov.w	r8, #0
 800377e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003782:	f104 0b1a 	add.w	fp, r4, #26
 8003786:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003788:	ebaa 0303 	sub.w	r3, sl, r3
 800378c:	eba3 0309 	sub.w	r3, r3, r9
 8003790:	4543      	cmp	r3, r8
 8003792:	f77f af79 	ble.w	8003688 <_printf_float+0x23c>
 8003796:	2301      	movs	r3, #1
 8003798:	465a      	mov	r2, fp
 800379a:	4631      	mov	r1, r6
 800379c:	4628      	mov	r0, r5
 800379e:	47b8      	blx	r7
 80037a0:	3001      	adds	r0, #1
 80037a2:	f43f aeae 	beq.w	8003502 <_printf_float+0xb6>
 80037a6:	f108 0801 	add.w	r8, r8, #1
 80037aa:	e7ec      	b.n	8003786 <_printf_float+0x33a>
 80037ac:	4642      	mov	r2, r8
 80037ae:	4631      	mov	r1, r6
 80037b0:	4628      	mov	r0, r5
 80037b2:	47b8      	blx	r7
 80037b4:	3001      	adds	r0, #1
 80037b6:	d1c2      	bne.n	800373e <_printf_float+0x2f2>
 80037b8:	e6a3      	b.n	8003502 <_printf_float+0xb6>
 80037ba:	2301      	movs	r3, #1
 80037bc:	4631      	mov	r1, r6
 80037be:	4628      	mov	r0, r5
 80037c0:	9206      	str	r2, [sp, #24]
 80037c2:	47b8      	blx	r7
 80037c4:	3001      	adds	r0, #1
 80037c6:	f43f ae9c 	beq.w	8003502 <_printf_float+0xb6>
 80037ca:	9a06      	ldr	r2, [sp, #24]
 80037cc:	f10b 0b01 	add.w	fp, fp, #1
 80037d0:	e7bb      	b.n	800374a <_printf_float+0x2fe>
 80037d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80037d6:	4631      	mov	r1, r6
 80037d8:	4628      	mov	r0, r5
 80037da:	47b8      	blx	r7
 80037dc:	3001      	adds	r0, #1
 80037de:	d1c0      	bne.n	8003762 <_printf_float+0x316>
 80037e0:	e68f      	b.n	8003502 <_printf_float+0xb6>
 80037e2:	9a06      	ldr	r2, [sp, #24]
 80037e4:	464b      	mov	r3, r9
 80037e6:	4442      	add	r2, r8
 80037e8:	4631      	mov	r1, r6
 80037ea:	4628      	mov	r0, r5
 80037ec:	47b8      	blx	r7
 80037ee:	3001      	adds	r0, #1
 80037f0:	d1c3      	bne.n	800377a <_printf_float+0x32e>
 80037f2:	e686      	b.n	8003502 <_printf_float+0xb6>
 80037f4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80037f8:	f1ba 0f01 	cmp.w	sl, #1
 80037fc:	dc01      	bgt.n	8003802 <_printf_float+0x3b6>
 80037fe:	07db      	lsls	r3, r3, #31
 8003800:	d536      	bpl.n	8003870 <_printf_float+0x424>
 8003802:	2301      	movs	r3, #1
 8003804:	4642      	mov	r2, r8
 8003806:	4631      	mov	r1, r6
 8003808:	4628      	mov	r0, r5
 800380a:	47b8      	blx	r7
 800380c:	3001      	adds	r0, #1
 800380e:	f43f ae78 	beq.w	8003502 <_printf_float+0xb6>
 8003812:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003816:	4631      	mov	r1, r6
 8003818:	4628      	mov	r0, r5
 800381a:	47b8      	blx	r7
 800381c:	3001      	adds	r0, #1
 800381e:	f43f ae70 	beq.w	8003502 <_printf_float+0xb6>
 8003822:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003826:	2200      	movs	r2, #0
 8003828:	2300      	movs	r3, #0
 800382a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800382e:	f7fd f973 	bl	8000b18 <__aeabi_dcmpeq>
 8003832:	b9c0      	cbnz	r0, 8003866 <_printf_float+0x41a>
 8003834:	4653      	mov	r3, sl
 8003836:	f108 0201 	add.w	r2, r8, #1
 800383a:	4631      	mov	r1, r6
 800383c:	4628      	mov	r0, r5
 800383e:	47b8      	blx	r7
 8003840:	3001      	adds	r0, #1
 8003842:	d10c      	bne.n	800385e <_printf_float+0x412>
 8003844:	e65d      	b.n	8003502 <_printf_float+0xb6>
 8003846:	2301      	movs	r3, #1
 8003848:	465a      	mov	r2, fp
 800384a:	4631      	mov	r1, r6
 800384c:	4628      	mov	r0, r5
 800384e:	47b8      	blx	r7
 8003850:	3001      	adds	r0, #1
 8003852:	f43f ae56 	beq.w	8003502 <_printf_float+0xb6>
 8003856:	f108 0801 	add.w	r8, r8, #1
 800385a:	45d0      	cmp	r8, sl
 800385c:	dbf3      	blt.n	8003846 <_printf_float+0x3fa>
 800385e:	464b      	mov	r3, r9
 8003860:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003864:	e6df      	b.n	8003626 <_printf_float+0x1da>
 8003866:	f04f 0800 	mov.w	r8, #0
 800386a:	f104 0b1a 	add.w	fp, r4, #26
 800386e:	e7f4      	b.n	800385a <_printf_float+0x40e>
 8003870:	2301      	movs	r3, #1
 8003872:	4642      	mov	r2, r8
 8003874:	e7e1      	b.n	800383a <_printf_float+0x3ee>
 8003876:	2301      	movs	r3, #1
 8003878:	464a      	mov	r2, r9
 800387a:	4631      	mov	r1, r6
 800387c:	4628      	mov	r0, r5
 800387e:	47b8      	blx	r7
 8003880:	3001      	adds	r0, #1
 8003882:	f43f ae3e 	beq.w	8003502 <_printf_float+0xb6>
 8003886:	f108 0801 	add.w	r8, r8, #1
 800388a:	68e3      	ldr	r3, [r4, #12]
 800388c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800388e:	1a5b      	subs	r3, r3, r1
 8003890:	4543      	cmp	r3, r8
 8003892:	dcf0      	bgt.n	8003876 <_printf_float+0x42a>
 8003894:	e6fc      	b.n	8003690 <_printf_float+0x244>
 8003896:	f04f 0800 	mov.w	r8, #0
 800389a:	f104 0919 	add.w	r9, r4, #25
 800389e:	e7f4      	b.n	800388a <_printf_float+0x43e>

080038a0 <_printf_common>:
 80038a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038a4:	4616      	mov	r6, r2
 80038a6:	4698      	mov	r8, r3
 80038a8:	688a      	ldr	r2, [r1, #8]
 80038aa:	690b      	ldr	r3, [r1, #16]
 80038ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80038b0:	4293      	cmp	r3, r2
 80038b2:	bfb8      	it	lt
 80038b4:	4613      	movlt	r3, r2
 80038b6:	6033      	str	r3, [r6, #0]
 80038b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80038bc:	4607      	mov	r7, r0
 80038be:	460c      	mov	r4, r1
 80038c0:	b10a      	cbz	r2, 80038c6 <_printf_common+0x26>
 80038c2:	3301      	adds	r3, #1
 80038c4:	6033      	str	r3, [r6, #0]
 80038c6:	6823      	ldr	r3, [r4, #0]
 80038c8:	0699      	lsls	r1, r3, #26
 80038ca:	bf42      	ittt	mi
 80038cc:	6833      	ldrmi	r3, [r6, #0]
 80038ce:	3302      	addmi	r3, #2
 80038d0:	6033      	strmi	r3, [r6, #0]
 80038d2:	6825      	ldr	r5, [r4, #0]
 80038d4:	f015 0506 	ands.w	r5, r5, #6
 80038d8:	d106      	bne.n	80038e8 <_printf_common+0x48>
 80038da:	f104 0a19 	add.w	sl, r4, #25
 80038de:	68e3      	ldr	r3, [r4, #12]
 80038e0:	6832      	ldr	r2, [r6, #0]
 80038e2:	1a9b      	subs	r3, r3, r2
 80038e4:	42ab      	cmp	r3, r5
 80038e6:	dc26      	bgt.n	8003936 <_printf_common+0x96>
 80038e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80038ec:	6822      	ldr	r2, [r4, #0]
 80038ee:	3b00      	subs	r3, #0
 80038f0:	bf18      	it	ne
 80038f2:	2301      	movne	r3, #1
 80038f4:	0692      	lsls	r2, r2, #26
 80038f6:	d42b      	bmi.n	8003950 <_printf_common+0xb0>
 80038f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80038fc:	4641      	mov	r1, r8
 80038fe:	4638      	mov	r0, r7
 8003900:	47c8      	blx	r9
 8003902:	3001      	adds	r0, #1
 8003904:	d01e      	beq.n	8003944 <_printf_common+0xa4>
 8003906:	6823      	ldr	r3, [r4, #0]
 8003908:	6922      	ldr	r2, [r4, #16]
 800390a:	f003 0306 	and.w	r3, r3, #6
 800390e:	2b04      	cmp	r3, #4
 8003910:	bf02      	ittt	eq
 8003912:	68e5      	ldreq	r5, [r4, #12]
 8003914:	6833      	ldreq	r3, [r6, #0]
 8003916:	1aed      	subeq	r5, r5, r3
 8003918:	68a3      	ldr	r3, [r4, #8]
 800391a:	bf0c      	ite	eq
 800391c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003920:	2500      	movne	r5, #0
 8003922:	4293      	cmp	r3, r2
 8003924:	bfc4      	itt	gt
 8003926:	1a9b      	subgt	r3, r3, r2
 8003928:	18ed      	addgt	r5, r5, r3
 800392a:	2600      	movs	r6, #0
 800392c:	341a      	adds	r4, #26
 800392e:	42b5      	cmp	r5, r6
 8003930:	d11a      	bne.n	8003968 <_printf_common+0xc8>
 8003932:	2000      	movs	r0, #0
 8003934:	e008      	b.n	8003948 <_printf_common+0xa8>
 8003936:	2301      	movs	r3, #1
 8003938:	4652      	mov	r2, sl
 800393a:	4641      	mov	r1, r8
 800393c:	4638      	mov	r0, r7
 800393e:	47c8      	blx	r9
 8003940:	3001      	adds	r0, #1
 8003942:	d103      	bne.n	800394c <_printf_common+0xac>
 8003944:	f04f 30ff 	mov.w	r0, #4294967295
 8003948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800394c:	3501      	adds	r5, #1
 800394e:	e7c6      	b.n	80038de <_printf_common+0x3e>
 8003950:	18e1      	adds	r1, r4, r3
 8003952:	1c5a      	adds	r2, r3, #1
 8003954:	2030      	movs	r0, #48	@ 0x30
 8003956:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800395a:	4422      	add	r2, r4
 800395c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003960:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003964:	3302      	adds	r3, #2
 8003966:	e7c7      	b.n	80038f8 <_printf_common+0x58>
 8003968:	2301      	movs	r3, #1
 800396a:	4622      	mov	r2, r4
 800396c:	4641      	mov	r1, r8
 800396e:	4638      	mov	r0, r7
 8003970:	47c8      	blx	r9
 8003972:	3001      	adds	r0, #1
 8003974:	d0e6      	beq.n	8003944 <_printf_common+0xa4>
 8003976:	3601      	adds	r6, #1
 8003978:	e7d9      	b.n	800392e <_printf_common+0x8e>
	...

0800397c <_printf_i>:
 800397c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003980:	7e0f      	ldrb	r7, [r1, #24]
 8003982:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003984:	2f78      	cmp	r7, #120	@ 0x78
 8003986:	4691      	mov	r9, r2
 8003988:	4680      	mov	r8, r0
 800398a:	460c      	mov	r4, r1
 800398c:	469a      	mov	sl, r3
 800398e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003992:	d807      	bhi.n	80039a4 <_printf_i+0x28>
 8003994:	2f62      	cmp	r7, #98	@ 0x62
 8003996:	d80a      	bhi.n	80039ae <_printf_i+0x32>
 8003998:	2f00      	cmp	r7, #0
 800399a:	f000 80d2 	beq.w	8003b42 <_printf_i+0x1c6>
 800399e:	2f58      	cmp	r7, #88	@ 0x58
 80039a0:	f000 80b9 	beq.w	8003b16 <_printf_i+0x19a>
 80039a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80039a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80039ac:	e03a      	b.n	8003a24 <_printf_i+0xa8>
 80039ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80039b2:	2b15      	cmp	r3, #21
 80039b4:	d8f6      	bhi.n	80039a4 <_printf_i+0x28>
 80039b6:	a101      	add	r1, pc, #4	@ (adr r1, 80039bc <_printf_i+0x40>)
 80039b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80039bc:	08003a15 	.word	0x08003a15
 80039c0:	08003a29 	.word	0x08003a29
 80039c4:	080039a5 	.word	0x080039a5
 80039c8:	080039a5 	.word	0x080039a5
 80039cc:	080039a5 	.word	0x080039a5
 80039d0:	080039a5 	.word	0x080039a5
 80039d4:	08003a29 	.word	0x08003a29
 80039d8:	080039a5 	.word	0x080039a5
 80039dc:	080039a5 	.word	0x080039a5
 80039e0:	080039a5 	.word	0x080039a5
 80039e4:	080039a5 	.word	0x080039a5
 80039e8:	08003b29 	.word	0x08003b29
 80039ec:	08003a53 	.word	0x08003a53
 80039f0:	08003ae3 	.word	0x08003ae3
 80039f4:	080039a5 	.word	0x080039a5
 80039f8:	080039a5 	.word	0x080039a5
 80039fc:	08003b4b 	.word	0x08003b4b
 8003a00:	080039a5 	.word	0x080039a5
 8003a04:	08003a53 	.word	0x08003a53
 8003a08:	080039a5 	.word	0x080039a5
 8003a0c:	080039a5 	.word	0x080039a5
 8003a10:	08003aeb 	.word	0x08003aeb
 8003a14:	6833      	ldr	r3, [r6, #0]
 8003a16:	1d1a      	adds	r2, r3, #4
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	6032      	str	r2, [r6, #0]
 8003a1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003a20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003a24:	2301      	movs	r3, #1
 8003a26:	e09d      	b.n	8003b64 <_printf_i+0x1e8>
 8003a28:	6833      	ldr	r3, [r6, #0]
 8003a2a:	6820      	ldr	r0, [r4, #0]
 8003a2c:	1d19      	adds	r1, r3, #4
 8003a2e:	6031      	str	r1, [r6, #0]
 8003a30:	0606      	lsls	r6, r0, #24
 8003a32:	d501      	bpl.n	8003a38 <_printf_i+0xbc>
 8003a34:	681d      	ldr	r5, [r3, #0]
 8003a36:	e003      	b.n	8003a40 <_printf_i+0xc4>
 8003a38:	0645      	lsls	r5, r0, #25
 8003a3a:	d5fb      	bpl.n	8003a34 <_printf_i+0xb8>
 8003a3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003a40:	2d00      	cmp	r5, #0
 8003a42:	da03      	bge.n	8003a4c <_printf_i+0xd0>
 8003a44:	232d      	movs	r3, #45	@ 0x2d
 8003a46:	426d      	negs	r5, r5
 8003a48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a4c:	4859      	ldr	r0, [pc, #356]	@ (8003bb4 <_printf_i+0x238>)
 8003a4e:	230a      	movs	r3, #10
 8003a50:	e011      	b.n	8003a76 <_printf_i+0xfa>
 8003a52:	6821      	ldr	r1, [r4, #0]
 8003a54:	6833      	ldr	r3, [r6, #0]
 8003a56:	0608      	lsls	r0, r1, #24
 8003a58:	f853 5b04 	ldr.w	r5, [r3], #4
 8003a5c:	d402      	bmi.n	8003a64 <_printf_i+0xe8>
 8003a5e:	0649      	lsls	r1, r1, #25
 8003a60:	bf48      	it	mi
 8003a62:	b2ad      	uxthmi	r5, r5
 8003a64:	2f6f      	cmp	r7, #111	@ 0x6f
 8003a66:	4853      	ldr	r0, [pc, #332]	@ (8003bb4 <_printf_i+0x238>)
 8003a68:	6033      	str	r3, [r6, #0]
 8003a6a:	bf14      	ite	ne
 8003a6c:	230a      	movne	r3, #10
 8003a6e:	2308      	moveq	r3, #8
 8003a70:	2100      	movs	r1, #0
 8003a72:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003a76:	6866      	ldr	r6, [r4, #4]
 8003a78:	60a6      	str	r6, [r4, #8]
 8003a7a:	2e00      	cmp	r6, #0
 8003a7c:	bfa2      	ittt	ge
 8003a7e:	6821      	ldrge	r1, [r4, #0]
 8003a80:	f021 0104 	bicge.w	r1, r1, #4
 8003a84:	6021      	strge	r1, [r4, #0]
 8003a86:	b90d      	cbnz	r5, 8003a8c <_printf_i+0x110>
 8003a88:	2e00      	cmp	r6, #0
 8003a8a:	d04b      	beq.n	8003b24 <_printf_i+0x1a8>
 8003a8c:	4616      	mov	r6, r2
 8003a8e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a92:	fb03 5711 	mls	r7, r3, r1, r5
 8003a96:	5dc7      	ldrb	r7, [r0, r7]
 8003a98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a9c:	462f      	mov	r7, r5
 8003a9e:	42bb      	cmp	r3, r7
 8003aa0:	460d      	mov	r5, r1
 8003aa2:	d9f4      	bls.n	8003a8e <_printf_i+0x112>
 8003aa4:	2b08      	cmp	r3, #8
 8003aa6:	d10b      	bne.n	8003ac0 <_printf_i+0x144>
 8003aa8:	6823      	ldr	r3, [r4, #0]
 8003aaa:	07df      	lsls	r7, r3, #31
 8003aac:	d508      	bpl.n	8003ac0 <_printf_i+0x144>
 8003aae:	6923      	ldr	r3, [r4, #16]
 8003ab0:	6861      	ldr	r1, [r4, #4]
 8003ab2:	4299      	cmp	r1, r3
 8003ab4:	bfde      	ittt	le
 8003ab6:	2330      	movle	r3, #48	@ 0x30
 8003ab8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003abc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003ac0:	1b92      	subs	r2, r2, r6
 8003ac2:	6122      	str	r2, [r4, #16]
 8003ac4:	f8cd a000 	str.w	sl, [sp]
 8003ac8:	464b      	mov	r3, r9
 8003aca:	aa03      	add	r2, sp, #12
 8003acc:	4621      	mov	r1, r4
 8003ace:	4640      	mov	r0, r8
 8003ad0:	f7ff fee6 	bl	80038a0 <_printf_common>
 8003ad4:	3001      	adds	r0, #1
 8003ad6:	d14a      	bne.n	8003b6e <_printf_i+0x1f2>
 8003ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8003adc:	b004      	add	sp, #16
 8003ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ae2:	6823      	ldr	r3, [r4, #0]
 8003ae4:	f043 0320 	orr.w	r3, r3, #32
 8003ae8:	6023      	str	r3, [r4, #0]
 8003aea:	4833      	ldr	r0, [pc, #204]	@ (8003bb8 <_printf_i+0x23c>)
 8003aec:	2778      	movs	r7, #120	@ 0x78
 8003aee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003af2:	6823      	ldr	r3, [r4, #0]
 8003af4:	6831      	ldr	r1, [r6, #0]
 8003af6:	061f      	lsls	r7, r3, #24
 8003af8:	f851 5b04 	ldr.w	r5, [r1], #4
 8003afc:	d402      	bmi.n	8003b04 <_printf_i+0x188>
 8003afe:	065f      	lsls	r7, r3, #25
 8003b00:	bf48      	it	mi
 8003b02:	b2ad      	uxthmi	r5, r5
 8003b04:	6031      	str	r1, [r6, #0]
 8003b06:	07d9      	lsls	r1, r3, #31
 8003b08:	bf44      	itt	mi
 8003b0a:	f043 0320 	orrmi.w	r3, r3, #32
 8003b0e:	6023      	strmi	r3, [r4, #0]
 8003b10:	b11d      	cbz	r5, 8003b1a <_printf_i+0x19e>
 8003b12:	2310      	movs	r3, #16
 8003b14:	e7ac      	b.n	8003a70 <_printf_i+0xf4>
 8003b16:	4827      	ldr	r0, [pc, #156]	@ (8003bb4 <_printf_i+0x238>)
 8003b18:	e7e9      	b.n	8003aee <_printf_i+0x172>
 8003b1a:	6823      	ldr	r3, [r4, #0]
 8003b1c:	f023 0320 	bic.w	r3, r3, #32
 8003b20:	6023      	str	r3, [r4, #0]
 8003b22:	e7f6      	b.n	8003b12 <_printf_i+0x196>
 8003b24:	4616      	mov	r6, r2
 8003b26:	e7bd      	b.n	8003aa4 <_printf_i+0x128>
 8003b28:	6833      	ldr	r3, [r6, #0]
 8003b2a:	6825      	ldr	r5, [r4, #0]
 8003b2c:	6961      	ldr	r1, [r4, #20]
 8003b2e:	1d18      	adds	r0, r3, #4
 8003b30:	6030      	str	r0, [r6, #0]
 8003b32:	062e      	lsls	r6, r5, #24
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	d501      	bpl.n	8003b3c <_printf_i+0x1c0>
 8003b38:	6019      	str	r1, [r3, #0]
 8003b3a:	e002      	b.n	8003b42 <_printf_i+0x1c6>
 8003b3c:	0668      	lsls	r0, r5, #25
 8003b3e:	d5fb      	bpl.n	8003b38 <_printf_i+0x1bc>
 8003b40:	8019      	strh	r1, [r3, #0]
 8003b42:	2300      	movs	r3, #0
 8003b44:	6123      	str	r3, [r4, #16]
 8003b46:	4616      	mov	r6, r2
 8003b48:	e7bc      	b.n	8003ac4 <_printf_i+0x148>
 8003b4a:	6833      	ldr	r3, [r6, #0]
 8003b4c:	1d1a      	adds	r2, r3, #4
 8003b4e:	6032      	str	r2, [r6, #0]
 8003b50:	681e      	ldr	r6, [r3, #0]
 8003b52:	6862      	ldr	r2, [r4, #4]
 8003b54:	2100      	movs	r1, #0
 8003b56:	4630      	mov	r0, r6
 8003b58:	f7fc fb62 	bl	8000220 <memchr>
 8003b5c:	b108      	cbz	r0, 8003b62 <_printf_i+0x1e6>
 8003b5e:	1b80      	subs	r0, r0, r6
 8003b60:	6060      	str	r0, [r4, #4]
 8003b62:	6863      	ldr	r3, [r4, #4]
 8003b64:	6123      	str	r3, [r4, #16]
 8003b66:	2300      	movs	r3, #0
 8003b68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b6c:	e7aa      	b.n	8003ac4 <_printf_i+0x148>
 8003b6e:	6923      	ldr	r3, [r4, #16]
 8003b70:	4632      	mov	r2, r6
 8003b72:	4649      	mov	r1, r9
 8003b74:	4640      	mov	r0, r8
 8003b76:	47d0      	blx	sl
 8003b78:	3001      	adds	r0, #1
 8003b7a:	d0ad      	beq.n	8003ad8 <_printf_i+0x15c>
 8003b7c:	6823      	ldr	r3, [r4, #0]
 8003b7e:	079b      	lsls	r3, r3, #30
 8003b80:	d413      	bmi.n	8003baa <_printf_i+0x22e>
 8003b82:	68e0      	ldr	r0, [r4, #12]
 8003b84:	9b03      	ldr	r3, [sp, #12]
 8003b86:	4298      	cmp	r0, r3
 8003b88:	bfb8      	it	lt
 8003b8a:	4618      	movlt	r0, r3
 8003b8c:	e7a6      	b.n	8003adc <_printf_i+0x160>
 8003b8e:	2301      	movs	r3, #1
 8003b90:	4632      	mov	r2, r6
 8003b92:	4649      	mov	r1, r9
 8003b94:	4640      	mov	r0, r8
 8003b96:	47d0      	blx	sl
 8003b98:	3001      	adds	r0, #1
 8003b9a:	d09d      	beq.n	8003ad8 <_printf_i+0x15c>
 8003b9c:	3501      	adds	r5, #1
 8003b9e:	68e3      	ldr	r3, [r4, #12]
 8003ba0:	9903      	ldr	r1, [sp, #12]
 8003ba2:	1a5b      	subs	r3, r3, r1
 8003ba4:	42ab      	cmp	r3, r5
 8003ba6:	dcf2      	bgt.n	8003b8e <_printf_i+0x212>
 8003ba8:	e7eb      	b.n	8003b82 <_printf_i+0x206>
 8003baa:	2500      	movs	r5, #0
 8003bac:	f104 0619 	add.w	r6, r4, #25
 8003bb0:	e7f5      	b.n	8003b9e <_printf_i+0x222>
 8003bb2:	bf00      	nop
 8003bb4:	08005ef4 	.word	0x08005ef4
 8003bb8:	08005f05 	.word	0x08005f05

08003bbc <std>:
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	b510      	push	{r4, lr}
 8003bc0:	4604      	mov	r4, r0
 8003bc2:	e9c0 3300 	strd	r3, r3, [r0]
 8003bc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003bca:	6083      	str	r3, [r0, #8]
 8003bcc:	8181      	strh	r1, [r0, #12]
 8003bce:	6643      	str	r3, [r0, #100]	@ 0x64
 8003bd0:	81c2      	strh	r2, [r0, #14]
 8003bd2:	6183      	str	r3, [r0, #24]
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	2208      	movs	r2, #8
 8003bd8:	305c      	adds	r0, #92	@ 0x5c
 8003bda:	f000 f91e 	bl	8003e1a <memset>
 8003bde:	4b0d      	ldr	r3, [pc, #52]	@ (8003c14 <std+0x58>)
 8003be0:	6263      	str	r3, [r4, #36]	@ 0x24
 8003be2:	4b0d      	ldr	r3, [pc, #52]	@ (8003c18 <std+0x5c>)
 8003be4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003be6:	4b0d      	ldr	r3, [pc, #52]	@ (8003c1c <std+0x60>)
 8003be8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003bea:	4b0d      	ldr	r3, [pc, #52]	@ (8003c20 <std+0x64>)
 8003bec:	6323      	str	r3, [r4, #48]	@ 0x30
 8003bee:	4b0d      	ldr	r3, [pc, #52]	@ (8003c24 <std+0x68>)
 8003bf0:	6224      	str	r4, [r4, #32]
 8003bf2:	429c      	cmp	r4, r3
 8003bf4:	d006      	beq.n	8003c04 <std+0x48>
 8003bf6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003bfa:	4294      	cmp	r4, r2
 8003bfc:	d002      	beq.n	8003c04 <std+0x48>
 8003bfe:	33d0      	adds	r3, #208	@ 0xd0
 8003c00:	429c      	cmp	r4, r3
 8003c02:	d105      	bne.n	8003c10 <std+0x54>
 8003c04:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c0c:	f000 b9d6 	b.w	8003fbc <__retarget_lock_init_recursive>
 8003c10:	bd10      	pop	{r4, pc}
 8003c12:	bf00      	nop
 8003c14:	08003d41 	.word	0x08003d41
 8003c18:	08003d63 	.word	0x08003d63
 8003c1c:	08003d9b 	.word	0x08003d9b
 8003c20:	08003dbf 	.word	0x08003dbf
 8003c24:	2000057c 	.word	0x2000057c

08003c28 <stdio_exit_handler>:
 8003c28:	4a02      	ldr	r2, [pc, #8]	@ (8003c34 <stdio_exit_handler+0xc>)
 8003c2a:	4903      	ldr	r1, [pc, #12]	@ (8003c38 <stdio_exit_handler+0x10>)
 8003c2c:	4803      	ldr	r0, [pc, #12]	@ (8003c3c <stdio_exit_handler+0x14>)
 8003c2e:	f000 b869 	b.w	8003d04 <_fwalk_sglue>
 8003c32:	bf00      	nop
 8003c34:	20000008 	.word	0x20000008
 8003c38:	08005559 	.word	0x08005559
 8003c3c:	20000184 	.word	0x20000184

08003c40 <cleanup_stdio>:
 8003c40:	6841      	ldr	r1, [r0, #4]
 8003c42:	4b0c      	ldr	r3, [pc, #48]	@ (8003c74 <cleanup_stdio+0x34>)
 8003c44:	4299      	cmp	r1, r3
 8003c46:	b510      	push	{r4, lr}
 8003c48:	4604      	mov	r4, r0
 8003c4a:	d001      	beq.n	8003c50 <cleanup_stdio+0x10>
 8003c4c:	f001 fc84 	bl	8005558 <_fflush_r>
 8003c50:	68a1      	ldr	r1, [r4, #8]
 8003c52:	4b09      	ldr	r3, [pc, #36]	@ (8003c78 <cleanup_stdio+0x38>)
 8003c54:	4299      	cmp	r1, r3
 8003c56:	d002      	beq.n	8003c5e <cleanup_stdio+0x1e>
 8003c58:	4620      	mov	r0, r4
 8003c5a:	f001 fc7d 	bl	8005558 <_fflush_r>
 8003c5e:	68e1      	ldr	r1, [r4, #12]
 8003c60:	4b06      	ldr	r3, [pc, #24]	@ (8003c7c <cleanup_stdio+0x3c>)
 8003c62:	4299      	cmp	r1, r3
 8003c64:	d004      	beq.n	8003c70 <cleanup_stdio+0x30>
 8003c66:	4620      	mov	r0, r4
 8003c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c6c:	f001 bc74 	b.w	8005558 <_fflush_r>
 8003c70:	bd10      	pop	{r4, pc}
 8003c72:	bf00      	nop
 8003c74:	2000057c 	.word	0x2000057c
 8003c78:	200005e4 	.word	0x200005e4
 8003c7c:	2000064c 	.word	0x2000064c

08003c80 <global_stdio_init.part.0>:
 8003c80:	b510      	push	{r4, lr}
 8003c82:	4b0b      	ldr	r3, [pc, #44]	@ (8003cb0 <global_stdio_init.part.0+0x30>)
 8003c84:	4c0b      	ldr	r4, [pc, #44]	@ (8003cb4 <global_stdio_init.part.0+0x34>)
 8003c86:	4a0c      	ldr	r2, [pc, #48]	@ (8003cb8 <global_stdio_init.part.0+0x38>)
 8003c88:	601a      	str	r2, [r3, #0]
 8003c8a:	4620      	mov	r0, r4
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	2104      	movs	r1, #4
 8003c90:	f7ff ff94 	bl	8003bbc <std>
 8003c94:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003c98:	2201      	movs	r2, #1
 8003c9a:	2109      	movs	r1, #9
 8003c9c:	f7ff ff8e 	bl	8003bbc <std>
 8003ca0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003ca4:	2202      	movs	r2, #2
 8003ca6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003caa:	2112      	movs	r1, #18
 8003cac:	f7ff bf86 	b.w	8003bbc <std>
 8003cb0:	200006b4 	.word	0x200006b4
 8003cb4:	2000057c 	.word	0x2000057c
 8003cb8:	08003c29 	.word	0x08003c29

08003cbc <__sfp_lock_acquire>:
 8003cbc:	4801      	ldr	r0, [pc, #4]	@ (8003cc4 <__sfp_lock_acquire+0x8>)
 8003cbe:	f000 b97e 	b.w	8003fbe <__retarget_lock_acquire_recursive>
 8003cc2:	bf00      	nop
 8003cc4:	200006bd 	.word	0x200006bd

08003cc8 <__sfp_lock_release>:
 8003cc8:	4801      	ldr	r0, [pc, #4]	@ (8003cd0 <__sfp_lock_release+0x8>)
 8003cca:	f000 b979 	b.w	8003fc0 <__retarget_lock_release_recursive>
 8003cce:	bf00      	nop
 8003cd0:	200006bd 	.word	0x200006bd

08003cd4 <__sinit>:
 8003cd4:	b510      	push	{r4, lr}
 8003cd6:	4604      	mov	r4, r0
 8003cd8:	f7ff fff0 	bl	8003cbc <__sfp_lock_acquire>
 8003cdc:	6a23      	ldr	r3, [r4, #32]
 8003cde:	b11b      	cbz	r3, 8003ce8 <__sinit+0x14>
 8003ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ce4:	f7ff bff0 	b.w	8003cc8 <__sfp_lock_release>
 8003ce8:	4b04      	ldr	r3, [pc, #16]	@ (8003cfc <__sinit+0x28>)
 8003cea:	6223      	str	r3, [r4, #32]
 8003cec:	4b04      	ldr	r3, [pc, #16]	@ (8003d00 <__sinit+0x2c>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1f5      	bne.n	8003ce0 <__sinit+0xc>
 8003cf4:	f7ff ffc4 	bl	8003c80 <global_stdio_init.part.0>
 8003cf8:	e7f2      	b.n	8003ce0 <__sinit+0xc>
 8003cfa:	bf00      	nop
 8003cfc:	08003c41 	.word	0x08003c41
 8003d00:	200006b4 	.word	0x200006b4

08003d04 <_fwalk_sglue>:
 8003d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d08:	4607      	mov	r7, r0
 8003d0a:	4688      	mov	r8, r1
 8003d0c:	4614      	mov	r4, r2
 8003d0e:	2600      	movs	r6, #0
 8003d10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d14:	f1b9 0901 	subs.w	r9, r9, #1
 8003d18:	d505      	bpl.n	8003d26 <_fwalk_sglue+0x22>
 8003d1a:	6824      	ldr	r4, [r4, #0]
 8003d1c:	2c00      	cmp	r4, #0
 8003d1e:	d1f7      	bne.n	8003d10 <_fwalk_sglue+0xc>
 8003d20:	4630      	mov	r0, r6
 8003d22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d26:	89ab      	ldrh	r3, [r5, #12]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d907      	bls.n	8003d3c <_fwalk_sglue+0x38>
 8003d2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d30:	3301      	adds	r3, #1
 8003d32:	d003      	beq.n	8003d3c <_fwalk_sglue+0x38>
 8003d34:	4629      	mov	r1, r5
 8003d36:	4638      	mov	r0, r7
 8003d38:	47c0      	blx	r8
 8003d3a:	4306      	orrs	r6, r0
 8003d3c:	3568      	adds	r5, #104	@ 0x68
 8003d3e:	e7e9      	b.n	8003d14 <_fwalk_sglue+0x10>

08003d40 <__sread>:
 8003d40:	b510      	push	{r4, lr}
 8003d42:	460c      	mov	r4, r1
 8003d44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d48:	f000 f8c6 	bl	8003ed8 <_read_r>
 8003d4c:	2800      	cmp	r0, #0
 8003d4e:	bfab      	itete	ge
 8003d50:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003d52:	89a3      	ldrhlt	r3, [r4, #12]
 8003d54:	181b      	addge	r3, r3, r0
 8003d56:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003d5a:	bfac      	ite	ge
 8003d5c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003d5e:	81a3      	strhlt	r3, [r4, #12]
 8003d60:	bd10      	pop	{r4, pc}

08003d62 <__swrite>:
 8003d62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d66:	461f      	mov	r7, r3
 8003d68:	898b      	ldrh	r3, [r1, #12]
 8003d6a:	05db      	lsls	r3, r3, #23
 8003d6c:	4605      	mov	r5, r0
 8003d6e:	460c      	mov	r4, r1
 8003d70:	4616      	mov	r6, r2
 8003d72:	d505      	bpl.n	8003d80 <__swrite+0x1e>
 8003d74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d78:	2302      	movs	r3, #2
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f000 f89a 	bl	8003eb4 <_lseek_r>
 8003d80:	89a3      	ldrh	r3, [r4, #12]
 8003d82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d8a:	81a3      	strh	r3, [r4, #12]
 8003d8c:	4632      	mov	r2, r6
 8003d8e:	463b      	mov	r3, r7
 8003d90:	4628      	mov	r0, r5
 8003d92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d96:	f000 b8d5 	b.w	8003f44 <_write_r>

08003d9a <__sseek>:
 8003d9a:	b510      	push	{r4, lr}
 8003d9c:	460c      	mov	r4, r1
 8003d9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003da2:	f000 f887 	bl	8003eb4 <_lseek_r>
 8003da6:	1c43      	adds	r3, r0, #1
 8003da8:	89a3      	ldrh	r3, [r4, #12]
 8003daa:	bf15      	itete	ne
 8003dac:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003dae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003db2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003db6:	81a3      	strheq	r3, [r4, #12]
 8003db8:	bf18      	it	ne
 8003dba:	81a3      	strhne	r3, [r4, #12]
 8003dbc:	bd10      	pop	{r4, pc}

08003dbe <__sclose>:
 8003dbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dc2:	f000 b867 	b.w	8003e94 <_close_r>

08003dc6 <memcmp>:
 8003dc6:	b510      	push	{r4, lr}
 8003dc8:	3901      	subs	r1, #1
 8003dca:	4402      	add	r2, r0
 8003dcc:	4290      	cmp	r0, r2
 8003dce:	d101      	bne.n	8003dd4 <memcmp+0xe>
 8003dd0:	2000      	movs	r0, #0
 8003dd2:	e005      	b.n	8003de0 <memcmp+0x1a>
 8003dd4:	7803      	ldrb	r3, [r0, #0]
 8003dd6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003dda:	42a3      	cmp	r3, r4
 8003ddc:	d001      	beq.n	8003de2 <memcmp+0x1c>
 8003dde:	1b18      	subs	r0, r3, r4
 8003de0:	bd10      	pop	{r4, pc}
 8003de2:	3001      	adds	r0, #1
 8003de4:	e7f2      	b.n	8003dcc <memcmp+0x6>

08003de6 <memmove>:
 8003de6:	4288      	cmp	r0, r1
 8003de8:	b510      	push	{r4, lr}
 8003dea:	eb01 0402 	add.w	r4, r1, r2
 8003dee:	d902      	bls.n	8003df6 <memmove+0x10>
 8003df0:	4284      	cmp	r4, r0
 8003df2:	4623      	mov	r3, r4
 8003df4:	d807      	bhi.n	8003e06 <memmove+0x20>
 8003df6:	1e43      	subs	r3, r0, #1
 8003df8:	42a1      	cmp	r1, r4
 8003dfa:	d008      	beq.n	8003e0e <memmove+0x28>
 8003dfc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e00:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e04:	e7f8      	b.n	8003df8 <memmove+0x12>
 8003e06:	4402      	add	r2, r0
 8003e08:	4601      	mov	r1, r0
 8003e0a:	428a      	cmp	r2, r1
 8003e0c:	d100      	bne.n	8003e10 <memmove+0x2a>
 8003e0e:	bd10      	pop	{r4, pc}
 8003e10:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e14:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e18:	e7f7      	b.n	8003e0a <memmove+0x24>

08003e1a <memset>:
 8003e1a:	4402      	add	r2, r0
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d100      	bne.n	8003e24 <memset+0xa>
 8003e22:	4770      	bx	lr
 8003e24:	f803 1b01 	strb.w	r1, [r3], #1
 8003e28:	e7f9      	b.n	8003e1e <memset+0x4>

08003e2a <_raise_r>:
 8003e2a:	291f      	cmp	r1, #31
 8003e2c:	b538      	push	{r3, r4, r5, lr}
 8003e2e:	4605      	mov	r5, r0
 8003e30:	460c      	mov	r4, r1
 8003e32:	d904      	bls.n	8003e3e <_raise_r+0x14>
 8003e34:	2316      	movs	r3, #22
 8003e36:	6003      	str	r3, [r0, #0]
 8003e38:	f04f 30ff 	mov.w	r0, #4294967295
 8003e3c:	bd38      	pop	{r3, r4, r5, pc}
 8003e3e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8003e40:	b112      	cbz	r2, 8003e48 <_raise_r+0x1e>
 8003e42:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003e46:	b94b      	cbnz	r3, 8003e5c <_raise_r+0x32>
 8003e48:	4628      	mov	r0, r5
 8003e4a:	f000 f869 	bl	8003f20 <_getpid_r>
 8003e4e:	4622      	mov	r2, r4
 8003e50:	4601      	mov	r1, r0
 8003e52:	4628      	mov	r0, r5
 8003e54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e58:	f000 b850 	b.w	8003efc <_kill_r>
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d00a      	beq.n	8003e76 <_raise_r+0x4c>
 8003e60:	1c59      	adds	r1, r3, #1
 8003e62:	d103      	bne.n	8003e6c <_raise_r+0x42>
 8003e64:	2316      	movs	r3, #22
 8003e66:	6003      	str	r3, [r0, #0]
 8003e68:	2001      	movs	r0, #1
 8003e6a:	e7e7      	b.n	8003e3c <_raise_r+0x12>
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8003e72:	4620      	mov	r0, r4
 8003e74:	4798      	blx	r3
 8003e76:	2000      	movs	r0, #0
 8003e78:	e7e0      	b.n	8003e3c <_raise_r+0x12>
	...

08003e7c <raise>:
 8003e7c:	4b02      	ldr	r3, [pc, #8]	@ (8003e88 <raise+0xc>)
 8003e7e:	4601      	mov	r1, r0
 8003e80:	6818      	ldr	r0, [r3, #0]
 8003e82:	f7ff bfd2 	b.w	8003e2a <_raise_r>
 8003e86:	bf00      	nop
 8003e88:	20000180 	.word	0x20000180

08003e8c <_localeconv_r>:
 8003e8c:	4800      	ldr	r0, [pc, #0]	@ (8003e90 <_localeconv_r+0x4>)
 8003e8e:	4770      	bx	lr
 8003e90:	20000104 	.word	0x20000104

08003e94 <_close_r>:
 8003e94:	b538      	push	{r3, r4, r5, lr}
 8003e96:	4d06      	ldr	r5, [pc, #24]	@ (8003eb0 <_close_r+0x1c>)
 8003e98:	2300      	movs	r3, #0
 8003e9a:	4604      	mov	r4, r0
 8003e9c:	4608      	mov	r0, r1
 8003e9e:	602b      	str	r3, [r5, #0]
 8003ea0:	f7fe fe47 	bl	8002b32 <_close>
 8003ea4:	1c43      	adds	r3, r0, #1
 8003ea6:	d102      	bne.n	8003eae <_close_r+0x1a>
 8003ea8:	682b      	ldr	r3, [r5, #0]
 8003eaa:	b103      	cbz	r3, 8003eae <_close_r+0x1a>
 8003eac:	6023      	str	r3, [r4, #0]
 8003eae:	bd38      	pop	{r3, r4, r5, pc}
 8003eb0:	200006b8 	.word	0x200006b8

08003eb4 <_lseek_r>:
 8003eb4:	b538      	push	{r3, r4, r5, lr}
 8003eb6:	4d07      	ldr	r5, [pc, #28]	@ (8003ed4 <_lseek_r+0x20>)
 8003eb8:	4604      	mov	r4, r0
 8003eba:	4608      	mov	r0, r1
 8003ebc:	4611      	mov	r1, r2
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	602a      	str	r2, [r5, #0]
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	f7fe fe5c 	bl	8002b80 <_lseek>
 8003ec8:	1c43      	adds	r3, r0, #1
 8003eca:	d102      	bne.n	8003ed2 <_lseek_r+0x1e>
 8003ecc:	682b      	ldr	r3, [r5, #0]
 8003ece:	b103      	cbz	r3, 8003ed2 <_lseek_r+0x1e>
 8003ed0:	6023      	str	r3, [r4, #0]
 8003ed2:	bd38      	pop	{r3, r4, r5, pc}
 8003ed4:	200006b8 	.word	0x200006b8

08003ed8 <_read_r>:
 8003ed8:	b538      	push	{r3, r4, r5, lr}
 8003eda:	4d07      	ldr	r5, [pc, #28]	@ (8003ef8 <_read_r+0x20>)
 8003edc:	4604      	mov	r4, r0
 8003ede:	4608      	mov	r0, r1
 8003ee0:	4611      	mov	r1, r2
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	602a      	str	r2, [r5, #0]
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	f7fe fdea 	bl	8002ac0 <_read>
 8003eec:	1c43      	adds	r3, r0, #1
 8003eee:	d102      	bne.n	8003ef6 <_read_r+0x1e>
 8003ef0:	682b      	ldr	r3, [r5, #0]
 8003ef2:	b103      	cbz	r3, 8003ef6 <_read_r+0x1e>
 8003ef4:	6023      	str	r3, [r4, #0]
 8003ef6:	bd38      	pop	{r3, r4, r5, pc}
 8003ef8:	200006b8 	.word	0x200006b8

08003efc <_kill_r>:
 8003efc:	b538      	push	{r3, r4, r5, lr}
 8003efe:	4d07      	ldr	r5, [pc, #28]	@ (8003f1c <_kill_r+0x20>)
 8003f00:	2300      	movs	r3, #0
 8003f02:	4604      	mov	r4, r0
 8003f04:	4608      	mov	r0, r1
 8003f06:	4611      	mov	r1, r2
 8003f08:	602b      	str	r3, [r5, #0]
 8003f0a:	f7fe fdbe 	bl	8002a8a <_kill>
 8003f0e:	1c43      	adds	r3, r0, #1
 8003f10:	d102      	bne.n	8003f18 <_kill_r+0x1c>
 8003f12:	682b      	ldr	r3, [r5, #0]
 8003f14:	b103      	cbz	r3, 8003f18 <_kill_r+0x1c>
 8003f16:	6023      	str	r3, [r4, #0]
 8003f18:	bd38      	pop	{r3, r4, r5, pc}
 8003f1a:	bf00      	nop
 8003f1c:	200006b8 	.word	0x200006b8

08003f20 <_getpid_r>:
 8003f20:	f7fe bdab 	b.w	8002a7a <_getpid>

08003f24 <_sbrk_r>:
 8003f24:	b538      	push	{r3, r4, r5, lr}
 8003f26:	4d06      	ldr	r5, [pc, #24]	@ (8003f40 <_sbrk_r+0x1c>)
 8003f28:	2300      	movs	r3, #0
 8003f2a:	4604      	mov	r4, r0
 8003f2c:	4608      	mov	r0, r1
 8003f2e:	602b      	str	r3, [r5, #0]
 8003f30:	f7fe fe34 	bl	8002b9c <_sbrk>
 8003f34:	1c43      	adds	r3, r0, #1
 8003f36:	d102      	bne.n	8003f3e <_sbrk_r+0x1a>
 8003f38:	682b      	ldr	r3, [r5, #0]
 8003f3a:	b103      	cbz	r3, 8003f3e <_sbrk_r+0x1a>
 8003f3c:	6023      	str	r3, [r4, #0]
 8003f3e:	bd38      	pop	{r3, r4, r5, pc}
 8003f40:	200006b8 	.word	0x200006b8

08003f44 <_write_r>:
 8003f44:	b538      	push	{r3, r4, r5, lr}
 8003f46:	4d07      	ldr	r5, [pc, #28]	@ (8003f64 <_write_r+0x20>)
 8003f48:	4604      	mov	r4, r0
 8003f4a:	4608      	mov	r0, r1
 8003f4c:	4611      	mov	r1, r2
 8003f4e:	2200      	movs	r2, #0
 8003f50:	602a      	str	r2, [r5, #0]
 8003f52:	461a      	mov	r2, r3
 8003f54:	f7fe fdd1 	bl	8002afa <_write>
 8003f58:	1c43      	adds	r3, r0, #1
 8003f5a:	d102      	bne.n	8003f62 <_write_r+0x1e>
 8003f5c:	682b      	ldr	r3, [r5, #0]
 8003f5e:	b103      	cbz	r3, 8003f62 <_write_r+0x1e>
 8003f60:	6023      	str	r3, [r4, #0]
 8003f62:	bd38      	pop	{r3, r4, r5, pc}
 8003f64:	200006b8 	.word	0x200006b8

08003f68 <__errno>:
 8003f68:	4b01      	ldr	r3, [pc, #4]	@ (8003f70 <__errno+0x8>)
 8003f6a:	6818      	ldr	r0, [r3, #0]
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	20000180 	.word	0x20000180

08003f74 <__libc_init_array>:
 8003f74:	b570      	push	{r4, r5, r6, lr}
 8003f76:	4d0d      	ldr	r5, [pc, #52]	@ (8003fac <__libc_init_array+0x38>)
 8003f78:	4c0d      	ldr	r4, [pc, #52]	@ (8003fb0 <__libc_init_array+0x3c>)
 8003f7a:	1b64      	subs	r4, r4, r5
 8003f7c:	10a4      	asrs	r4, r4, #2
 8003f7e:	2600      	movs	r6, #0
 8003f80:	42a6      	cmp	r6, r4
 8003f82:	d109      	bne.n	8003f98 <__libc_init_array+0x24>
 8003f84:	4d0b      	ldr	r5, [pc, #44]	@ (8003fb4 <__libc_init_array+0x40>)
 8003f86:	4c0c      	ldr	r4, [pc, #48]	@ (8003fb8 <__libc_init_array+0x44>)
 8003f88:	f001 fdac 	bl	8005ae4 <_init>
 8003f8c:	1b64      	subs	r4, r4, r5
 8003f8e:	10a4      	asrs	r4, r4, #2
 8003f90:	2600      	movs	r6, #0
 8003f92:	42a6      	cmp	r6, r4
 8003f94:	d105      	bne.n	8003fa2 <__libc_init_array+0x2e>
 8003f96:	bd70      	pop	{r4, r5, r6, pc}
 8003f98:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f9c:	4798      	blx	r3
 8003f9e:	3601      	adds	r6, #1
 8003fa0:	e7ee      	b.n	8003f80 <__libc_init_array+0xc>
 8003fa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fa6:	4798      	blx	r3
 8003fa8:	3601      	adds	r6, #1
 8003faa:	e7f2      	b.n	8003f92 <__libc_init_array+0x1e>
 8003fac:	08006160 	.word	0x08006160
 8003fb0:	08006160 	.word	0x08006160
 8003fb4:	08006160 	.word	0x08006160
 8003fb8:	08006168 	.word	0x08006168

08003fbc <__retarget_lock_init_recursive>:
 8003fbc:	4770      	bx	lr

08003fbe <__retarget_lock_acquire_recursive>:
 8003fbe:	4770      	bx	lr

08003fc0 <__retarget_lock_release_recursive>:
 8003fc0:	4770      	bx	lr

08003fc2 <memcpy>:
 8003fc2:	440a      	add	r2, r1
 8003fc4:	4291      	cmp	r1, r2
 8003fc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8003fca:	d100      	bne.n	8003fce <memcpy+0xc>
 8003fcc:	4770      	bx	lr
 8003fce:	b510      	push	{r4, lr}
 8003fd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003fd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003fd8:	4291      	cmp	r1, r2
 8003fda:	d1f9      	bne.n	8003fd0 <memcpy+0xe>
 8003fdc:	bd10      	pop	{r4, pc}

08003fde <quorem>:
 8003fde:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fe2:	6903      	ldr	r3, [r0, #16]
 8003fe4:	690c      	ldr	r4, [r1, #16]
 8003fe6:	42a3      	cmp	r3, r4
 8003fe8:	4607      	mov	r7, r0
 8003fea:	db7e      	blt.n	80040ea <quorem+0x10c>
 8003fec:	3c01      	subs	r4, #1
 8003fee:	f101 0814 	add.w	r8, r1, #20
 8003ff2:	00a3      	lsls	r3, r4, #2
 8003ff4:	f100 0514 	add.w	r5, r0, #20
 8003ff8:	9300      	str	r3, [sp, #0]
 8003ffa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003ffe:	9301      	str	r3, [sp, #4]
 8004000:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004004:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004008:	3301      	adds	r3, #1
 800400a:	429a      	cmp	r2, r3
 800400c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004010:	fbb2 f6f3 	udiv	r6, r2, r3
 8004014:	d32e      	bcc.n	8004074 <quorem+0x96>
 8004016:	f04f 0a00 	mov.w	sl, #0
 800401a:	46c4      	mov	ip, r8
 800401c:	46ae      	mov	lr, r5
 800401e:	46d3      	mov	fp, sl
 8004020:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004024:	b298      	uxth	r0, r3
 8004026:	fb06 a000 	mla	r0, r6, r0, sl
 800402a:	0c02      	lsrs	r2, r0, #16
 800402c:	0c1b      	lsrs	r3, r3, #16
 800402e:	fb06 2303 	mla	r3, r6, r3, r2
 8004032:	f8de 2000 	ldr.w	r2, [lr]
 8004036:	b280      	uxth	r0, r0
 8004038:	b292      	uxth	r2, r2
 800403a:	1a12      	subs	r2, r2, r0
 800403c:	445a      	add	r2, fp
 800403e:	f8de 0000 	ldr.w	r0, [lr]
 8004042:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004046:	b29b      	uxth	r3, r3
 8004048:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800404c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004050:	b292      	uxth	r2, r2
 8004052:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004056:	45e1      	cmp	r9, ip
 8004058:	f84e 2b04 	str.w	r2, [lr], #4
 800405c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004060:	d2de      	bcs.n	8004020 <quorem+0x42>
 8004062:	9b00      	ldr	r3, [sp, #0]
 8004064:	58eb      	ldr	r3, [r5, r3]
 8004066:	b92b      	cbnz	r3, 8004074 <quorem+0x96>
 8004068:	9b01      	ldr	r3, [sp, #4]
 800406a:	3b04      	subs	r3, #4
 800406c:	429d      	cmp	r5, r3
 800406e:	461a      	mov	r2, r3
 8004070:	d32f      	bcc.n	80040d2 <quorem+0xf4>
 8004072:	613c      	str	r4, [r7, #16]
 8004074:	4638      	mov	r0, r7
 8004076:	f001 f8d5 	bl	8005224 <__mcmp>
 800407a:	2800      	cmp	r0, #0
 800407c:	db25      	blt.n	80040ca <quorem+0xec>
 800407e:	4629      	mov	r1, r5
 8004080:	2000      	movs	r0, #0
 8004082:	f858 2b04 	ldr.w	r2, [r8], #4
 8004086:	f8d1 c000 	ldr.w	ip, [r1]
 800408a:	fa1f fe82 	uxth.w	lr, r2
 800408e:	fa1f f38c 	uxth.w	r3, ip
 8004092:	eba3 030e 	sub.w	r3, r3, lr
 8004096:	4403      	add	r3, r0
 8004098:	0c12      	lsrs	r2, r2, #16
 800409a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800409e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80040a8:	45c1      	cmp	r9, r8
 80040aa:	f841 3b04 	str.w	r3, [r1], #4
 80040ae:	ea4f 4022 	mov.w	r0, r2, asr #16
 80040b2:	d2e6      	bcs.n	8004082 <quorem+0xa4>
 80040b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80040b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80040bc:	b922      	cbnz	r2, 80040c8 <quorem+0xea>
 80040be:	3b04      	subs	r3, #4
 80040c0:	429d      	cmp	r5, r3
 80040c2:	461a      	mov	r2, r3
 80040c4:	d30b      	bcc.n	80040de <quorem+0x100>
 80040c6:	613c      	str	r4, [r7, #16]
 80040c8:	3601      	adds	r6, #1
 80040ca:	4630      	mov	r0, r6
 80040cc:	b003      	add	sp, #12
 80040ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040d2:	6812      	ldr	r2, [r2, #0]
 80040d4:	3b04      	subs	r3, #4
 80040d6:	2a00      	cmp	r2, #0
 80040d8:	d1cb      	bne.n	8004072 <quorem+0x94>
 80040da:	3c01      	subs	r4, #1
 80040dc:	e7c6      	b.n	800406c <quorem+0x8e>
 80040de:	6812      	ldr	r2, [r2, #0]
 80040e0:	3b04      	subs	r3, #4
 80040e2:	2a00      	cmp	r2, #0
 80040e4:	d1ef      	bne.n	80040c6 <quorem+0xe8>
 80040e6:	3c01      	subs	r4, #1
 80040e8:	e7ea      	b.n	80040c0 <quorem+0xe2>
 80040ea:	2000      	movs	r0, #0
 80040ec:	e7ee      	b.n	80040cc <quorem+0xee>
	...

080040f0 <_dtoa_r>:
 80040f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040f4:	69c7      	ldr	r7, [r0, #28]
 80040f6:	b099      	sub	sp, #100	@ 0x64
 80040f8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80040fc:	ec55 4b10 	vmov	r4, r5, d0
 8004100:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8004102:	9109      	str	r1, [sp, #36]	@ 0x24
 8004104:	4683      	mov	fp, r0
 8004106:	920e      	str	r2, [sp, #56]	@ 0x38
 8004108:	9313      	str	r3, [sp, #76]	@ 0x4c
 800410a:	b97f      	cbnz	r7, 800412c <_dtoa_r+0x3c>
 800410c:	2010      	movs	r0, #16
 800410e:	f7ff f83f 	bl	8003190 <malloc>
 8004112:	4602      	mov	r2, r0
 8004114:	f8cb 001c 	str.w	r0, [fp, #28]
 8004118:	b920      	cbnz	r0, 8004124 <_dtoa_r+0x34>
 800411a:	4ba7      	ldr	r3, [pc, #668]	@ (80043b8 <_dtoa_r+0x2c8>)
 800411c:	21ef      	movs	r1, #239	@ 0xef
 800411e:	48a7      	ldr	r0, [pc, #668]	@ (80043bc <_dtoa_r+0x2cc>)
 8004120:	f001 fa42 	bl	80055a8 <__assert_func>
 8004124:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004128:	6007      	str	r7, [r0, #0]
 800412a:	60c7      	str	r7, [r0, #12]
 800412c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004130:	6819      	ldr	r1, [r3, #0]
 8004132:	b159      	cbz	r1, 800414c <_dtoa_r+0x5c>
 8004134:	685a      	ldr	r2, [r3, #4]
 8004136:	604a      	str	r2, [r1, #4]
 8004138:	2301      	movs	r3, #1
 800413a:	4093      	lsls	r3, r2
 800413c:	608b      	str	r3, [r1, #8]
 800413e:	4658      	mov	r0, fp
 8004140:	f000 fe36 	bl	8004db0 <_Bfree>
 8004144:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004148:	2200      	movs	r2, #0
 800414a:	601a      	str	r2, [r3, #0]
 800414c:	1e2b      	subs	r3, r5, #0
 800414e:	bfb9      	ittee	lt
 8004150:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004154:	9303      	strlt	r3, [sp, #12]
 8004156:	2300      	movge	r3, #0
 8004158:	6033      	strge	r3, [r6, #0]
 800415a:	9f03      	ldr	r7, [sp, #12]
 800415c:	4b98      	ldr	r3, [pc, #608]	@ (80043c0 <_dtoa_r+0x2d0>)
 800415e:	bfbc      	itt	lt
 8004160:	2201      	movlt	r2, #1
 8004162:	6032      	strlt	r2, [r6, #0]
 8004164:	43bb      	bics	r3, r7
 8004166:	d112      	bne.n	800418e <_dtoa_r+0x9e>
 8004168:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800416a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800416e:	6013      	str	r3, [r2, #0]
 8004170:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004174:	4323      	orrs	r3, r4
 8004176:	f000 854d 	beq.w	8004c14 <_dtoa_r+0xb24>
 800417a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800417c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80043d4 <_dtoa_r+0x2e4>
 8004180:	2b00      	cmp	r3, #0
 8004182:	f000 854f 	beq.w	8004c24 <_dtoa_r+0xb34>
 8004186:	f10a 0303 	add.w	r3, sl, #3
 800418a:	f000 bd49 	b.w	8004c20 <_dtoa_r+0xb30>
 800418e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004192:	2200      	movs	r2, #0
 8004194:	ec51 0b17 	vmov	r0, r1, d7
 8004198:	2300      	movs	r3, #0
 800419a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800419e:	f7fc fcbb 	bl	8000b18 <__aeabi_dcmpeq>
 80041a2:	4680      	mov	r8, r0
 80041a4:	b158      	cbz	r0, 80041be <_dtoa_r+0xce>
 80041a6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80041a8:	2301      	movs	r3, #1
 80041aa:	6013      	str	r3, [r2, #0]
 80041ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80041ae:	b113      	cbz	r3, 80041b6 <_dtoa_r+0xc6>
 80041b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80041b2:	4b84      	ldr	r3, [pc, #528]	@ (80043c4 <_dtoa_r+0x2d4>)
 80041b4:	6013      	str	r3, [r2, #0]
 80041b6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80043d8 <_dtoa_r+0x2e8>
 80041ba:	f000 bd33 	b.w	8004c24 <_dtoa_r+0xb34>
 80041be:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80041c2:	aa16      	add	r2, sp, #88	@ 0x58
 80041c4:	a917      	add	r1, sp, #92	@ 0x5c
 80041c6:	4658      	mov	r0, fp
 80041c8:	f001 f8dc 	bl	8005384 <__d2b>
 80041cc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80041d0:	4681      	mov	r9, r0
 80041d2:	2e00      	cmp	r6, #0
 80041d4:	d077      	beq.n	80042c6 <_dtoa_r+0x1d6>
 80041d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80041d8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80041dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80041e4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80041e8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80041ec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80041f0:	4619      	mov	r1, r3
 80041f2:	2200      	movs	r2, #0
 80041f4:	4b74      	ldr	r3, [pc, #464]	@ (80043c8 <_dtoa_r+0x2d8>)
 80041f6:	f7fc f86f 	bl	80002d8 <__aeabi_dsub>
 80041fa:	a369      	add	r3, pc, #420	@ (adr r3, 80043a0 <_dtoa_r+0x2b0>)
 80041fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004200:	f7fc fa22 	bl	8000648 <__aeabi_dmul>
 8004204:	a368      	add	r3, pc, #416	@ (adr r3, 80043a8 <_dtoa_r+0x2b8>)
 8004206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420a:	f7fc f867 	bl	80002dc <__adddf3>
 800420e:	4604      	mov	r4, r0
 8004210:	4630      	mov	r0, r6
 8004212:	460d      	mov	r5, r1
 8004214:	f7fc f9ae 	bl	8000574 <__aeabi_i2d>
 8004218:	a365      	add	r3, pc, #404	@ (adr r3, 80043b0 <_dtoa_r+0x2c0>)
 800421a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421e:	f7fc fa13 	bl	8000648 <__aeabi_dmul>
 8004222:	4602      	mov	r2, r0
 8004224:	460b      	mov	r3, r1
 8004226:	4620      	mov	r0, r4
 8004228:	4629      	mov	r1, r5
 800422a:	f7fc f857 	bl	80002dc <__adddf3>
 800422e:	4604      	mov	r4, r0
 8004230:	460d      	mov	r5, r1
 8004232:	f7fc fcb9 	bl	8000ba8 <__aeabi_d2iz>
 8004236:	2200      	movs	r2, #0
 8004238:	4607      	mov	r7, r0
 800423a:	2300      	movs	r3, #0
 800423c:	4620      	mov	r0, r4
 800423e:	4629      	mov	r1, r5
 8004240:	f7fc fc74 	bl	8000b2c <__aeabi_dcmplt>
 8004244:	b140      	cbz	r0, 8004258 <_dtoa_r+0x168>
 8004246:	4638      	mov	r0, r7
 8004248:	f7fc f994 	bl	8000574 <__aeabi_i2d>
 800424c:	4622      	mov	r2, r4
 800424e:	462b      	mov	r3, r5
 8004250:	f7fc fc62 	bl	8000b18 <__aeabi_dcmpeq>
 8004254:	b900      	cbnz	r0, 8004258 <_dtoa_r+0x168>
 8004256:	3f01      	subs	r7, #1
 8004258:	2f16      	cmp	r7, #22
 800425a:	d851      	bhi.n	8004300 <_dtoa_r+0x210>
 800425c:	4b5b      	ldr	r3, [pc, #364]	@ (80043cc <_dtoa_r+0x2dc>)
 800425e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004266:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800426a:	f7fc fc5f 	bl	8000b2c <__aeabi_dcmplt>
 800426e:	2800      	cmp	r0, #0
 8004270:	d048      	beq.n	8004304 <_dtoa_r+0x214>
 8004272:	3f01      	subs	r7, #1
 8004274:	2300      	movs	r3, #0
 8004276:	9312      	str	r3, [sp, #72]	@ 0x48
 8004278:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800427a:	1b9b      	subs	r3, r3, r6
 800427c:	1e5a      	subs	r2, r3, #1
 800427e:	bf44      	itt	mi
 8004280:	f1c3 0801 	rsbmi	r8, r3, #1
 8004284:	2300      	movmi	r3, #0
 8004286:	9208      	str	r2, [sp, #32]
 8004288:	bf54      	ite	pl
 800428a:	f04f 0800 	movpl.w	r8, #0
 800428e:	9308      	strmi	r3, [sp, #32]
 8004290:	2f00      	cmp	r7, #0
 8004292:	db39      	blt.n	8004308 <_dtoa_r+0x218>
 8004294:	9b08      	ldr	r3, [sp, #32]
 8004296:	970f      	str	r7, [sp, #60]	@ 0x3c
 8004298:	443b      	add	r3, r7
 800429a:	9308      	str	r3, [sp, #32]
 800429c:	2300      	movs	r3, #0
 800429e:	930a      	str	r3, [sp, #40]	@ 0x28
 80042a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042a2:	2b09      	cmp	r3, #9
 80042a4:	d864      	bhi.n	8004370 <_dtoa_r+0x280>
 80042a6:	2b05      	cmp	r3, #5
 80042a8:	bfc4      	itt	gt
 80042aa:	3b04      	subgt	r3, #4
 80042ac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80042ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042b0:	f1a3 0302 	sub.w	r3, r3, #2
 80042b4:	bfcc      	ite	gt
 80042b6:	2400      	movgt	r4, #0
 80042b8:	2401      	movle	r4, #1
 80042ba:	2b03      	cmp	r3, #3
 80042bc:	d863      	bhi.n	8004386 <_dtoa_r+0x296>
 80042be:	e8df f003 	tbb	[pc, r3]
 80042c2:	372a      	.short	0x372a
 80042c4:	5535      	.short	0x5535
 80042c6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80042ca:	441e      	add	r6, r3
 80042cc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80042d0:	2b20      	cmp	r3, #32
 80042d2:	bfc1      	itttt	gt
 80042d4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80042d8:	409f      	lslgt	r7, r3
 80042da:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80042de:	fa24 f303 	lsrgt.w	r3, r4, r3
 80042e2:	bfd6      	itet	le
 80042e4:	f1c3 0320 	rsble	r3, r3, #32
 80042e8:	ea47 0003 	orrgt.w	r0, r7, r3
 80042ec:	fa04 f003 	lslle.w	r0, r4, r3
 80042f0:	f7fc f930 	bl	8000554 <__aeabi_ui2d>
 80042f4:	2201      	movs	r2, #1
 80042f6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80042fa:	3e01      	subs	r6, #1
 80042fc:	9214      	str	r2, [sp, #80]	@ 0x50
 80042fe:	e777      	b.n	80041f0 <_dtoa_r+0x100>
 8004300:	2301      	movs	r3, #1
 8004302:	e7b8      	b.n	8004276 <_dtoa_r+0x186>
 8004304:	9012      	str	r0, [sp, #72]	@ 0x48
 8004306:	e7b7      	b.n	8004278 <_dtoa_r+0x188>
 8004308:	427b      	negs	r3, r7
 800430a:	930a      	str	r3, [sp, #40]	@ 0x28
 800430c:	2300      	movs	r3, #0
 800430e:	eba8 0807 	sub.w	r8, r8, r7
 8004312:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004314:	e7c4      	b.n	80042a0 <_dtoa_r+0x1b0>
 8004316:	2300      	movs	r3, #0
 8004318:	930b      	str	r3, [sp, #44]	@ 0x2c
 800431a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800431c:	2b00      	cmp	r3, #0
 800431e:	dc35      	bgt.n	800438c <_dtoa_r+0x29c>
 8004320:	2301      	movs	r3, #1
 8004322:	9300      	str	r3, [sp, #0]
 8004324:	9307      	str	r3, [sp, #28]
 8004326:	461a      	mov	r2, r3
 8004328:	920e      	str	r2, [sp, #56]	@ 0x38
 800432a:	e00b      	b.n	8004344 <_dtoa_r+0x254>
 800432c:	2301      	movs	r3, #1
 800432e:	e7f3      	b.n	8004318 <_dtoa_r+0x228>
 8004330:	2300      	movs	r3, #0
 8004332:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004334:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004336:	18fb      	adds	r3, r7, r3
 8004338:	9300      	str	r3, [sp, #0]
 800433a:	3301      	adds	r3, #1
 800433c:	2b01      	cmp	r3, #1
 800433e:	9307      	str	r3, [sp, #28]
 8004340:	bfb8      	it	lt
 8004342:	2301      	movlt	r3, #1
 8004344:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004348:	2100      	movs	r1, #0
 800434a:	2204      	movs	r2, #4
 800434c:	f102 0514 	add.w	r5, r2, #20
 8004350:	429d      	cmp	r5, r3
 8004352:	d91f      	bls.n	8004394 <_dtoa_r+0x2a4>
 8004354:	6041      	str	r1, [r0, #4]
 8004356:	4658      	mov	r0, fp
 8004358:	f000 fcea 	bl	8004d30 <_Balloc>
 800435c:	4682      	mov	sl, r0
 800435e:	2800      	cmp	r0, #0
 8004360:	d13c      	bne.n	80043dc <_dtoa_r+0x2ec>
 8004362:	4b1b      	ldr	r3, [pc, #108]	@ (80043d0 <_dtoa_r+0x2e0>)
 8004364:	4602      	mov	r2, r0
 8004366:	f240 11af 	movw	r1, #431	@ 0x1af
 800436a:	e6d8      	b.n	800411e <_dtoa_r+0x2e>
 800436c:	2301      	movs	r3, #1
 800436e:	e7e0      	b.n	8004332 <_dtoa_r+0x242>
 8004370:	2401      	movs	r4, #1
 8004372:	2300      	movs	r3, #0
 8004374:	9309      	str	r3, [sp, #36]	@ 0x24
 8004376:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004378:	f04f 33ff 	mov.w	r3, #4294967295
 800437c:	9300      	str	r3, [sp, #0]
 800437e:	9307      	str	r3, [sp, #28]
 8004380:	2200      	movs	r2, #0
 8004382:	2312      	movs	r3, #18
 8004384:	e7d0      	b.n	8004328 <_dtoa_r+0x238>
 8004386:	2301      	movs	r3, #1
 8004388:	930b      	str	r3, [sp, #44]	@ 0x2c
 800438a:	e7f5      	b.n	8004378 <_dtoa_r+0x288>
 800438c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800438e:	9300      	str	r3, [sp, #0]
 8004390:	9307      	str	r3, [sp, #28]
 8004392:	e7d7      	b.n	8004344 <_dtoa_r+0x254>
 8004394:	3101      	adds	r1, #1
 8004396:	0052      	lsls	r2, r2, #1
 8004398:	e7d8      	b.n	800434c <_dtoa_r+0x25c>
 800439a:	bf00      	nop
 800439c:	f3af 8000 	nop.w
 80043a0:	636f4361 	.word	0x636f4361
 80043a4:	3fd287a7 	.word	0x3fd287a7
 80043a8:	8b60c8b3 	.word	0x8b60c8b3
 80043ac:	3fc68a28 	.word	0x3fc68a28
 80043b0:	509f79fb 	.word	0x509f79fb
 80043b4:	3fd34413 	.word	0x3fd34413
 80043b8:	08005f2d 	.word	0x08005f2d
 80043bc:	08005f44 	.word	0x08005f44
 80043c0:	7ff00000 	.word	0x7ff00000
 80043c4:	08005ef3 	.word	0x08005ef3
 80043c8:	3ff80000 	.word	0x3ff80000
 80043cc:	08006040 	.word	0x08006040
 80043d0:	08005f9c 	.word	0x08005f9c
 80043d4:	08005f29 	.word	0x08005f29
 80043d8:	08005ef2 	.word	0x08005ef2
 80043dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80043e0:	6018      	str	r0, [r3, #0]
 80043e2:	9b07      	ldr	r3, [sp, #28]
 80043e4:	2b0e      	cmp	r3, #14
 80043e6:	f200 80a4 	bhi.w	8004532 <_dtoa_r+0x442>
 80043ea:	2c00      	cmp	r4, #0
 80043ec:	f000 80a1 	beq.w	8004532 <_dtoa_r+0x442>
 80043f0:	2f00      	cmp	r7, #0
 80043f2:	dd33      	ble.n	800445c <_dtoa_r+0x36c>
 80043f4:	4bad      	ldr	r3, [pc, #692]	@ (80046ac <_dtoa_r+0x5bc>)
 80043f6:	f007 020f 	and.w	r2, r7, #15
 80043fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80043fe:	ed93 7b00 	vldr	d7, [r3]
 8004402:	05f8      	lsls	r0, r7, #23
 8004404:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004408:	ea4f 1427 	mov.w	r4, r7, asr #4
 800440c:	d516      	bpl.n	800443c <_dtoa_r+0x34c>
 800440e:	4ba8      	ldr	r3, [pc, #672]	@ (80046b0 <_dtoa_r+0x5c0>)
 8004410:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004414:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004418:	f7fc fa40 	bl	800089c <__aeabi_ddiv>
 800441c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004420:	f004 040f 	and.w	r4, r4, #15
 8004424:	2603      	movs	r6, #3
 8004426:	4da2      	ldr	r5, [pc, #648]	@ (80046b0 <_dtoa_r+0x5c0>)
 8004428:	b954      	cbnz	r4, 8004440 <_dtoa_r+0x350>
 800442a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800442e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004432:	f7fc fa33 	bl	800089c <__aeabi_ddiv>
 8004436:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800443a:	e028      	b.n	800448e <_dtoa_r+0x39e>
 800443c:	2602      	movs	r6, #2
 800443e:	e7f2      	b.n	8004426 <_dtoa_r+0x336>
 8004440:	07e1      	lsls	r1, r4, #31
 8004442:	d508      	bpl.n	8004456 <_dtoa_r+0x366>
 8004444:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004448:	e9d5 2300 	ldrd	r2, r3, [r5]
 800444c:	f7fc f8fc 	bl	8000648 <__aeabi_dmul>
 8004450:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004454:	3601      	adds	r6, #1
 8004456:	1064      	asrs	r4, r4, #1
 8004458:	3508      	adds	r5, #8
 800445a:	e7e5      	b.n	8004428 <_dtoa_r+0x338>
 800445c:	f000 80d2 	beq.w	8004604 <_dtoa_r+0x514>
 8004460:	427c      	negs	r4, r7
 8004462:	4b92      	ldr	r3, [pc, #584]	@ (80046ac <_dtoa_r+0x5bc>)
 8004464:	4d92      	ldr	r5, [pc, #584]	@ (80046b0 <_dtoa_r+0x5c0>)
 8004466:	f004 020f 	and.w	r2, r4, #15
 800446a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800446e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004472:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004476:	f7fc f8e7 	bl	8000648 <__aeabi_dmul>
 800447a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800447e:	1124      	asrs	r4, r4, #4
 8004480:	2300      	movs	r3, #0
 8004482:	2602      	movs	r6, #2
 8004484:	2c00      	cmp	r4, #0
 8004486:	f040 80b2 	bne.w	80045ee <_dtoa_r+0x4fe>
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1d3      	bne.n	8004436 <_dtoa_r+0x346>
 800448e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004490:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004494:	2b00      	cmp	r3, #0
 8004496:	f000 80b7 	beq.w	8004608 <_dtoa_r+0x518>
 800449a:	4b86      	ldr	r3, [pc, #536]	@ (80046b4 <_dtoa_r+0x5c4>)
 800449c:	2200      	movs	r2, #0
 800449e:	4620      	mov	r0, r4
 80044a0:	4629      	mov	r1, r5
 80044a2:	f7fc fb43 	bl	8000b2c <__aeabi_dcmplt>
 80044a6:	2800      	cmp	r0, #0
 80044a8:	f000 80ae 	beq.w	8004608 <_dtoa_r+0x518>
 80044ac:	9b07      	ldr	r3, [sp, #28]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f000 80aa 	beq.w	8004608 <_dtoa_r+0x518>
 80044b4:	9b00      	ldr	r3, [sp, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	dd37      	ble.n	800452a <_dtoa_r+0x43a>
 80044ba:	1e7b      	subs	r3, r7, #1
 80044bc:	9304      	str	r3, [sp, #16]
 80044be:	4620      	mov	r0, r4
 80044c0:	4b7d      	ldr	r3, [pc, #500]	@ (80046b8 <_dtoa_r+0x5c8>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	4629      	mov	r1, r5
 80044c6:	f7fc f8bf 	bl	8000648 <__aeabi_dmul>
 80044ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80044ce:	9c00      	ldr	r4, [sp, #0]
 80044d0:	3601      	adds	r6, #1
 80044d2:	4630      	mov	r0, r6
 80044d4:	f7fc f84e 	bl	8000574 <__aeabi_i2d>
 80044d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80044dc:	f7fc f8b4 	bl	8000648 <__aeabi_dmul>
 80044e0:	4b76      	ldr	r3, [pc, #472]	@ (80046bc <_dtoa_r+0x5cc>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	f7fb fefa 	bl	80002dc <__adddf3>
 80044e8:	4605      	mov	r5, r0
 80044ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80044ee:	2c00      	cmp	r4, #0
 80044f0:	f040 808d 	bne.w	800460e <_dtoa_r+0x51e>
 80044f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044f8:	4b71      	ldr	r3, [pc, #452]	@ (80046c0 <_dtoa_r+0x5d0>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	f7fb feec 	bl	80002d8 <__aeabi_dsub>
 8004500:	4602      	mov	r2, r0
 8004502:	460b      	mov	r3, r1
 8004504:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004508:	462a      	mov	r2, r5
 800450a:	4633      	mov	r3, r6
 800450c:	f7fc fb2c 	bl	8000b68 <__aeabi_dcmpgt>
 8004510:	2800      	cmp	r0, #0
 8004512:	f040 828b 	bne.w	8004a2c <_dtoa_r+0x93c>
 8004516:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800451a:	462a      	mov	r2, r5
 800451c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004520:	f7fc fb04 	bl	8000b2c <__aeabi_dcmplt>
 8004524:	2800      	cmp	r0, #0
 8004526:	f040 8128 	bne.w	800477a <_dtoa_r+0x68a>
 800452a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800452e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004532:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004534:	2b00      	cmp	r3, #0
 8004536:	f2c0 815a 	blt.w	80047ee <_dtoa_r+0x6fe>
 800453a:	2f0e      	cmp	r7, #14
 800453c:	f300 8157 	bgt.w	80047ee <_dtoa_r+0x6fe>
 8004540:	4b5a      	ldr	r3, [pc, #360]	@ (80046ac <_dtoa_r+0x5bc>)
 8004542:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004546:	ed93 7b00 	vldr	d7, [r3]
 800454a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800454c:	2b00      	cmp	r3, #0
 800454e:	ed8d 7b00 	vstr	d7, [sp]
 8004552:	da03      	bge.n	800455c <_dtoa_r+0x46c>
 8004554:	9b07      	ldr	r3, [sp, #28]
 8004556:	2b00      	cmp	r3, #0
 8004558:	f340 8101 	ble.w	800475e <_dtoa_r+0x66e>
 800455c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004560:	4656      	mov	r6, sl
 8004562:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004566:	4620      	mov	r0, r4
 8004568:	4629      	mov	r1, r5
 800456a:	f7fc f997 	bl	800089c <__aeabi_ddiv>
 800456e:	f7fc fb1b 	bl	8000ba8 <__aeabi_d2iz>
 8004572:	4680      	mov	r8, r0
 8004574:	f7fb fffe 	bl	8000574 <__aeabi_i2d>
 8004578:	e9dd 2300 	ldrd	r2, r3, [sp]
 800457c:	f7fc f864 	bl	8000648 <__aeabi_dmul>
 8004580:	4602      	mov	r2, r0
 8004582:	460b      	mov	r3, r1
 8004584:	4620      	mov	r0, r4
 8004586:	4629      	mov	r1, r5
 8004588:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800458c:	f7fb fea4 	bl	80002d8 <__aeabi_dsub>
 8004590:	f806 4b01 	strb.w	r4, [r6], #1
 8004594:	9d07      	ldr	r5, [sp, #28]
 8004596:	eba6 040a 	sub.w	r4, r6, sl
 800459a:	42a5      	cmp	r5, r4
 800459c:	4602      	mov	r2, r0
 800459e:	460b      	mov	r3, r1
 80045a0:	f040 8117 	bne.w	80047d2 <_dtoa_r+0x6e2>
 80045a4:	f7fb fe9a 	bl	80002dc <__adddf3>
 80045a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80045ac:	4604      	mov	r4, r0
 80045ae:	460d      	mov	r5, r1
 80045b0:	f7fc fada 	bl	8000b68 <__aeabi_dcmpgt>
 80045b4:	2800      	cmp	r0, #0
 80045b6:	f040 80f9 	bne.w	80047ac <_dtoa_r+0x6bc>
 80045ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80045be:	4620      	mov	r0, r4
 80045c0:	4629      	mov	r1, r5
 80045c2:	f7fc faa9 	bl	8000b18 <__aeabi_dcmpeq>
 80045c6:	b118      	cbz	r0, 80045d0 <_dtoa_r+0x4e0>
 80045c8:	f018 0f01 	tst.w	r8, #1
 80045cc:	f040 80ee 	bne.w	80047ac <_dtoa_r+0x6bc>
 80045d0:	4649      	mov	r1, r9
 80045d2:	4658      	mov	r0, fp
 80045d4:	f000 fbec 	bl	8004db0 <_Bfree>
 80045d8:	2300      	movs	r3, #0
 80045da:	7033      	strb	r3, [r6, #0]
 80045dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80045de:	3701      	adds	r7, #1
 80045e0:	601f      	str	r7, [r3, #0]
 80045e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f000 831d 	beq.w	8004c24 <_dtoa_r+0xb34>
 80045ea:	601e      	str	r6, [r3, #0]
 80045ec:	e31a      	b.n	8004c24 <_dtoa_r+0xb34>
 80045ee:	07e2      	lsls	r2, r4, #31
 80045f0:	d505      	bpl.n	80045fe <_dtoa_r+0x50e>
 80045f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80045f6:	f7fc f827 	bl	8000648 <__aeabi_dmul>
 80045fa:	3601      	adds	r6, #1
 80045fc:	2301      	movs	r3, #1
 80045fe:	1064      	asrs	r4, r4, #1
 8004600:	3508      	adds	r5, #8
 8004602:	e73f      	b.n	8004484 <_dtoa_r+0x394>
 8004604:	2602      	movs	r6, #2
 8004606:	e742      	b.n	800448e <_dtoa_r+0x39e>
 8004608:	9c07      	ldr	r4, [sp, #28]
 800460a:	9704      	str	r7, [sp, #16]
 800460c:	e761      	b.n	80044d2 <_dtoa_r+0x3e2>
 800460e:	4b27      	ldr	r3, [pc, #156]	@ (80046ac <_dtoa_r+0x5bc>)
 8004610:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004612:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004616:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800461a:	4454      	add	r4, sl
 800461c:	2900      	cmp	r1, #0
 800461e:	d053      	beq.n	80046c8 <_dtoa_r+0x5d8>
 8004620:	4928      	ldr	r1, [pc, #160]	@ (80046c4 <_dtoa_r+0x5d4>)
 8004622:	2000      	movs	r0, #0
 8004624:	f7fc f93a 	bl	800089c <__aeabi_ddiv>
 8004628:	4633      	mov	r3, r6
 800462a:	462a      	mov	r2, r5
 800462c:	f7fb fe54 	bl	80002d8 <__aeabi_dsub>
 8004630:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004634:	4656      	mov	r6, sl
 8004636:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800463a:	f7fc fab5 	bl	8000ba8 <__aeabi_d2iz>
 800463e:	4605      	mov	r5, r0
 8004640:	f7fb ff98 	bl	8000574 <__aeabi_i2d>
 8004644:	4602      	mov	r2, r0
 8004646:	460b      	mov	r3, r1
 8004648:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800464c:	f7fb fe44 	bl	80002d8 <__aeabi_dsub>
 8004650:	3530      	adds	r5, #48	@ 0x30
 8004652:	4602      	mov	r2, r0
 8004654:	460b      	mov	r3, r1
 8004656:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800465a:	f806 5b01 	strb.w	r5, [r6], #1
 800465e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004662:	f7fc fa63 	bl	8000b2c <__aeabi_dcmplt>
 8004666:	2800      	cmp	r0, #0
 8004668:	d171      	bne.n	800474e <_dtoa_r+0x65e>
 800466a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800466e:	4911      	ldr	r1, [pc, #68]	@ (80046b4 <_dtoa_r+0x5c4>)
 8004670:	2000      	movs	r0, #0
 8004672:	f7fb fe31 	bl	80002d8 <__aeabi_dsub>
 8004676:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800467a:	f7fc fa57 	bl	8000b2c <__aeabi_dcmplt>
 800467e:	2800      	cmp	r0, #0
 8004680:	f040 8095 	bne.w	80047ae <_dtoa_r+0x6be>
 8004684:	42a6      	cmp	r6, r4
 8004686:	f43f af50 	beq.w	800452a <_dtoa_r+0x43a>
 800468a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800468e:	4b0a      	ldr	r3, [pc, #40]	@ (80046b8 <_dtoa_r+0x5c8>)
 8004690:	2200      	movs	r2, #0
 8004692:	f7fb ffd9 	bl	8000648 <__aeabi_dmul>
 8004696:	4b08      	ldr	r3, [pc, #32]	@ (80046b8 <_dtoa_r+0x5c8>)
 8004698:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800469c:	2200      	movs	r2, #0
 800469e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80046a2:	f7fb ffd1 	bl	8000648 <__aeabi_dmul>
 80046a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80046aa:	e7c4      	b.n	8004636 <_dtoa_r+0x546>
 80046ac:	08006040 	.word	0x08006040
 80046b0:	08006018 	.word	0x08006018
 80046b4:	3ff00000 	.word	0x3ff00000
 80046b8:	40240000 	.word	0x40240000
 80046bc:	401c0000 	.word	0x401c0000
 80046c0:	40140000 	.word	0x40140000
 80046c4:	3fe00000 	.word	0x3fe00000
 80046c8:	4631      	mov	r1, r6
 80046ca:	4628      	mov	r0, r5
 80046cc:	f7fb ffbc 	bl	8000648 <__aeabi_dmul>
 80046d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80046d4:	9415      	str	r4, [sp, #84]	@ 0x54
 80046d6:	4656      	mov	r6, sl
 80046d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80046dc:	f7fc fa64 	bl	8000ba8 <__aeabi_d2iz>
 80046e0:	4605      	mov	r5, r0
 80046e2:	f7fb ff47 	bl	8000574 <__aeabi_i2d>
 80046e6:	4602      	mov	r2, r0
 80046e8:	460b      	mov	r3, r1
 80046ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80046ee:	f7fb fdf3 	bl	80002d8 <__aeabi_dsub>
 80046f2:	3530      	adds	r5, #48	@ 0x30
 80046f4:	f806 5b01 	strb.w	r5, [r6], #1
 80046f8:	4602      	mov	r2, r0
 80046fa:	460b      	mov	r3, r1
 80046fc:	42a6      	cmp	r6, r4
 80046fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004702:	f04f 0200 	mov.w	r2, #0
 8004706:	d124      	bne.n	8004752 <_dtoa_r+0x662>
 8004708:	4bac      	ldr	r3, [pc, #688]	@ (80049bc <_dtoa_r+0x8cc>)
 800470a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800470e:	f7fb fde5 	bl	80002dc <__adddf3>
 8004712:	4602      	mov	r2, r0
 8004714:	460b      	mov	r3, r1
 8004716:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800471a:	f7fc fa25 	bl	8000b68 <__aeabi_dcmpgt>
 800471e:	2800      	cmp	r0, #0
 8004720:	d145      	bne.n	80047ae <_dtoa_r+0x6be>
 8004722:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004726:	49a5      	ldr	r1, [pc, #660]	@ (80049bc <_dtoa_r+0x8cc>)
 8004728:	2000      	movs	r0, #0
 800472a:	f7fb fdd5 	bl	80002d8 <__aeabi_dsub>
 800472e:	4602      	mov	r2, r0
 8004730:	460b      	mov	r3, r1
 8004732:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004736:	f7fc f9f9 	bl	8000b2c <__aeabi_dcmplt>
 800473a:	2800      	cmp	r0, #0
 800473c:	f43f aef5 	beq.w	800452a <_dtoa_r+0x43a>
 8004740:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8004742:	1e73      	subs	r3, r6, #1
 8004744:	9315      	str	r3, [sp, #84]	@ 0x54
 8004746:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800474a:	2b30      	cmp	r3, #48	@ 0x30
 800474c:	d0f8      	beq.n	8004740 <_dtoa_r+0x650>
 800474e:	9f04      	ldr	r7, [sp, #16]
 8004750:	e73e      	b.n	80045d0 <_dtoa_r+0x4e0>
 8004752:	4b9b      	ldr	r3, [pc, #620]	@ (80049c0 <_dtoa_r+0x8d0>)
 8004754:	f7fb ff78 	bl	8000648 <__aeabi_dmul>
 8004758:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800475c:	e7bc      	b.n	80046d8 <_dtoa_r+0x5e8>
 800475e:	d10c      	bne.n	800477a <_dtoa_r+0x68a>
 8004760:	4b98      	ldr	r3, [pc, #608]	@ (80049c4 <_dtoa_r+0x8d4>)
 8004762:	2200      	movs	r2, #0
 8004764:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004768:	f7fb ff6e 	bl	8000648 <__aeabi_dmul>
 800476c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004770:	f7fc f9f0 	bl	8000b54 <__aeabi_dcmpge>
 8004774:	2800      	cmp	r0, #0
 8004776:	f000 8157 	beq.w	8004a28 <_dtoa_r+0x938>
 800477a:	2400      	movs	r4, #0
 800477c:	4625      	mov	r5, r4
 800477e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004780:	43db      	mvns	r3, r3
 8004782:	9304      	str	r3, [sp, #16]
 8004784:	4656      	mov	r6, sl
 8004786:	2700      	movs	r7, #0
 8004788:	4621      	mov	r1, r4
 800478a:	4658      	mov	r0, fp
 800478c:	f000 fb10 	bl	8004db0 <_Bfree>
 8004790:	2d00      	cmp	r5, #0
 8004792:	d0dc      	beq.n	800474e <_dtoa_r+0x65e>
 8004794:	b12f      	cbz	r7, 80047a2 <_dtoa_r+0x6b2>
 8004796:	42af      	cmp	r7, r5
 8004798:	d003      	beq.n	80047a2 <_dtoa_r+0x6b2>
 800479a:	4639      	mov	r1, r7
 800479c:	4658      	mov	r0, fp
 800479e:	f000 fb07 	bl	8004db0 <_Bfree>
 80047a2:	4629      	mov	r1, r5
 80047a4:	4658      	mov	r0, fp
 80047a6:	f000 fb03 	bl	8004db0 <_Bfree>
 80047aa:	e7d0      	b.n	800474e <_dtoa_r+0x65e>
 80047ac:	9704      	str	r7, [sp, #16]
 80047ae:	4633      	mov	r3, r6
 80047b0:	461e      	mov	r6, r3
 80047b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80047b6:	2a39      	cmp	r2, #57	@ 0x39
 80047b8:	d107      	bne.n	80047ca <_dtoa_r+0x6da>
 80047ba:	459a      	cmp	sl, r3
 80047bc:	d1f8      	bne.n	80047b0 <_dtoa_r+0x6c0>
 80047be:	9a04      	ldr	r2, [sp, #16]
 80047c0:	3201      	adds	r2, #1
 80047c2:	9204      	str	r2, [sp, #16]
 80047c4:	2230      	movs	r2, #48	@ 0x30
 80047c6:	f88a 2000 	strb.w	r2, [sl]
 80047ca:	781a      	ldrb	r2, [r3, #0]
 80047cc:	3201      	adds	r2, #1
 80047ce:	701a      	strb	r2, [r3, #0]
 80047d0:	e7bd      	b.n	800474e <_dtoa_r+0x65e>
 80047d2:	4b7b      	ldr	r3, [pc, #492]	@ (80049c0 <_dtoa_r+0x8d0>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	f7fb ff37 	bl	8000648 <__aeabi_dmul>
 80047da:	2200      	movs	r2, #0
 80047dc:	2300      	movs	r3, #0
 80047de:	4604      	mov	r4, r0
 80047e0:	460d      	mov	r5, r1
 80047e2:	f7fc f999 	bl	8000b18 <__aeabi_dcmpeq>
 80047e6:	2800      	cmp	r0, #0
 80047e8:	f43f aebb 	beq.w	8004562 <_dtoa_r+0x472>
 80047ec:	e6f0      	b.n	80045d0 <_dtoa_r+0x4e0>
 80047ee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80047f0:	2a00      	cmp	r2, #0
 80047f2:	f000 80db 	beq.w	80049ac <_dtoa_r+0x8bc>
 80047f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80047f8:	2a01      	cmp	r2, #1
 80047fa:	f300 80bf 	bgt.w	800497c <_dtoa_r+0x88c>
 80047fe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8004800:	2a00      	cmp	r2, #0
 8004802:	f000 80b7 	beq.w	8004974 <_dtoa_r+0x884>
 8004806:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800480a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800480c:	4646      	mov	r6, r8
 800480e:	9a08      	ldr	r2, [sp, #32]
 8004810:	2101      	movs	r1, #1
 8004812:	441a      	add	r2, r3
 8004814:	4658      	mov	r0, fp
 8004816:	4498      	add	r8, r3
 8004818:	9208      	str	r2, [sp, #32]
 800481a:	f000 fb7d 	bl	8004f18 <__i2b>
 800481e:	4605      	mov	r5, r0
 8004820:	b15e      	cbz	r6, 800483a <_dtoa_r+0x74a>
 8004822:	9b08      	ldr	r3, [sp, #32]
 8004824:	2b00      	cmp	r3, #0
 8004826:	dd08      	ble.n	800483a <_dtoa_r+0x74a>
 8004828:	42b3      	cmp	r3, r6
 800482a:	9a08      	ldr	r2, [sp, #32]
 800482c:	bfa8      	it	ge
 800482e:	4633      	movge	r3, r6
 8004830:	eba8 0803 	sub.w	r8, r8, r3
 8004834:	1af6      	subs	r6, r6, r3
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	9308      	str	r3, [sp, #32]
 800483a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800483c:	b1f3      	cbz	r3, 800487c <_dtoa_r+0x78c>
 800483e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004840:	2b00      	cmp	r3, #0
 8004842:	f000 80b7 	beq.w	80049b4 <_dtoa_r+0x8c4>
 8004846:	b18c      	cbz	r4, 800486c <_dtoa_r+0x77c>
 8004848:	4629      	mov	r1, r5
 800484a:	4622      	mov	r2, r4
 800484c:	4658      	mov	r0, fp
 800484e:	f000 fc23 	bl	8005098 <__pow5mult>
 8004852:	464a      	mov	r2, r9
 8004854:	4601      	mov	r1, r0
 8004856:	4605      	mov	r5, r0
 8004858:	4658      	mov	r0, fp
 800485a:	f000 fb73 	bl	8004f44 <__multiply>
 800485e:	4649      	mov	r1, r9
 8004860:	9004      	str	r0, [sp, #16]
 8004862:	4658      	mov	r0, fp
 8004864:	f000 faa4 	bl	8004db0 <_Bfree>
 8004868:	9b04      	ldr	r3, [sp, #16]
 800486a:	4699      	mov	r9, r3
 800486c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800486e:	1b1a      	subs	r2, r3, r4
 8004870:	d004      	beq.n	800487c <_dtoa_r+0x78c>
 8004872:	4649      	mov	r1, r9
 8004874:	4658      	mov	r0, fp
 8004876:	f000 fc0f 	bl	8005098 <__pow5mult>
 800487a:	4681      	mov	r9, r0
 800487c:	2101      	movs	r1, #1
 800487e:	4658      	mov	r0, fp
 8004880:	f000 fb4a 	bl	8004f18 <__i2b>
 8004884:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004886:	4604      	mov	r4, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	f000 81cf 	beq.w	8004c2c <_dtoa_r+0xb3c>
 800488e:	461a      	mov	r2, r3
 8004890:	4601      	mov	r1, r0
 8004892:	4658      	mov	r0, fp
 8004894:	f000 fc00 	bl	8005098 <__pow5mult>
 8004898:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800489a:	2b01      	cmp	r3, #1
 800489c:	4604      	mov	r4, r0
 800489e:	f300 8095 	bgt.w	80049cc <_dtoa_r+0x8dc>
 80048a2:	9b02      	ldr	r3, [sp, #8]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f040 8087 	bne.w	80049b8 <_dtoa_r+0x8c8>
 80048aa:	9b03      	ldr	r3, [sp, #12]
 80048ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f040 8089 	bne.w	80049c8 <_dtoa_r+0x8d8>
 80048b6:	9b03      	ldr	r3, [sp, #12]
 80048b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80048bc:	0d1b      	lsrs	r3, r3, #20
 80048be:	051b      	lsls	r3, r3, #20
 80048c0:	b12b      	cbz	r3, 80048ce <_dtoa_r+0x7de>
 80048c2:	9b08      	ldr	r3, [sp, #32]
 80048c4:	3301      	adds	r3, #1
 80048c6:	9308      	str	r3, [sp, #32]
 80048c8:	f108 0801 	add.w	r8, r8, #1
 80048cc:	2301      	movs	r3, #1
 80048ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80048d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f000 81b0 	beq.w	8004c38 <_dtoa_r+0xb48>
 80048d8:	6923      	ldr	r3, [r4, #16]
 80048da:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80048de:	6918      	ldr	r0, [r3, #16]
 80048e0:	f000 face 	bl	8004e80 <__hi0bits>
 80048e4:	f1c0 0020 	rsb	r0, r0, #32
 80048e8:	9b08      	ldr	r3, [sp, #32]
 80048ea:	4418      	add	r0, r3
 80048ec:	f010 001f 	ands.w	r0, r0, #31
 80048f0:	d077      	beq.n	80049e2 <_dtoa_r+0x8f2>
 80048f2:	f1c0 0320 	rsb	r3, r0, #32
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	dd6b      	ble.n	80049d2 <_dtoa_r+0x8e2>
 80048fa:	9b08      	ldr	r3, [sp, #32]
 80048fc:	f1c0 001c 	rsb	r0, r0, #28
 8004900:	4403      	add	r3, r0
 8004902:	4480      	add	r8, r0
 8004904:	4406      	add	r6, r0
 8004906:	9308      	str	r3, [sp, #32]
 8004908:	f1b8 0f00 	cmp.w	r8, #0
 800490c:	dd05      	ble.n	800491a <_dtoa_r+0x82a>
 800490e:	4649      	mov	r1, r9
 8004910:	4642      	mov	r2, r8
 8004912:	4658      	mov	r0, fp
 8004914:	f000 fc1a 	bl	800514c <__lshift>
 8004918:	4681      	mov	r9, r0
 800491a:	9b08      	ldr	r3, [sp, #32]
 800491c:	2b00      	cmp	r3, #0
 800491e:	dd05      	ble.n	800492c <_dtoa_r+0x83c>
 8004920:	4621      	mov	r1, r4
 8004922:	461a      	mov	r2, r3
 8004924:	4658      	mov	r0, fp
 8004926:	f000 fc11 	bl	800514c <__lshift>
 800492a:	4604      	mov	r4, r0
 800492c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800492e:	2b00      	cmp	r3, #0
 8004930:	d059      	beq.n	80049e6 <_dtoa_r+0x8f6>
 8004932:	4621      	mov	r1, r4
 8004934:	4648      	mov	r0, r9
 8004936:	f000 fc75 	bl	8005224 <__mcmp>
 800493a:	2800      	cmp	r0, #0
 800493c:	da53      	bge.n	80049e6 <_dtoa_r+0x8f6>
 800493e:	1e7b      	subs	r3, r7, #1
 8004940:	9304      	str	r3, [sp, #16]
 8004942:	4649      	mov	r1, r9
 8004944:	2300      	movs	r3, #0
 8004946:	220a      	movs	r2, #10
 8004948:	4658      	mov	r0, fp
 800494a:	f000 fa53 	bl	8004df4 <__multadd>
 800494e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004950:	4681      	mov	r9, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	f000 8172 	beq.w	8004c3c <_dtoa_r+0xb4c>
 8004958:	2300      	movs	r3, #0
 800495a:	4629      	mov	r1, r5
 800495c:	220a      	movs	r2, #10
 800495e:	4658      	mov	r0, fp
 8004960:	f000 fa48 	bl	8004df4 <__multadd>
 8004964:	9b00      	ldr	r3, [sp, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	4605      	mov	r5, r0
 800496a:	dc67      	bgt.n	8004a3c <_dtoa_r+0x94c>
 800496c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800496e:	2b02      	cmp	r3, #2
 8004970:	dc41      	bgt.n	80049f6 <_dtoa_r+0x906>
 8004972:	e063      	b.n	8004a3c <_dtoa_r+0x94c>
 8004974:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004976:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800497a:	e746      	b.n	800480a <_dtoa_r+0x71a>
 800497c:	9b07      	ldr	r3, [sp, #28]
 800497e:	1e5c      	subs	r4, r3, #1
 8004980:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004982:	42a3      	cmp	r3, r4
 8004984:	bfbf      	itttt	lt
 8004986:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004988:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800498a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800498c:	1ae3      	sublt	r3, r4, r3
 800498e:	bfb4      	ite	lt
 8004990:	18d2      	addlt	r2, r2, r3
 8004992:	1b1c      	subge	r4, r3, r4
 8004994:	9b07      	ldr	r3, [sp, #28]
 8004996:	bfbc      	itt	lt
 8004998:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800499a:	2400      	movlt	r4, #0
 800499c:	2b00      	cmp	r3, #0
 800499e:	bfb5      	itete	lt
 80049a0:	eba8 0603 	sublt.w	r6, r8, r3
 80049a4:	9b07      	ldrge	r3, [sp, #28]
 80049a6:	2300      	movlt	r3, #0
 80049a8:	4646      	movge	r6, r8
 80049aa:	e730      	b.n	800480e <_dtoa_r+0x71e>
 80049ac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80049ae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80049b0:	4646      	mov	r6, r8
 80049b2:	e735      	b.n	8004820 <_dtoa_r+0x730>
 80049b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80049b6:	e75c      	b.n	8004872 <_dtoa_r+0x782>
 80049b8:	2300      	movs	r3, #0
 80049ba:	e788      	b.n	80048ce <_dtoa_r+0x7de>
 80049bc:	3fe00000 	.word	0x3fe00000
 80049c0:	40240000 	.word	0x40240000
 80049c4:	40140000 	.word	0x40140000
 80049c8:	9b02      	ldr	r3, [sp, #8]
 80049ca:	e780      	b.n	80048ce <_dtoa_r+0x7de>
 80049cc:	2300      	movs	r3, #0
 80049ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80049d0:	e782      	b.n	80048d8 <_dtoa_r+0x7e8>
 80049d2:	d099      	beq.n	8004908 <_dtoa_r+0x818>
 80049d4:	9a08      	ldr	r2, [sp, #32]
 80049d6:	331c      	adds	r3, #28
 80049d8:	441a      	add	r2, r3
 80049da:	4498      	add	r8, r3
 80049dc:	441e      	add	r6, r3
 80049de:	9208      	str	r2, [sp, #32]
 80049e0:	e792      	b.n	8004908 <_dtoa_r+0x818>
 80049e2:	4603      	mov	r3, r0
 80049e4:	e7f6      	b.n	80049d4 <_dtoa_r+0x8e4>
 80049e6:	9b07      	ldr	r3, [sp, #28]
 80049e8:	9704      	str	r7, [sp, #16]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	dc20      	bgt.n	8004a30 <_dtoa_r+0x940>
 80049ee:	9300      	str	r3, [sp, #0]
 80049f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	dd1e      	ble.n	8004a34 <_dtoa_r+0x944>
 80049f6:	9b00      	ldr	r3, [sp, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f47f aec0 	bne.w	800477e <_dtoa_r+0x68e>
 80049fe:	4621      	mov	r1, r4
 8004a00:	2205      	movs	r2, #5
 8004a02:	4658      	mov	r0, fp
 8004a04:	f000 f9f6 	bl	8004df4 <__multadd>
 8004a08:	4601      	mov	r1, r0
 8004a0a:	4604      	mov	r4, r0
 8004a0c:	4648      	mov	r0, r9
 8004a0e:	f000 fc09 	bl	8005224 <__mcmp>
 8004a12:	2800      	cmp	r0, #0
 8004a14:	f77f aeb3 	ble.w	800477e <_dtoa_r+0x68e>
 8004a18:	4656      	mov	r6, sl
 8004a1a:	2331      	movs	r3, #49	@ 0x31
 8004a1c:	f806 3b01 	strb.w	r3, [r6], #1
 8004a20:	9b04      	ldr	r3, [sp, #16]
 8004a22:	3301      	adds	r3, #1
 8004a24:	9304      	str	r3, [sp, #16]
 8004a26:	e6ae      	b.n	8004786 <_dtoa_r+0x696>
 8004a28:	9c07      	ldr	r4, [sp, #28]
 8004a2a:	9704      	str	r7, [sp, #16]
 8004a2c:	4625      	mov	r5, r4
 8004a2e:	e7f3      	b.n	8004a18 <_dtoa_r+0x928>
 8004a30:	9b07      	ldr	r3, [sp, #28]
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f000 8104 	beq.w	8004c44 <_dtoa_r+0xb54>
 8004a3c:	2e00      	cmp	r6, #0
 8004a3e:	dd05      	ble.n	8004a4c <_dtoa_r+0x95c>
 8004a40:	4629      	mov	r1, r5
 8004a42:	4632      	mov	r2, r6
 8004a44:	4658      	mov	r0, fp
 8004a46:	f000 fb81 	bl	800514c <__lshift>
 8004a4a:	4605      	mov	r5, r0
 8004a4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d05a      	beq.n	8004b08 <_dtoa_r+0xa18>
 8004a52:	6869      	ldr	r1, [r5, #4]
 8004a54:	4658      	mov	r0, fp
 8004a56:	f000 f96b 	bl	8004d30 <_Balloc>
 8004a5a:	4606      	mov	r6, r0
 8004a5c:	b928      	cbnz	r0, 8004a6a <_dtoa_r+0x97a>
 8004a5e:	4b84      	ldr	r3, [pc, #528]	@ (8004c70 <_dtoa_r+0xb80>)
 8004a60:	4602      	mov	r2, r0
 8004a62:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004a66:	f7ff bb5a 	b.w	800411e <_dtoa_r+0x2e>
 8004a6a:	692a      	ldr	r2, [r5, #16]
 8004a6c:	3202      	adds	r2, #2
 8004a6e:	0092      	lsls	r2, r2, #2
 8004a70:	f105 010c 	add.w	r1, r5, #12
 8004a74:	300c      	adds	r0, #12
 8004a76:	f7ff faa4 	bl	8003fc2 <memcpy>
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	4631      	mov	r1, r6
 8004a7e:	4658      	mov	r0, fp
 8004a80:	f000 fb64 	bl	800514c <__lshift>
 8004a84:	f10a 0301 	add.w	r3, sl, #1
 8004a88:	9307      	str	r3, [sp, #28]
 8004a8a:	9b00      	ldr	r3, [sp, #0]
 8004a8c:	4453      	add	r3, sl
 8004a8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004a90:	9b02      	ldr	r3, [sp, #8]
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	462f      	mov	r7, r5
 8004a98:	930a      	str	r3, [sp, #40]	@ 0x28
 8004a9a:	4605      	mov	r5, r0
 8004a9c:	9b07      	ldr	r3, [sp, #28]
 8004a9e:	4621      	mov	r1, r4
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	4648      	mov	r0, r9
 8004aa4:	9300      	str	r3, [sp, #0]
 8004aa6:	f7ff fa9a 	bl	8003fde <quorem>
 8004aaa:	4639      	mov	r1, r7
 8004aac:	9002      	str	r0, [sp, #8]
 8004aae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004ab2:	4648      	mov	r0, r9
 8004ab4:	f000 fbb6 	bl	8005224 <__mcmp>
 8004ab8:	462a      	mov	r2, r5
 8004aba:	9008      	str	r0, [sp, #32]
 8004abc:	4621      	mov	r1, r4
 8004abe:	4658      	mov	r0, fp
 8004ac0:	f000 fbcc 	bl	800525c <__mdiff>
 8004ac4:	68c2      	ldr	r2, [r0, #12]
 8004ac6:	4606      	mov	r6, r0
 8004ac8:	bb02      	cbnz	r2, 8004b0c <_dtoa_r+0xa1c>
 8004aca:	4601      	mov	r1, r0
 8004acc:	4648      	mov	r0, r9
 8004ace:	f000 fba9 	bl	8005224 <__mcmp>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	4631      	mov	r1, r6
 8004ad6:	4658      	mov	r0, fp
 8004ad8:	920e      	str	r2, [sp, #56]	@ 0x38
 8004ada:	f000 f969 	bl	8004db0 <_Bfree>
 8004ade:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ae0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004ae2:	9e07      	ldr	r6, [sp, #28]
 8004ae4:	ea43 0102 	orr.w	r1, r3, r2
 8004ae8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004aea:	4319      	orrs	r1, r3
 8004aec:	d110      	bne.n	8004b10 <_dtoa_r+0xa20>
 8004aee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004af2:	d029      	beq.n	8004b48 <_dtoa_r+0xa58>
 8004af4:	9b08      	ldr	r3, [sp, #32]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	dd02      	ble.n	8004b00 <_dtoa_r+0xa10>
 8004afa:	9b02      	ldr	r3, [sp, #8]
 8004afc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004b00:	9b00      	ldr	r3, [sp, #0]
 8004b02:	f883 8000 	strb.w	r8, [r3]
 8004b06:	e63f      	b.n	8004788 <_dtoa_r+0x698>
 8004b08:	4628      	mov	r0, r5
 8004b0a:	e7bb      	b.n	8004a84 <_dtoa_r+0x994>
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	e7e1      	b.n	8004ad4 <_dtoa_r+0x9e4>
 8004b10:	9b08      	ldr	r3, [sp, #32]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	db04      	blt.n	8004b20 <_dtoa_r+0xa30>
 8004b16:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004b18:	430b      	orrs	r3, r1
 8004b1a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004b1c:	430b      	orrs	r3, r1
 8004b1e:	d120      	bne.n	8004b62 <_dtoa_r+0xa72>
 8004b20:	2a00      	cmp	r2, #0
 8004b22:	dded      	ble.n	8004b00 <_dtoa_r+0xa10>
 8004b24:	4649      	mov	r1, r9
 8004b26:	2201      	movs	r2, #1
 8004b28:	4658      	mov	r0, fp
 8004b2a:	f000 fb0f 	bl	800514c <__lshift>
 8004b2e:	4621      	mov	r1, r4
 8004b30:	4681      	mov	r9, r0
 8004b32:	f000 fb77 	bl	8005224 <__mcmp>
 8004b36:	2800      	cmp	r0, #0
 8004b38:	dc03      	bgt.n	8004b42 <_dtoa_r+0xa52>
 8004b3a:	d1e1      	bne.n	8004b00 <_dtoa_r+0xa10>
 8004b3c:	f018 0f01 	tst.w	r8, #1
 8004b40:	d0de      	beq.n	8004b00 <_dtoa_r+0xa10>
 8004b42:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004b46:	d1d8      	bne.n	8004afa <_dtoa_r+0xa0a>
 8004b48:	9a00      	ldr	r2, [sp, #0]
 8004b4a:	2339      	movs	r3, #57	@ 0x39
 8004b4c:	7013      	strb	r3, [r2, #0]
 8004b4e:	4633      	mov	r3, r6
 8004b50:	461e      	mov	r6, r3
 8004b52:	3b01      	subs	r3, #1
 8004b54:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004b58:	2a39      	cmp	r2, #57	@ 0x39
 8004b5a:	d052      	beq.n	8004c02 <_dtoa_r+0xb12>
 8004b5c:	3201      	adds	r2, #1
 8004b5e:	701a      	strb	r2, [r3, #0]
 8004b60:	e612      	b.n	8004788 <_dtoa_r+0x698>
 8004b62:	2a00      	cmp	r2, #0
 8004b64:	dd07      	ble.n	8004b76 <_dtoa_r+0xa86>
 8004b66:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004b6a:	d0ed      	beq.n	8004b48 <_dtoa_r+0xa58>
 8004b6c:	9a00      	ldr	r2, [sp, #0]
 8004b6e:	f108 0301 	add.w	r3, r8, #1
 8004b72:	7013      	strb	r3, [r2, #0]
 8004b74:	e608      	b.n	8004788 <_dtoa_r+0x698>
 8004b76:	9b07      	ldr	r3, [sp, #28]
 8004b78:	9a07      	ldr	r2, [sp, #28]
 8004b7a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8004b7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d028      	beq.n	8004bd6 <_dtoa_r+0xae6>
 8004b84:	4649      	mov	r1, r9
 8004b86:	2300      	movs	r3, #0
 8004b88:	220a      	movs	r2, #10
 8004b8a:	4658      	mov	r0, fp
 8004b8c:	f000 f932 	bl	8004df4 <__multadd>
 8004b90:	42af      	cmp	r7, r5
 8004b92:	4681      	mov	r9, r0
 8004b94:	f04f 0300 	mov.w	r3, #0
 8004b98:	f04f 020a 	mov.w	r2, #10
 8004b9c:	4639      	mov	r1, r7
 8004b9e:	4658      	mov	r0, fp
 8004ba0:	d107      	bne.n	8004bb2 <_dtoa_r+0xac2>
 8004ba2:	f000 f927 	bl	8004df4 <__multadd>
 8004ba6:	4607      	mov	r7, r0
 8004ba8:	4605      	mov	r5, r0
 8004baa:	9b07      	ldr	r3, [sp, #28]
 8004bac:	3301      	adds	r3, #1
 8004bae:	9307      	str	r3, [sp, #28]
 8004bb0:	e774      	b.n	8004a9c <_dtoa_r+0x9ac>
 8004bb2:	f000 f91f 	bl	8004df4 <__multadd>
 8004bb6:	4629      	mov	r1, r5
 8004bb8:	4607      	mov	r7, r0
 8004bba:	2300      	movs	r3, #0
 8004bbc:	220a      	movs	r2, #10
 8004bbe:	4658      	mov	r0, fp
 8004bc0:	f000 f918 	bl	8004df4 <__multadd>
 8004bc4:	4605      	mov	r5, r0
 8004bc6:	e7f0      	b.n	8004baa <_dtoa_r+0xaba>
 8004bc8:	9b00      	ldr	r3, [sp, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	bfcc      	ite	gt
 8004bce:	461e      	movgt	r6, r3
 8004bd0:	2601      	movle	r6, #1
 8004bd2:	4456      	add	r6, sl
 8004bd4:	2700      	movs	r7, #0
 8004bd6:	4649      	mov	r1, r9
 8004bd8:	2201      	movs	r2, #1
 8004bda:	4658      	mov	r0, fp
 8004bdc:	f000 fab6 	bl	800514c <__lshift>
 8004be0:	4621      	mov	r1, r4
 8004be2:	4681      	mov	r9, r0
 8004be4:	f000 fb1e 	bl	8005224 <__mcmp>
 8004be8:	2800      	cmp	r0, #0
 8004bea:	dcb0      	bgt.n	8004b4e <_dtoa_r+0xa5e>
 8004bec:	d102      	bne.n	8004bf4 <_dtoa_r+0xb04>
 8004bee:	f018 0f01 	tst.w	r8, #1
 8004bf2:	d1ac      	bne.n	8004b4e <_dtoa_r+0xa5e>
 8004bf4:	4633      	mov	r3, r6
 8004bf6:	461e      	mov	r6, r3
 8004bf8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004bfc:	2a30      	cmp	r2, #48	@ 0x30
 8004bfe:	d0fa      	beq.n	8004bf6 <_dtoa_r+0xb06>
 8004c00:	e5c2      	b.n	8004788 <_dtoa_r+0x698>
 8004c02:	459a      	cmp	sl, r3
 8004c04:	d1a4      	bne.n	8004b50 <_dtoa_r+0xa60>
 8004c06:	9b04      	ldr	r3, [sp, #16]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	9304      	str	r3, [sp, #16]
 8004c0c:	2331      	movs	r3, #49	@ 0x31
 8004c0e:	f88a 3000 	strb.w	r3, [sl]
 8004c12:	e5b9      	b.n	8004788 <_dtoa_r+0x698>
 8004c14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004c16:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8004c74 <_dtoa_r+0xb84>
 8004c1a:	b11b      	cbz	r3, 8004c24 <_dtoa_r+0xb34>
 8004c1c:	f10a 0308 	add.w	r3, sl, #8
 8004c20:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004c22:	6013      	str	r3, [r2, #0]
 8004c24:	4650      	mov	r0, sl
 8004c26:	b019      	add	sp, #100	@ 0x64
 8004c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	f77f ae37 	ble.w	80048a2 <_dtoa_r+0x7b2>
 8004c34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004c36:	930a      	str	r3, [sp, #40]	@ 0x28
 8004c38:	2001      	movs	r0, #1
 8004c3a:	e655      	b.n	80048e8 <_dtoa_r+0x7f8>
 8004c3c:	9b00      	ldr	r3, [sp, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	f77f aed6 	ble.w	80049f0 <_dtoa_r+0x900>
 8004c44:	4656      	mov	r6, sl
 8004c46:	4621      	mov	r1, r4
 8004c48:	4648      	mov	r0, r9
 8004c4a:	f7ff f9c8 	bl	8003fde <quorem>
 8004c4e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004c52:	f806 8b01 	strb.w	r8, [r6], #1
 8004c56:	9b00      	ldr	r3, [sp, #0]
 8004c58:	eba6 020a 	sub.w	r2, r6, sl
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	ddb3      	ble.n	8004bc8 <_dtoa_r+0xad8>
 8004c60:	4649      	mov	r1, r9
 8004c62:	2300      	movs	r3, #0
 8004c64:	220a      	movs	r2, #10
 8004c66:	4658      	mov	r0, fp
 8004c68:	f000 f8c4 	bl	8004df4 <__multadd>
 8004c6c:	4681      	mov	r9, r0
 8004c6e:	e7ea      	b.n	8004c46 <_dtoa_r+0xb56>
 8004c70:	08005f9c 	.word	0x08005f9c
 8004c74:	08005f20 	.word	0x08005f20

08004c78 <_free_r>:
 8004c78:	b538      	push	{r3, r4, r5, lr}
 8004c7a:	4605      	mov	r5, r0
 8004c7c:	2900      	cmp	r1, #0
 8004c7e:	d041      	beq.n	8004d04 <_free_r+0x8c>
 8004c80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c84:	1f0c      	subs	r4, r1, #4
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	bfb8      	it	lt
 8004c8a:	18e4      	addlt	r4, r4, r3
 8004c8c:	f7fe fb32 	bl	80032f4 <__malloc_lock>
 8004c90:	4a1d      	ldr	r2, [pc, #116]	@ (8004d08 <_free_r+0x90>)
 8004c92:	6813      	ldr	r3, [r2, #0]
 8004c94:	b933      	cbnz	r3, 8004ca4 <_free_r+0x2c>
 8004c96:	6063      	str	r3, [r4, #4]
 8004c98:	6014      	str	r4, [r2, #0]
 8004c9a:	4628      	mov	r0, r5
 8004c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ca0:	f7fe bb2e 	b.w	8003300 <__malloc_unlock>
 8004ca4:	42a3      	cmp	r3, r4
 8004ca6:	d908      	bls.n	8004cba <_free_r+0x42>
 8004ca8:	6820      	ldr	r0, [r4, #0]
 8004caa:	1821      	adds	r1, r4, r0
 8004cac:	428b      	cmp	r3, r1
 8004cae:	bf01      	itttt	eq
 8004cb0:	6819      	ldreq	r1, [r3, #0]
 8004cb2:	685b      	ldreq	r3, [r3, #4]
 8004cb4:	1809      	addeq	r1, r1, r0
 8004cb6:	6021      	streq	r1, [r4, #0]
 8004cb8:	e7ed      	b.n	8004c96 <_free_r+0x1e>
 8004cba:	461a      	mov	r2, r3
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	b10b      	cbz	r3, 8004cc4 <_free_r+0x4c>
 8004cc0:	42a3      	cmp	r3, r4
 8004cc2:	d9fa      	bls.n	8004cba <_free_r+0x42>
 8004cc4:	6811      	ldr	r1, [r2, #0]
 8004cc6:	1850      	adds	r0, r2, r1
 8004cc8:	42a0      	cmp	r0, r4
 8004cca:	d10b      	bne.n	8004ce4 <_free_r+0x6c>
 8004ccc:	6820      	ldr	r0, [r4, #0]
 8004cce:	4401      	add	r1, r0
 8004cd0:	1850      	adds	r0, r2, r1
 8004cd2:	4283      	cmp	r3, r0
 8004cd4:	6011      	str	r1, [r2, #0]
 8004cd6:	d1e0      	bne.n	8004c9a <_free_r+0x22>
 8004cd8:	6818      	ldr	r0, [r3, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	6053      	str	r3, [r2, #4]
 8004cde:	4408      	add	r0, r1
 8004ce0:	6010      	str	r0, [r2, #0]
 8004ce2:	e7da      	b.n	8004c9a <_free_r+0x22>
 8004ce4:	d902      	bls.n	8004cec <_free_r+0x74>
 8004ce6:	230c      	movs	r3, #12
 8004ce8:	602b      	str	r3, [r5, #0]
 8004cea:	e7d6      	b.n	8004c9a <_free_r+0x22>
 8004cec:	6820      	ldr	r0, [r4, #0]
 8004cee:	1821      	adds	r1, r4, r0
 8004cf0:	428b      	cmp	r3, r1
 8004cf2:	bf04      	itt	eq
 8004cf4:	6819      	ldreq	r1, [r3, #0]
 8004cf6:	685b      	ldreq	r3, [r3, #4]
 8004cf8:	6063      	str	r3, [r4, #4]
 8004cfa:	bf04      	itt	eq
 8004cfc:	1809      	addeq	r1, r1, r0
 8004cfe:	6021      	streq	r1, [r4, #0]
 8004d00:	6054      	str	r4, [r2, #4]
 8004d02:	e7ca      	b.n	8004c9a <_free_r+0x22>
 8004d04:	bd38      	pop	{r3, r4, r5, pc}
 8004d06:	bf00      	nop
 8004d08:	20000578 	.word	0x20000578

08004d0c <__ascii_mbtowc>:
 8004d0c:	b082      	sub	sp, #8
 8004d0e:	b901      	cbnz	r1, 8004d12 <__ascii_mbtowc+0x6>
 8004d10:	a901      	add	r1, sp, #4
 8004d12:	b142      	cbz	r2, 8004d26 <__ascii_mbtowc+0x1a>
 8004d14:	b14b      	cbz	r3, 8004d2a <__ascii_mbtowc+0x1e>
 8004d16:	7813      	ldrb	r3, [r2, #0]
 8004d18:	600b      	str	r3, [r1, #0]
 8004d1a:	7812      	ldrb	r2, [r2, #0]
 8004d1c:	1e10      	subs	r0, r2, #0
 8004d1e:	bf18      	it	ne
 8004d20:	2001      	movne	r0, #1
 8004d22:	b002      	add	sp, #8
 8004d24:	4770      	bx	lr
 8004d26:	4610      	mov	r0, r2
 8004d28:	e7fb      	b.n	8004d22 <__ascii_mbtowc+0x16>
 8004d2a:	f06f 0001 	mvn.w	r0, #1
 8004d2e:	e7f8      	b.n	8004d22 <__ascii_mbtowc+0x16>

08004d30 <_Balloc>:
 8004d30:	b570      	push	{r4, r5, r6, lr}
 8004d32:	69c6      	ldr	r6, [r0, #28]
 8004d34:	4604      	mov	r4, r0
 8004d36:	460d      	mov	r5, r1
 8004d38:	b976      	cbnz	r6, 8004d58 <_Balloc+0x28>
 8004d3a:	2010      	movs	r0, #16
 8004d3c:	f7fe fa28 	bl	8003190 <malloc>
 8004d40:	4602      	mov	r2, r0
 8004d42:	61e0      	str	r0, [r4, #28]
 8004d44:	b920      	cbnz	r0, 8004d50 <_Balloc+0x20>
 8004d46:	4b18      	ldr	r3, [pc, #96]	@ (8004da8 <_Balloc+0x78>)
 8004d48:	4818      	ldr	r0, [pc, #96]	@ (8004dac <_Balloc+0x7c>)
 8004d4a:	216b      	movs	r1, #107	@ 0x6b
 8004d4c:	f000 fc2c 	bl	80055a8 <__assert_func>
 8004d50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004d54:	6006      	str	r6, [r0, #0]
 8004d56:	60c6      	str	r6, [r0, #12]
 8004d58:	69e6      	ldr	r6, [r4, #28]
 8004d5a:	68f3      	ldr	r3, [r6, #12]
 8004d5c:	b183      	cbz	r3, 8004d80 <_Balloc+0x50>
 8004d5e:	69e3      	ldr	r3, [r4, #28]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004d66:	b9b8      	cbnz	r0, 8004d98 <_Balloc+0x68>
 8004d68:	2101      	movs	r1, #1
 8004d6a:	fa01 f605 	lsl.w	r6, r1, r5
 8004d6e:	1d72      	adds	r2, r6, #5
 8004d70:	0092      	lsls	r2, r2, #2
 8004d72:	4620      	mov	r0, r4
 8004d74:	f000 fc36 	bl	80055e4 <_calloc_r>
 8004d78:	b160      	cbz	r0, 8004d94 <_Balloc+0x64>
 8004d7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004d7e:	e00e      	b.n	8004d9e <_Balloc+0x6e>
 8004d80:	2221      	movs	r2, #33	@ 0x21
 8004d82:	2104      	movs	r1, #4
 8004d84:	4620      	mov	r0, r4
 8004d86:	f000 fc2d 	bl	80055e4 <_calloc_r>
 8004d8a:	69e3      	ldr	r3, [r4, #28]
 8004d8c:	60f0      	str	r0, [r6, #12]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d1e4      	bne.n	8004d5e <_Balloc+0x2e>
 8004d94:	2000      	movs	r0, #0
 8004d96:	bd70      	pop	{r4, r5, r6, pc}
 8004d98:	6802      	ldr	r2, [r0, #0]
 8004d9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004d9e:	2300      	movs	r3, #0
 8004da0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004da4:	e7f7      	b.n	8004d96 <_Balloc+0x66>
 8004da6:	bf00      	nop
 8004da8:	08005f2d 	.word	0x08005f2d
 8004dac:	08005fad 	.word	0x08005fad

08004db0 <_Bfree>:
 8004db0:	b570      	push	{r4, r5, r6, lr}
 8004db2:	69c6      	ldr	r6, [r0, #28]
 8004db4:	4605      	mov	r5, r0
 8004db6:	460c      	mov	r4, r1
 8004db8:	b976      	cbnz	r6, 8004dd8 <_Bfree+0x28>
 8004dba:	2010      	movs	r0, #16
 8004dbc:	f7fe f9e8 	bl	8003190 <malloc>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	61e8      	str	r0, [r5, #28]
 8004dc4:	b920      	cbnz	r0, 8004dd0 <_Bfree+0x20>
 8004dc6:	4b09      	ldr	r3, [pc, #36]	@ (8004dec <_Bfree+0x3c>)
 8004dc8:	4809      	ldr	r0, [pc, #36]	@ (8004df0 <_Bfree+0x40>)
 8004dca:	218f      	movs	r1, #143	@ 0x8f
 8004dcc:	f000 fbec 	bl	80055a8 <__assert_func>
 8004dd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004dd4:	6006      	str	r6, [r0, #0]
 8004dd6:	60c6      	str	r6, [r0, #12]
 8004dd8:	b13c      	cbz	r4, 8004dea <_Bfree+0x3a>
 8004dda:	69eb      	ldr	r3, [r5, #28]
 8004ddc:	6862      	ldr	r2, [r4, #4]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004de4:	6021      	str	r1, [r4, #0]
 8004de6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004dea:	bd70      	pop	{r4, r5, r6, pc}
 8004dec:	08005f2d 	.word	0x08005f2d
 8004df0:	08005fad 	.word	0x08005fad

08004df4 <__multadd>:
 8004df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004df8:	690d      	ldr	r5, [r1, #16]
 8004dfa:	4607      	mov	r7, r0
 8004dfc:	460c      	mov	r4, r1
 8004dfe:	461e      	mov	r6, r3
 8004e00:	f101 0c14 	add.w	ip, r1, #20
 8004e04:	2000      	movs	r0, #0
 8004e06:	f8dc 3000 	ldr.w	r3, [ip]
 8004e0a:	b299      	uxth	r1, r3
 8004e0c:	fb02 6101 	mla	r1, r2, r1, r6
 8004e10:	0c1e      	lsrs	r6, r3, #16
 8004e12:	0c0b      	lsrs	r3, r1, #16
 8004e14:	fb02 3306 	mla	r3, r2, r6, r3
 8004e18:	b289      	uxth	r1, r1
 8004e1a:	3001      	adds	r0, #1
 8004e1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004e20:	4285      	cmp	r5, r0
 8004e22:	f84c 1b04 	str.w	r1, [ip], #4
 8004e26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004e2a:	dcec      	bgt.n	8004e06 <__multadd+0x12>
 8004e2c:	b30e      	cbz	r6, 8004e72 <__multadd+0x7e>
 8004e2e:	68a3      	ldr	r3, [r4, #8]
 8004e30:	42ab      	cmp	r3, r5
 8004e32:	dc19      	bgt.n	8004e68 <__multadd+0x74>
 8004e34:	6861      	ldr	r1, [r4, #4]
 8004e36:	4638      	mov	r0, r7
 8004e38:	3101      	adds	r1, #1
 8004e3a:	f7ff ff79 	bl	8004d30 <_Balloc>
 8004e3e:	4680      	mov	r8, r0
 8004e40:	b928      	cbnz	r0, 8004e4e <__multadd+0x5a>
 8004e42:	4602      	mov	r2, r0
 8004e44:	4b0c      	ldr	r3, [pc, #48]	@ (8004e78 <__multadd+0x84>)
 8004e46:	480d      	ldr	r0, [pc, #52]	@ (8004e7c <__multadd+0x88>)
 8004e48:	21ba      	movs	r1, #186	@ 0xba
 8004e4a:	f000 fbad 	bl	80055a8 <__assert_func>
 8004e4e:	6922      	ldr	r2, [r4, #16]
 8004e50:	3202      	adds	r2, #2
 8004e52:	f104 010c 	add.w	r1, r4, #12
 8004e56:	0092      	lsls	r2, r2, #2
 8004e58:	300c      	adds	r0, #12
 8004e5a:	f7ff f8b2 	bl	8003fc2 <memcpy>
 8004e5e:	4621      	mov	r1, r4
 8004e60:	4638      	mov	r0, r7
 8004e62:	f7ff ffa5 	bl	8004db0 <_Bfree>
 8004e66:	4644      	mov	r4, r8
 8004e68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004e6c:	3501      	adds	r5, #1
 8004e6e:	615e      	str	r6, [r3, #20]
 8004e70:	6125      	str	r5, [r4, #16]
 8004e72:	4620      	mov	r0, r4
 8004e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e78:	08005f9c 	.word	0x08005f9c
 8004e7c:	08005fad 	.word	0x08005fad

08004e80 <__hi0bits>:
 8004e80:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004e84:	4603      	mov	r3, r0
 8004e86:	bf36      	itet	cc
 8004e88:	0403      	lslcc	r3, r0, #16
 8004e8a:	2000      	movcs	r0, #0
 8004e8c:	2010      	movcc	r0, #16
 8004e8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e92:	bf3c      	itt	cc
 8004e94:	021b      	lslcc	r3, r3, #8
 8004e96:	3008      	addcc	r0, #8
 8004e98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e9c:	bf3c      	itt	cc
 8004e9e:	011b      	lslcc	r3, r3, #4
 8004ea0:	3004      	addcc	r0, #4
 8004ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ea6:	bf3c      	itt	cc
 8004ea8:	009b      	lslcc	r3, r3, #2
 8004eaa:	3002      	addcc	r0, #2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	db05      	blt.n	8004ebc <__hi0bits+0x3c>
 8004eb0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004eb4:	f100 0001 	add.w	r0, r0, #1
 8004eb8:	bf08      	it	eq
 8004eba:	2020      	moveq	r0, #32
 8004ebc:	4770      	bx	lr

08004ebe <__lo0bits>:
 8004ebe:	6803      	ldr	r3, [r0, #0]
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	f013 0007 	ands.w	r0, r3, #7
 8004ec6:	d00b      	beq.n	8004ee0 <__lo0bits+0x22>
 8004ec8:	07d9      	lsls	r1, r3, #31
 8004eca:	d421      	bmi.n	8004f10 <__lo0bits+0x52>
 8004ecc:	0798      	lsls	r0, r3, #30
 8004ece:	bf49      	itett	mi
 8004ed0:	085b      	lsrmi	r3, r3, #1
 8004ed2:	089b      	lsrpl	r3, r3, #2
 8004ed4:	2001      	movmi	r0, #1
 8004ed6:	6013      	strmi	r3, [r2, #0]
 8004ed8:	bf5c      	itt	pl
 8004eda:	6013      	strpl	r3, [r2, #0]
 8004edc:	2002      	movpl	r0, #2
 8004ede:	4770      	bx	lr
 8004ee0:	b299      	uxth	r1, r3
 8004ee2:	b909      	cbnz	r1, 8004ee8 <__lo0bits+0x2a>
 8004ee4:	0c1b      	lsrs	r3, r3, #16
 8004ee6:	2010      	movs	r0, #16
 8004ee8:	b2d9      	uxtb	r1, r3
 8004eea:	b909      	cbnz	r1, 8004ef0 <__lo0bits+0x32>
 8004eec:	3008      	adds	r0, #8
 8004eee:	0a1b      	lsrs	r3, r3, #8
 8004ef0:	0719      	lsls	r1, r3, #28
 8004ef2:	bf04      	itt	eq
 8004ef4:	091b      	lsreq	r3, r3, #4
 8004ef6:	3004      	addeq	r0, #4
 8004ef8:	0799      	lsls	r1, r3, #30
 8004efa:	bf04      	itt	eq
 8004efc:	089b      	lsreq	r3, r3, #2
 8004efe:	3002      	addeq	r0, #2
 8004f00:	07d9      	lsls	r1, r3, #31
 8004f02:	d403      	bmi.n	8004f0c <__lo0bits+0x4e>
 8004f04:	085b      	lsrs	r3, r3, #1
 8004f06:	f100 0001 	add.w	r0, r0, #1
 8004f0a:	d003      	beq.n	8004f14 <__lo0bits+0x56>
 8004f0c:	6013      	str	r3, [r2, #0]
 8004f0e:	4770      	bx	lr
 8004f10:	2000      	movs	r0, #0
 8004f12:	4770      	bx	lr
 8004f14:	2020      	movs	r0, #32
 8004f16:	4770      	bx	lr

08004f18 <__i2b>:
 8004f18:	b510      	push	{r4, lr}
 8004f1a:	460c      	mov	r4, r1
 8004f1c:	2101      	movs	r1, #1
 8004f1e:	f7ff ff07 	bl	8004d30 <_Balloc>
 8004f22:	4602      	mov	r2, r0
 8004f24:	b928      	cbnz	r0, 8004f32 <__i2b+0x1a>
 8004f26:	4b05      	ldr	r3, [pc, #20]	@ (8004f3c <__i2b+0x24>)
 8004f28:	4805      	ldr	r0, [pc, #20]	@ (8004f40 <__i2b+0x28>)
 8004f2a:	f240 1145 	movw	r1, #325	@ 0x145
 8004f2e:	f000 fb3b 	bl	80055a8 <__assert_func>
 8004f32:	2301      	movs	r3, #1
 8004f34:	6144      	str	r4, [r0, #20]
 8004f36:	6103      	str	r3, [r0, #16]
 8004f38:	bd10      	pop	{r4, pc}
 8004f3a:	bf00      	nop
 8004f3c:	08005f9c 	.word	0x08005f9c
 8004f40:	08005fad 	.word	0x08005fad

08004f44 <__multiply>:
 8004f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f48:	4614      	mov	r4, r2
 8004f4a:	690a      	ldr	r2, [r1, #16]
 8004f4c:	6923      	ldr	r3, [r4, #16]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	bfa8      	it	ge
 8004f52:	4623      	movge	r3, r4
 8004f54:	460f      	mov	r7, r1
 8004f56:	bfa4      	itt	ge
 8004f58:	460c      	movge	r4, r1
 8004f5a:	461f      	movge	r7, r3
 8004f5c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004f60:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8004f64:	68a3      	ldr	r3, [r4, #8]
 8004f66:	6861      	ldr	r1, [r4, #4]
 8004f68:	eb0a 0609 	add.w	r6, sl, r9
 8004f6c:	42b3      	cmp	r3, r6
 8004f6e:	b085      	sub	sp, #20
 8004f70:	bfb8      	it	lt
 8004f72:	3101      	addlt	r1, #1
 8004f74:	f7ff fedc 	bl	8004d30 <_Balloc>
 8004f78:	b930      	cbnz	r0, 8004f88 <__multiply+0x44>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	4b44      	ldr	r3, [pc, #272]	@ (8005090 <__multiply+0x14c>)
 8004f7e:	4845      	ldr	r0, [pc, #276]	@ (8005094 <__multiply+0x150>)
 8004f80:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004f84:	f000 fb10 	bl	80055a8 <__assert_func>
 8004f88:	f100 0514 	add.w	r5, r0, #20
 8004f8c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004f90:	462b      	mov	r3, r5
 8004f92:	2200      	movs	r2, #0
 8004f94:	4543      	cmp	r3, r8
 8004f96:	d321      	bcc.n	8004fdc <__multiply+0x98>
 8004f98:	f107 0114 	add.w	r1, r7, #20
 8004f9c:	f104 0214 	add.w	r2, r4, #20
 8004fa0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8004fa4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8004fa8:	9302      	str	r3, [sp, #8]
 8004faa:	1b13      	subs	r3, r2, r4
 8004fac:	3b15      	subs	r3, #21
 8004fae:	f023 0303 	bic.w	r3, r3, #3
 8004fb2:	3304      	adds	r3, #4
 8004fb4:	f104 0715 	add.w	r7, r4, #21
 8004fb8:	42ba      	cmp	r2, r7
 8004fba:	bf38      	it	cc
 8004fbc:	2304      	movcc	r3, #4
 8004fbe:	9301      	str	r3, [sp, #4]
 8004fc0:	9b02      	ldr	r3, [sp, #8]
 8004fc2:	9103      	str	r1, [sp, #12]
 8004fc4:	428b      	cmp	r3, r1
 8004fc6:	d80c      	bhi.n	8004fe2 <__multiply+0x9e>
 8004fc8:	2e00      	cmp	r6, #0
 8004fca:	dd03      	ble.n	8004fd4 <__multiply+0x90>
 8004fcc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d05b      	beq.n	800508c <__multiply+0x148>
 8004fd4:	6106      	str	r6, [r0, #16]
 8004fd6:	b005      	add	sp, #20
 8004fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fdc:	f843 2b04 	str.w	r2, [r3], #4
 8004fe0:	e7d8      	b.n	8004f94 <__multiply+0x50>
 8004fe2:	f8b1 a000 	ldrh.w	sl, [r1]
 8004fe6:	f1ba 0f00 	cmp.w	sl, #0
 8004fea:	d024      	beq.n	8005036 <__multiply+0xf2>
 8004fec:	f104 0e14 	add.w	lr, r4, #20
 8004ff0:	46a9      	mov	r9, r5
 8004ff2:	f04f 0c00 	mov.w	ip, #0
 8004ff6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004ffa:	f8d9 3000 	ldr.w	r3, [r9]
 8004ffe:	fa1f fb87 	uxth.w	fp, r7
 8005002:	b29b      	uxth	r3, r3
 8005004:	fb0a 330b 	mla	r3, sl, fp, r3
 8005008:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800500c:	f8d9 7000 	ldr.w	r7, [r9]
 8005010:	4463      	add	r3, ip
 8005012:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005016:	fb0a c70b 	mla	r7, sl, fp, ip
 800501a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800501e:	b29b      	uxth	r3, r3
 8005020:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005024:	4572      	cmp	r2, lr
 8005026:	f849 3b04 	str.w	r3, [r9], #4
 800502a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800502e:	d8e2      	bhi.n	8004ff6 <__multiply+0xb2>
 8005030:	9b01      	ldr	r3, [sp, #4]
 8005032:	f845 c003 	str.w	ip, [r5, r3]
 8005036:	9b03      	ldr	r3, [sp, #12]
 8005038:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800503c:	3104      	adds	r1, #4
 800503e:	f1b9 0f00 	cmp.w	r9, #0
 8005042:	d021      	beq.n	8005088 <__multiply+0x144>
 8005044:	682b      	ldr	r3, [r5, #0]
 8005046:	f104 0c14 	add.w	ip, r4, #20
 800504a:	46ae      	mov	lr, r5
 800504c:	f04f 0a00 	mov.w	sl, #0
 8005050:	f8bc b000 	ldrh.w	fp, [ip]
 8005054:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005058:	fb09 770b 	mla	r7, r9, fp, r7
 800505c:	4457      	add	r7, sl
 800505e:	b29b      	uxth	r3, r3
 8005060:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005064:	f84e 3b04 	str.w	r3, [lr], #4
 8005068:	f85c 3b04 	ldr.w	r3, [ip], #4
 800506c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005070:	f8be 3000 	ldrh.w	r3, [lr]
 8005074:	fb09 330a 	mla	r3, r9, sl, r3
 8005078:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800507c:	4562      	cmp	r2, ip
 800507e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005082:	d8e5      	bhi.n	8005050 <__multiply+0x10c>
 8005084:	9f01      	ldr	r7, [sp, #4]
 8005086:	51eb      	str	r3, [r5, r7]
 8005088:	3504      	adds	r5, #4
 800508a:	e799      	b.n	8004fc0 <__multiply+0x7c>
 800508c:	3e01      	subs	r6, #1
 800508e:	e79b      	b.n	8004fc8 <__multiply+0x84>
 8005090:	08005f9c 	.word	0x08005f9c
 8005094:	08005fad 	.word	0x08005fad

08005098 <__pow5mult>:
 8005098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800509c:	4615      	mov	r5, r2
 800509e:	f012 0203 	ands.w	r2, r2, #3
 80050a2:	4607      	mov	r7, r0
 80050a4:	460e      	mov	r6, r1
 80050a6:	d007      	beq.n	80050b8 <__pow5mult+0x20>
 80050a8:	4c25      	ldr	r4, [pc, #148]	@ (8005140 <__pow5mult+0xa8>)
 80050aa:	3a01      	subs	r2, #1
 80050ac:	2300      	movs	r3, #0
 80050ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80050b2:	f7ff fe9f 	bl	8004df4 <__multadd>
 80050b6:	4606      	mov	r6, r0
 80050b8:	10ad      	asrs	r5, r5, #2
 80050ba:	d03d      	beq.n	8005138 <__pow5mult+0xa0>
 80050bc:	69fc      	ldr	r4, [r7, #28]
 80050be:	b97c      	cbnz	r4, 80050e0 <__pow5mult+0x48>
 80050c0:	2010      	movs	r0, #16
 80050c2:	f7fe f865 	bl	8003190 <malloc>
 80050c6:	4602      	mov	r2, r0
 80050c8:	61f8      	str	r0, [r7, #28]
 80050ca:	b928      	cbnz	r0, 80050d8 <__pow5mult+0x40>
 80050cc:	4b1d      	ldr	r3, [pc, #116]	@ (8005144 <__pow5mult+0xac>)
 80050ce:	481e      	ldr	r0, [pc, #120]	@ (8005148 <__pow5mult+0xb0>)
 80050d0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80050d4:	f000 fa68 	bl	80055a8 <__assert_func>
 80050d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80050dc:	6004      	str	r4, [r0, #0]
 80050de:	60c4      	str	r4, [r0, #12]
 80050e0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80050e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80050e8:	b94c      	cbnz	r4, 80050fe <__pow5mult+0x66>
 80050ea:	f240 2171 	movw	r1, #625	@ 0x271
 80050ee:	4638      	mov	r0, r7
 80050f0:	f7ff ff12 	bl	8004f18 <__i2b>
 80050f4:	2300      	movs	r3, #0
 80050f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80050fa:	4604      	mov	r4, r0
 80050fc:	6003      	str	r3, [r0, #0]
 80050fe:	f04f 0900 	mov.w	r9, #0
 8005102:	07eb      	lsls	r3, r5, #31
 8005104:	d50a      	bpl.n	800511c <__pow5mult+0x84>
 8005106:	4631      	mov	r1, r6
 8005108:	4622      	mov	r2, r4
 800510a:	4638      	mov	r0, r7
 800510c:	f7ff ff1a 	bl	8004f44 <__multiply>
 8005110:	4631      	mov	r1, r6
 8005112:	4680      	mov	r8, r0
 8005114:	4638      	mov	r0, r7
 8005116:	f7ff fe4b 	bl	8004db0 <_Bfree>
 800511a:	4646      	mov	r6, r8
 800511c:	106d      	asrs	r5, r5, #1
 800511e:	d00b      	beq.n	8005138 <__pow5mult+0xa0>
 8005120:	6820      	ldr	r0, [r4, #0]
 8005122:	b938      	cbnz	r0, 8005134 <__pow5mult+0x9c>
 8005124:	4622      	mov	r2, r4
 8005126:	4621      	mov	r1, r4
 8005128:	4638      	mov	r0, r7
 800512a:	f7ff ff0b 	bl	8004f44 <__multiply>
 800512e:	6020      	str	r0, [r4, #0]
 8005130:	f8c0 9000 	str.w	r9, [r0]
 8005134:	4604      	mov	r4, r0
 8005136:	e7e4      	b.n	8005102 <__pow5mult+0x6a>
 8005138:	4630      	mov	r0, r6
 800513a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800513e:	bf00      	nop
 8005140:	08006008 	.word	0x08006008
 8005144:	08005f2d 	.word	0x08005f2d
 8005148:	08005fad 	.word	0x08005fad

0800514c <__lshift>:
 800514c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005150:	460c      	mov	r4, r1
 8005152:	6849      	ldr	r1, [r1, #4]
 8005154:	6923      	ldr	r3, [r4, #16]
 8005156:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800515a:	68a3      	ldr	r3, [r4, #8]
 800515c:	4607      	mov	r7, r0
 800515e:	4691      	mov	r9, r2
 8005160:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005164:	f108 0601 	add.w	r6, r8, #1
 8005168:	42b3      	cmp	r3, r6
 800516a:	db0b      	blt.n	8005184 <__lshift+0x38>
 800516c:	4638      	mov	r0, r7
 800516e:	f7ff fddf 	bl	8004d30 <_Balloc>
 8005172:	4605      	mov	r5, r0
 8005174:	b948      	cbnz	r0, 800518a <__lshift+0x3e>
 8005176:	4602      	mov	r2, r0
 8005178:	4b28      	ldr	r3, [pc, #160]	@ (800521c <__lshift+0xd0>)
 800517a:	4829      	ldr	r0, [pc, #164]	@ (8005220 <__lshift+0xd4>)
 800517c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005180:	f000 fa12 	bl	80055a8 <__assert_func>
 8005184:	3101      	adds	r1, #1
 8005186:	005b      	lsls	r3, r3, #1
 8005188:	e7ee      	b.n	8005168 <__lshift+0x1c>
 800518a:	2300      	movs	r3, #0
 800518c:	f100 0114 	add.w	r1, r0, #20
 8005190:	f100 0210 	add.w	r2, r0, #16
 8005194:	4618      	mov	r0, r3
 8005196:	4553      	cmp	r3, sl
 8005198:	db33      	blt.n	8005202 <__lshift+0xb6>
 800519a:	6920      	ldr	r0, [r4, #16]
 800519c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80051a0:	f104 0314 	add.w	r3, r4, #20
 80051a4:	f019 091f 	ands.w	r9, r9, #31
 80051a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80051ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80051b0:	d02b      	beq.n	800520a <__lshift+0xbe>
 80051b2:	f1c9 0e20 	rsb	lr, r9, #32
 80051b6:	468a      	mov	sl, r1
 80051b8:	2200      	movs	r2, #0
 80051ba:	6818      	ldr	r0, [r3, #0]
 80051bc:	fa00 f009 	lsl.w	r0, r0, r9
 80051c0:	4310      	orrs	r0, r2
 80051c2:	f84a 0b04 	str.w	r0, [sl], #4
 80051c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80051ca:	459c      	cmp	ip, r3
 80051cc:	fa22 f20e 	lsr.w	r2, r2, lr
 80051d0:	d8f3      	bhi.n	80051ba <__lshift+0x6e>
 80051d2:	ebac 0304 	sub.w	r3, ip, r4
 80051d6:	3b15      	subs	r3, #21
 80051d8:	f023 0303 	bic.w	r3, r3, #3
 80051dc:	3304      	adds	r3, #4
 80051de:	f104 0015 	add.w	r0, r4, #21
 80051e2:	4584      	cmp	ip, r0
 80051e4:	bf38      	it	cc
 80051e6:	2304      	movcc	r3, #4
 80051e8:	50ca      	str	r2, [r1, r3]
 80051ea:	b10a      	cbz	r2, 80051f0 <__lshift+0xa4>
 80051ec:	f108 0602 	add.w	r6, r8, #2
 80051f0:	3e01      	subs	r6, #1
 80051f2:	4638      	mov	r0, r7
 80051f4:	612e      	str	r6, [r5, #16]
 80051f6:	4621      	mov	r1, r4
 80051f8:	f7ff fdda 	bl	8004db0 <_Bfree>
 80051fc:	4628      	mov	r0, r5
 80051fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005202:	f842 0f04 	str.w	r0, [r2, #4]!
 8005206:	3301      	adds	r3, #1
 8005208:	e7c5      	b.n	8005196 <__lshift+0x4a>
 800520a:	3904      	subs	r1, #4
 800520c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005210:	f841 2f04 	str.w	r2, [r1, #4]!
 8005214:	459c      	cmp	ip, r3
 8005216:	d8f9      	bhi.n	800520c <__lshift+0xc0>
 8005218:	e7ea      	b.n	80051f0 <__lshift+0xa4>
 800521a:	bf00      	nop
 800521c:	08005f9c 	.word	0x08005f9c
 8005220:	08005fad 	.word	0x08005fad

08005224 <__mcmp>:
 8005224:	690a      	ldr	r2, [r1, #16]
 8005226:	4603      	mov	r3, r0
 8005228:	6900      	ldr	r0, [r0, #16]
 800522a:	1a80      	subs	r0, r0, r2
 800522c:	b530      	push	{r4, r5, lr}
 800522e:	d10e      	bne.n	800524e <__mcmp+0x2a>
 8005230:	3314      	adds	r3, #20
 8005232:	3114      	adds	r1, #20
 8005234:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005238:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800523c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005240:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005244:	4295      	cmp	r5, r2
 8005246:	d003      	beq.n	8005250 <__mcmp+0x2c>
 8005248:	d205      	bcs.n	8005256 <__mcmp+0x32>
 800524a:	f04f 30ff 	mov.w	r0, #4294967295
 800524e:	bd30      	pop	{r4, r5, pc}
 8005250:	42a3      	cmp	r3, r4
 8005252:	d3f3      	bcc.n	800523c <__mcmp+0x18>
 8005254:	e7fb      	b.n	800524e <__mcmp+0x2a>
 8005256:	2001      	movs	r0, #1
 8005258:	e7f9      	b.n	800524e <__mcmp+0x2a>
	...

0800525c <__mdiff>:
 800525c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005260:	4689      	mov	r9, r1
 8005262:	4606      	mov	r6, r0
 8005264:	4611      	mov	r1, r2
 8005266:	4648      	mov	r0, r9
 8005268:	4614      	mov	r4, r2
 800526a:	f7ff ffdb 	bl	8005224 <__mcmp>
 800526e:	1e05      	subs	r5, r0, #0
 8005270:	d112      	bne.n	8005298 <__mdiff+0x3c>
 8005272:	4629      	mov	r1, r5
 8005274:	4630      	mov	r0, r6
 8005276:	f7ff fd5b 	bl	8004d30 <_Balloc>
 800527a:	4602      	mov	r2, r0
 800527c:	b928      	cbnz	r0, 800528a <__mdiff+0x2e>
 800527e:	4b3f      	ldr	r3, [pc, #252]	@ (800537c <__mdiff+0x120>)
 8005280:	f240 2137 	movw	r1, #567	@ 0x237
 8005284:	483e      	ldr	r0, [pc, #248]	@ (8005380 <__mdiff+0x124>)
 8005286:	f000 f98f 	bl	80055a8 <__assert_func>
 800528a:	2301      	movs	r3, #1
 800528c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005290:	4610      	mov	r0, r2
 8005292:	b003      	add	sp, #12
 8005294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005298:	bfbc      	itt	lt
 800529a:	464b      	movlt	r3, r9
 800529c:	46a1      	movlt	r9, r4
 800529e:	4630      	mov	r0, r6
 80052a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80052a4:	bfba      	itte	lt
 80052a6:	461c      	movlt	r4, r3
 80052a8:	2501      	movlt	r5, #1
 80052aa:	2500      	movge	r5, #0
 80052ac:	f7ff fd40 	bl	8004d30 <_Balloc>
 80052b0:	4602      	mov	r2, r0
 80052b2:	b918      	cbnz	r0, 80052bc <__mdiff+0x60>
 80052b4:	4b31      	ldr	r3, [pc, #196]	@ (800537c <__mdiff+0x120>)
 80052b6:	f240 2145 	movw	r1, #581	@ 0x245
 80052ba:	e7e3      	b.n	8005284 <__mdiff+0x28>
 80052bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80052c0:	6926      	ldr	r6, [r4, #16]
 80052c2:	60c5      	str	r5, [r0, #12]
 80052c4:	f109 0310 	add.w	r3, r9, #16
 80052c8:	f109 0514 	add.w	r5, r9, #20
 80052cc:	f104 0e14 	add.w	lr, r4, #20
 80052d0:	f100 0b14 	add.w	fp, r0, #20
 80052d4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80052d8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80052dc:	9301      	str	r3, [sp, #4]
 80052de:	46d9      	mov	r9, fp
 80052e0:	f04f 0c00 	mov.w	ip, #0
 80052e4:	9b01      	ldr	r3, [sp, #4]
 80052e6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80052ea:	f853 af04 	ldr.w	sl, [r3, #4]!
 80052ee:	9301      	str	r3, [sp, #4]
 80052f0:	fa1f f38a 	uxth.w	r3, sl
 80052f4:	4619      	mov	r1, r3
 80052f6:	b283      	uxth	r3, r0
 80052f8:	1acb      	subs	r3, r1, r3
 80052fa:	0c00      	lsrs	r0, r0, #16
 80052fc:	4463      	add	r3, ip
 80052fe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005302:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005306:	b29b      	uxth	r3, r3
 8005308:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800530c:	4576      	cmp	r6, lr
 800530e:	f849 3b04 	str.w	r3, [r9], #4
 8005312:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005316:	d8e5      	bhi.n	80052e4 <__mdiff+0x88>
 8005318:	1b33      	subs	r3, r6, r4
 800531a:	3b15      	subs	r3, #21
 800531c:	f023 0303 	bic.w	r3, r3, #3
 8005320:	3415      	adds	r4, #21
 8005322:	3304      	adds	r3, #4
 8005324:	42a6      	cmp	r6, r4
 8005326:	bf38      	it	cc
 8005328:	2304      	movcc	r3, #4
 800532a:	441d      	add	r5, r3
 800532c:	445b      	add	r3, fp
 800532e:	461e      	mov	r6, r3
 8005330:	462c      	mov	r4, r5
 8005332:	4544      	cmp	r4, r8
 8005334:	d30e      	bcc.n	8005354 <__mdiff+0xf8>
 8005336:	f108 0103 	add.w	r1, r8, #3
 800533a:	1b49      	subs	r1, r1, r5
 800533c:	f021 0103 	bic.w	r1, r1, #3
 8005340:	3d03      	subs	r5, #3
 8005342:	45a8      	cmp	r8, r5
 8005344:	bf38      	it	cc
 8005346:	2100      	movcc	r1, #0
 8005348:	440b      	add	r3, r1
 800534a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800534e:	b191      	cbz	r1, 8005376 <__mdiff+0x11a>
 8005350:	6117      	str	r7, [r2, #16]
 8005352:	e79d      	b.n	8005290 <__mdiff+0x34>
 8005354:	f854 1b04 	ldr.w	r1, [r4], #4
 8005358:	46e6      	mov	lr, ip
 800535a:	0c08      	lsrs	r0, r1, #16
 800535c:	fa1c fc81 	uxtah	ip, ip, r1
 8005360:	4471      	add	r1, lr
 8005362:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005366:	b289      	uxth	r1, r1
 8005368:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800536c:	f846 1b04 	str.w	r1, [r6], #4
 8005370:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005374:	e7dd      	b.n	8005332 <__mdiff+0xd6>
 8005376:	3f01      	subs	r7, #1
 8005378:	e7e7      	b.n	800534a <__mdiff+0xee>
 800537a:	bf00      	nop
 800537c:	08005f9c 	.word	0x08005f9c
 8005380:	08005fad 	.word	0x08005fad

08005384 <__d2b>:
 8005384:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005388:	460f      	mov	r7, r1
 800538a:	2101      	movs	r1, #1
 800538c:	ec59 8b10 	vmov	r8, r9, d0
 8005390:	4616      	mov	r6, r2
 8005392:	f7ff fccd 	bl	8004d30 <_Balloc>
 8005396:	4604      	mov	r4, r0
 8005398:	b930      	cbnz	r0, 80053a8 <__d2b+0x24>
 800539a:	4602      	mov	r2, r0
 800539c:	4b23      	ldr	r3, [pc, #140]	@ (800542c <__d2b+0xa8>)
 800539e:	4824      	ldr	r0, [pc, #144]	@ (8005430 <__d2b+0xac>)
 80053a0:	f240 310f 	movw	r1, #783	@ 0x30f
 80053a4:	f000 f900 	bl	80055a8 <__assert_func>
 80053a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80053ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80053b0:	b10d      	cbz	r5, 80053b6 <__d2b+0x32>
 80053b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053b6:	9301      	str	r3, [sp, #4]
 80053b8:	f1b8 0300 	subs.w	r3, r8, #0
 80053bc:	d023      	beq.n	8005406 <__d2b+0x82>
 80053be:	4668      	mov	r0, sp
 80053c0:	9300      	str	r3, [sp, #0]
 80053c2:	f7ff fd7c 	bl	8004ebe <__lo0bits>
 80053c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80053ca:	b1d0      	cbz	r0, 8005402 <__d2b+0x7e>
 80053cc:	f1c0 0320 	rsb	r3, r0, #32
 80053d0:	fa02 f303 	lsl.w	r3, r2, r3
 80053d4:	430b      	orrs	r3, r1
 80053d6:	40c2      	lsrs	r2, r0
 80053d8:	6163      	str	r3, [r4, #20]
 80053da:	9201      	str	r2, [sp, #4]
 80053dc:	9b01      	ldr	r3, [sp, #4]
 80053de:	61a3      	str	r3, [r4, #24]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	bf0c      	ite	eq
 80053e4:	2201      	moveq	r2, #1
 80053e6:	2202      	movne	r2, #2
 80053e8:	6122      	str	r2, [r4, #16]
 80053ea:	b1a5      	cbz	r5, 8005416 <__d2b+0x92>
 80053ec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80053f0:	4405      	add	r5, r0
 80053f2:	603d      	str	r5, [r7, #0]
 80053f4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80053f8:	6030      	str	r0, [r6, #0]
 80053fa:	4620      	mov	r0, r4
 80053fc:	b003      	add	sp, #12
 80053fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005402:	6161      	str	r1, [r4, #20]
 8005404:	e7ea      	b.n	80053dc <__d2b+0x58>
 8005406:	a801      	add	r0, sp, #4
 8005408:	f7ff fd59 	bl	8004ebe <__lo0bits>
 800540c:	9b01      	ldr	r3, [sp, #4]
 800540e:	6163      	str	r3, [r4, #20]
 8005410:	3020      	adds	r0, #32
 8005412:	2201      	movs	r2, #1
 8005414:	e7e8      	b.n	80053e8 <__d2b+0x64>
 8005416:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800541a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800541e:	6038      	str	r0, [r7, #0]
 8005420:	6918      	ldr	r0, [r3, #16]
 8005422:	f7ff fd2d 	bl	8004e80 <__hi0bits>
 8005426:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800542a:	e7e5      	b.n	80053f8 <__d2b+0x74>
 800542c:	08005f9c 	.word	0x08005f9c
 8005430:	08005fad 	.word	0x08005fad

08005434 <__ascii_wctomb>:
 8005434:	4603      	mov	r3, r0
 8005436:	4608      	mov	r0, r1
 8005438:	b141      	cbz	r1, 800544c <__ascii_wctomb+0x18>
 800543a:	2aff      	cmp	r2, #255	@ 0xff
 800543c:	d904      	bls.n	8005448 <__ascii_wctomb+0x14>
 800543e:	228a      	movs	r2, #138	@ 0x8a
 8005440:	601a      	str	r2, [r3, #0]
 8005442:	f04f 30ff 	mov.w	r0, #4294967295
 8005446:	4770      	bx	lr
 8005448:	700a      	strb	r2, [r1, #0]
 800544a:	2001      	movs	r0, #1
 800544c:	4770      	bx	lr
	...

08005450 <__sflush_r>:
 8005450:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005458:	0716      	lsls	r6, r2, #28
 800545a:	4605      	mov	r5, r0
 800545c:	460c      	mov	r4, r1
 800545e:	d454      	bmi.n	800550a <__sflush_r+0xba>
 8005460:	684b      	ldr	r3, [r1, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	dc02      	bgt.n	800546c <__sflush_r+0x1c>
 8005466:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005468:	2b00      	cmp	r3, #0
 800546a:	dd48      	ble.n	80054fe <__sflush_r+0xae>
 800546c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800546e:	2e00      	cmp	r6, #0
 8005470:	d045      	beq.n	80054fe <__sflush_r+0xae>
 8005472:	2300      	movs	r3, #0
 8005474:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005478:	682f      	ldr	r7, [r5, #0]
 800547a:	6a21      	ldr	r1, [r4, #32]
 800547c:	602b      	str	r3, [r5, #0]
 800547e:	d030      	beq.n	80054e2 <__sflush_r+0x92>
 8005480:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005482:	89a3      	ldrh	r3, [r4, #12]
 8005484:	0759      	lsls	r1, r3, #29
 8005486:	d505      	bpl.n	8005494 <__sflush_r+0x44>
 8005488:	6863      	ldr	r3, [r4, #4]
 800548a:	1ad2      	subs	r2, r2, r3
 800548c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800548e:	b10b      	cbz	r3, 8005494 <__sflush_r+0x44>
 8005490:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005492:	1ad2      	subs	r2, r2, r3
 8005494:	2300      	movs	r3, #0
 8005496:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005498:	6a21      	ldr	r1, [r4, #32]
 800549a:	4628      	mov	r0, r5
 800549c:	47b0      	blx	r6
 800549e:	1c43      	adds	r3, r0, #1
 80054a0:	89a3      	ldrh	r3, [r4, #12]
 80054a2:	d106      	bne.n	80054b2 <__sflush_r+0x62>
 80054a4:	6829      	ldr	r1, [r5, #0]
 80054a6:	291d      	cmp	r1, #29
 80054a8:	d82b      	bhi.n	8005502 <__sflush_r+0xb2>
 80054aa:	4a2a      	ldr	r2, [pc, #168]	@ (8005554 <__sflush_r+0x104>)
 80054ac:	410a      	asrs	r2, r1
 80054ae:	07d6      	lsls	r6, r2, #31
 80054b0:	d427      	bmi.n	8005502 <__sflush_r+0xb2>
 80054b2:	2200      	movs	r2, #0
 80054b4:	6062      	str	r2, [r4, #4]
 80054b6:	04d9      	lsls	r1, r3, #19
 80054b8:	6922      	ldr	r2, [r4, #16]
 80054ba:	6022      	str	r2, [r4, #0]
 80054bc:	d504      	bpl.n	80054c8 <__sflush_r+0x78>
 80054be:	1c42      	adds	r2, r0, #1
 80054c0:	d101      	bne.n	80054c6 <__sflush_r+0x76>
 80054c2:	682b      	ldr	r3, [r5, #0]
 80054c4:	b903      	cbnz	r3, 80054c8 <__sflush_r+0x78>
 80054c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80054c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80054ca:	602f      	str	r7, [r5, #0]
 80054cc:	b1b9      	cbz	r1, 80054fe <__sflush_r+0xae>
 80054ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80054d2:	4299      	cmp	r1, r3
 80054d4:	d002      	beq.n	80054dc <__sflush_r+0x8c>
 80054d6:	4628      	mov	r0, r5
 80054d8:	f7ff fbce 	bl	8004c78 <_free_r>
 80054dc:	2300      	movs	r3, #0
 80054de:	6363      	str	r3, [r4, #52]	@ 0x34
 80054e0:	e00d      	b.n	80054fe <__sflush_r+0xae>
 80054e2:	2301      	movs	r3, #1
 80054e4:	4628      	mov	r0, r5
 80054e6:	47b0      	blx	r6
 80054e8:	4602      	mov	r2, r0
 80054ea:	1c50      	adds	r0, r2, #1
 80054ec:	d1c9      	bne.n	8005482 <__sflush_r+0x32>
 80054ee:	682b      	ldr	r3, [r5, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d0c6      	beq.n	8005482 <__sflush_r+0x32>
 80054f4:	2b1d      	cmp	r3, #29
 80054f6:	d001      	beq.n	80054fc <__sflush_r+0xac>
 80054f8:	2b16      	cmp	r3, #22
 80054fa:	d11e      	bne.n	800553a <__sflush_r+0xea>
 80054fc:	602f      	str	r7, [r5, #0]
 80054fe:	2000      	movs	r0, #0
 8005500:	e022      	b.n	8005548 <__sflush_r+0xf8>
 8005502:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005506:	b21b      	sxth	r3, r3
 8005508:	e01b      	b.n	8005542 <__sflush_r+0xf2>
 800550a:	690f      	ldr	r7, [r1, #16]
 800550c:	2f00      	cmp	r7, #0
 800550e:	d0f6      	beq.n	80054fe <__sflush_r+0xae>
 8005510:	0793      	lsls	r3, r2, #30
 8005512:	680e      	ldr	r6, [r1, #0]
 8005514:	bf08      	it	eq
 8005516:	694b      	ldreq	r3, [r1, #20]
 8005518:	600f      	str	r7, [r1, #0]
 800551a:	bf18      	it	ne
 800551c:	2300      	movne	r3, #0
 800551e:	eba6 0807 	sub.w	r8, r6, r7
 8005522:	608b      	str	r3, [r1, #8]
 8005524:	f1b8 0f00 	cmp.w	r8, #0
 8005528:	dde9      	ble.n	80054fe <__sflush_r+0xae>
 800552a:	6a21      	ldr	r1, [r4, #32]
 800552c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800552e:	4643      	mov	r3, r8
 8005530:	463a      	mov	r2, r7
 8005532:	4628      	mov	r0, r5
 8005534:	47b0      	blx	r6
 8005536:	2800      	cmp	r0, #0
 8005538:	dc08      	bgt.n	800554c <__sflush_r+0xfc>
 800553a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800553e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005542:	81a3      	strh	r3, [r4, #12]
 8005544:	f04f 30ff 	mov.w	r0, #4294967295
 8005548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800554c:	4407      	add	r7, r0
 800554e:	eba8 0800 	sub.w	r8, r8, r0
 8005552:	e7e7      	b.n	8005524 <__sflush_r+0xd4>
 8005554:	dfbffffe 	.word	0xdfbffffe

08005558 <_fflush_r>:
 8005558:	b538      	push	{r3, r4, r5, lr}
 800555a:	690b      	ldr	r3, [r1, #16]
 800555c:	4605      	mov	r5, r0
 800555e:	460c      	mov	r4, r1
 8005560:	b913      	cbnz	r3, 8005568 <_fflush_r+0x10>
 8005562:	2500      	movs	r5, #0
 8005564:	4628      	mov	r0, r5
 8005566:	bd38      	pop	{r3, r4, r5, pc}
 8005568:	b118      	cbz	r0, 8005572 <_fflush_r+0x1a>
 800556a:	6a03      	ldr	r3, [r0, #32]
 800556c:	b90b      	cbnz	r3, 8005572 <_fflush_r+0x1a>
 800556e:	f7fe fbb1 	bl	8003cd4 <__sinit>
 8005572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d0f3      	beq.n	8005562 <_fflush_r+0xa>
 800557a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800557c:	07d0      	lsls	r0, r2, #31
 800557e:	d404      	bmi.n	800558a <_fflush_r+0x32>
 8005580:	0599      	lsls	r1, r3, #22
 8005582:	d402      	bmi.n	800558a <_fflush_r+0x32>
 8005584:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005586:	f7fe fd1a 	bl	8003fbe <__retarget_lock_acquire_recursive>
 800558a:	4628      	mov	r0, r5
 800558c:	4621      	mov	r1, r4
 800558e:	f7ff ff5f 	bl	8005450 <__sflush_r>
 8005592:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005594:	07da      	lsls	r2, r3, #31
 8005596:	4605      	mov	r5, r0
 8005598:	d4e4      	bmi.n	8005564 <_fflush_r+0xc>
 800559a:	89a3      	ldrh	r3, [r4, #12]
 800559c:	059b      	lsls	r3, r3, #22
 800559e:	d4e1      	bmi.n	8005564 <_fflush_r+0xc>
 80055a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80055a2:	f7fe fd0d 	bl	8003fc0 <__retarget_lock_release_recursive>
 80055a6:	e7dd      	b.n	8005564 <_fflush_r+0xc>

080055a8 <__assert_func>:
 80055a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80055aa:	4614      	mov	r4, r2
 80055ac:	461a      	mov	r2, r3
 80055ae:	4b09      	ldr	r3, [pc, #36]	@ (80055d4 <__assert_func+0x2c>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4605      	mov	r5, r0
 80055b4:	68d8      	ldr	r0, [r3, #12]
 80055b6:	b954      	cbnz	r4, 80055ce <__assert_func+0x26>
 80055b8:	4b07      	ldr	r3, [pc, #28]	@ (80055d8 <__assert_func+0x30>)
 80055ba:	461c      	mov	r4, r3
 80055bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80055c0:	9100      	str	r1, [sp, #0]
 80055c2:	462b      	mov	r3, r5
 80055c4:	4905      	ldr	r1, [pc, #20]	@ (80055dc <__assert_func+0x34>)
 80055c6:	f000 f821 	bl	800560c <fiprintf>
 80055ca:	f7fd fdd9 	bl	8003180 <abort>
 80055ce:	4b04      	ldr	r3, [pc, #16]	@ (80055e0 <__assert_func+0x38>)
 80055d0:	e7f4      	b.n	80055bc <__assert_func+0x14>
 80055d2:	bf00      	nop
 80055d4:	20000180 	.word	0x20000180
 80055d8:	08006143 	.word	0x08006143
 80055dc:	08006115 	.word	0x08006115
 80055e0:	08006108 	.word	0x08006108

080055e4 <_calloc_r>:
 80055e4:	b570      	push	{r4, r5, r6, lr}
 80055e6:	fba1 5402 	umull	r5, r4, r1, r2
 80055ea:	b93c      	cbnz	r4, 80055fc <_calloc_r+0x18>
 80055ec:	4629      	mov	r1, r5
 80055ee:	f7fd fe01 	bl	80031f4 <_malloc_r>
 80055f2:	4606      	mov	r6, r0
 80055f4:	b928      	cbnz	r0, 8005602 <_calloc_r+0x1e>
 80055f6:	2600      	movs	r6, #0
 80055f8:	4630      	mov	r0, r6
 80055fa:	bd70      	pop	{r4, r5, r6, pc}
 80055fc:	220c      	movs	r2, #12
 80055fe:	6002      	str	r2, [r0, #0]
 8005600:	e7f9      	b.n	80055f6 <_calloc_r+0x12>
 8005602:	462a      	mov	r2, r5
 8005604:	4621      	mov	r1, r4
 8005606:	f7fe fc08 	bl	8003e1a <memset>
 800560a:	e7f5      	b.n	80055f8 <_calloc_r+0x14>

0800560c <fiprintf>:
 800560c:	b40e      	push	{r1, r2, r3}
 800560e:	b503      	push	{r0, r1, lr}
 8005610:	4601      	mov	r1, r0
 8005612:	ab03      	add	r3, sp, #12
 8005614:	4805      	ldr	r0, [pc, #20]	@ (800562c <fiprintf+0x20>)
 8005616:	f853 2b04 	ldr.w	r2, [r3], #4
 800561a:	6800      	ldr	r0, [r0, #0]
 800561c:	9301      	str	r3, [sp, #4]
 800561e:	f000 f831 	bl	8005684 <_vfiprintf_r>
 8005622:	b002      	add	sp, #8
 8005624:	f85d eb04 	ldr.w	lr, [sp], #4
 8005628:	b003      	add	sp, #12
 800562a:	4770      	bx	lr
 800562c:	20000180 	.word	0x20000180

08005630 <__sfputc_r>:
 8005630:	6893      	ldr	r3, [r2, #8]
 8005632:	3b01      	subs	r3, #1
 8005634:	2b00      	cmp	r3, #0
 8005636:	b410      	push	{r4}
 8005638:	6093      	str	r3, [r2, #8]
 800563a:	da08      	bge.n	800564e <__sfputc_r+0x1e>
 800563c:	6994      	ldr	r4, [r2, #24]
 800563e:	42a3      	cmp	r3, r4
 8005640:	db01      	blt.n	8005646 <__sfputc_r+0x16>
 8005642:	290a      	cmp	r1, #10
 8005644:	d103      	bne.n	800564e <__sfputc_r+0x1e>
 8005646:	f85d 4b04 	ldr.w	r4, [sp], #4
 800564a:	f000 b933 	b.w	80058b4 <__swbuf_r>
 800564e:	6813      	ldr	r3, [r2, #0]
 8005650:	1c58      	adds	r0, r3, #1
 8005652:	6010      	str	r0, [r2, #0]
 8005654:	7019      	strb	r1, [r3, #0]
 8005656:	4608      	mov	r0, r1
 8005658:	f85d 4b04 	ldr.w	r4, [sp], #4
 800565c:	4770      	bx	lr

0800565e <__sfputs_r>:
 800565e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005660:	4606      	mov	r6, r0
 8005662:	460f      	mov	r7, r1
 8005664:	4614      	mov	r4, r2
 8005666:	18d5      	adds	r5, r2, r3
 8005668:	42ac      	cmp	r4, r5
 800566a:	d101      	bne.n	8005670 <__sfputs_r+0x12>
 800566c:	2000      	movs	r0, #0
 800566e:	e007      	b.n	8005680 <__sfputs_r+0x22>
 8005670:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005674:	463a      	mov	r2, r7
 8005676:	4630      	mov	r0, r6
 8005678:	f7ff ffda 	bl	8005630 <__sfputc_r>
 800567c:	1c43      	adds	r3, r0, #1
 800567e:	d1f3      	bne.n	8005668 <__sfputs_r+0xa>
 8005680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005684 <_vfiprintf_r>:
 8005684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005688:	460d      	mov	r5, r1
 800568a:	b09d      	sub	sp, #116	@ 0x74
 800568c:	4614      	mov	r4, r2
 800568e:	4698      	mov	r8, r3
 8005690:	4606      	mov	r6, r0
 8005692:	b118      	cbz	r0, 800569c <_vfiprintf_r+0x18>
 8005694:	6a03      	ldr	r3, [r0, #32]
 8005696:	b90b      	cbnz	r3, 800569c <_vfiprintf_r+0x18>
 8005698:	f7fe fb1c 	bl	8003cd4 <__sinit>
 800569c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800569e:	07d9      	lsls	r1, r3, #31
 80056a0:	d405      	bmi.n	80056ae <_vfiprintf_r+0x2a>
 80056a2:	89ab      	ldrh	r3, [r5, #12]
 80056a4:	059a      	lsls	r2, r3, #22
 80056a6:	d402      	bmi.n	80056ae <_vfiprintf_r+0x2a>
 80056a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80056aa:	f7fe fc88 	bl	8003fbe <__retarget_lock_acquire_recursive>
 80056ae:	89ab      	ldrh	r3, [r5, #12]
 80056b0:	071b      	lsls	r3, r3, #28
 80056b2:	d501      	bpl.n	80056b8 <_vfiprintf_r+0x34>
 80056b4:	692b      	ldr	r3, [r5, #16]
 80056b6:	b99b      	cbnz	r3, 80056e0 <_vfiprintf_r+0x5c>
 80056b8:	4629      	mov	r1, r5
 80056ba:	4630      	mov	r0, r6
 80056bc:	f000 f938 	bl	8005930 <__swsetup_r>
 80056c0:	b170      	cbz	r0, 80056e0 <_vfiprintf_r+0x5c>
 80056c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80056c4:	07dc      	lsls	r4, r3, #31
 80056c6:	d504      	bpl.n	80056d2 <_vfiprintf_r+0x4e>
 80056c8:	f04f 30ff 	mov.w	r0, #4294967295
 80056cc:	b01d      	add	sp, #116	@ 0x74
 80056ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056d2:	89ab      	ldrh	r3, [r5, #12]
 80056d4:	0598      	lsls	r0, r3, #22
 80056d6:	d4f7      	bmi.n	80056c8 <_vfiprintf_r+0x44>
 80056d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80056da:	f7fe fc71 	bl	8003fc0 <__retarget_lock_release_recursive>
 80056de:	e7f3      	b.n	80056c8 <_vfiprintf_r+0x44>
 80056e0:	2300      	movs	r3, #0
 80056e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80056e4:	2320      	movs	r3, #32
 80056e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80056ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80056ee:	2330      	movs	r3, #48	@ 0x30
 80056f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80058a0 <_vfiprintf_r+0x21c>
 80056f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80056f8:	f04f 0901 	mov.w	r9, #1
 80056fc:	4623      	mov	r3, r4
 80056fe:	469a      	mov	sl, r3
 8005700:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005704:	b10a      	cbz	r2, 800570a <_vfiprintf_r+0x86>
 8005706:	2a25      	cmp	r2, #37	@ 0x25
 8005708:	d1f9      	bne.n	80056fe <_vfiprintf_r+0x7a>
 800570a:	ebba 0b04 	subs.w	fp, sl, r4
 800570e:	d00b      	beq.n	8005728 <_vfiprintf_r+0xa4>
 8005710:	465b      	mov	r3, fp
 8005712:	4622      	mov	r2, r4
 8005714:	4629      	mov	r1, r5
 8005716:	4630      	mov	r0, r6
 8005718:	f7ff ffa1 	bl	800565e <__sfputs_r>
 800571c:	3001      	adds	r0, #1
 800571e:	f000 80a7 	beq.w	8005870 <_vfiprintf_r+0x1ec>
 8005722:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005724:	445a      	add	r2, fp
 8005726:	9209      	str	r2, [sp, #36]	@ 0x24
 8005728:	f89a 3000 	ldrb.w	r3, [sl]
 800572c:	2b00      	cmp	r3, #0
 800572e:	f000 809f 	beq.w	8005870 <_vfiprintf_r+0x1ec>
 8005732:	2300      	movs	r3, #0
 8005734:	f04f 32ff 	mov.w	r2, #4294967295
 8005738:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800573c:	f10a 0a01 	add.w	sl, sl, #1
 8005740:	9304      	str	r3, [sp, #16]
 8005742:	9307      	str	r3, [sp, #28]
 8005744:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005748:	931a      	str	r3, [sp, #104]	@ 0x68
 800574a:	4654      	mov	r4, sl
 800574c:	2205      	movs	r2, #5
 800574e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005752:	4853      	ldr	r0, [pc, #332]	@ (80058a0 <_vfiprintf_r+0x21c>)
 8005754:	f7fa fd64 	bl	8000220 <memchr>
 8005758:	9a04      	ldr	r2, [sp, #16]
 800575a:	b9d8      	cbnz	r0, 8005794 <_vfiprintf_r+0x110>
 800575c:	06d1      	lsls	r1, r2, #27
 800575e:	bf44      	itt	mi
 8005760:	2320      	movmi	r3, #32
 8005762:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005766:	0713      	lsls	r3, r2, #28
 8005768:	bf44      	itt	mi
 800576a:	232b      	movmi	r3, #43	@ 0x2b
 800576c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005770:	f89a 3000 	ldrb.w	r3, [sl]
 8005774:	2b2a      	cmp	r3, #42	@ 0x2a
 8005776:	d015      	beq.n	80057a4 <_vfiprintf_r+0x120>
 8005778:	9a07      	ldr	r2, [sp, #28]
 800577a:	4654      	mov	r4, sl
 800577c:	2000      	movs	r0, #0
 800577e:	f04f 0c0a 	mov.w	ip, #10
 8005782:	4621      	mov	r1, r4
 8005784:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005788:	3b30      	subs	r3, #48	@ 0x30
 800578a:	2b09      	cmp	r3, #9
 800578c:	d94b      	bls.n	8005826 <_vfiprintf_r+0x1a2>
 800578e:	b1b0      	cbz	r0, 80057be <_vfiprintf_r+0x13a>
 8005790:	9207      	str	r2, [sp, #28]
 8005792:	e014      	b.n	80057be <_vfiprintf_r+0x13a>
 8005794:	eba0 0308 	sub.w	r3, r0, r8
 8005798:	fa09 f303 	lsl.w	r3, r9, r3
 800579c:	4313      	orrs	r3, r2
 800579e:	9304      	str	r3, [sp, #16]
 80057a0:	46a2      	mov	sl, r4
 80057a2:	e7d2      	b.n	800574a <_vfiprintf_r+0xc6>
 80057a4:	9b03      	ldr	r3, [sp, #12]
 80057a6:	1d19      	adds	r1, r3, #4
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	9103      	str	r1, [sp, #12]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	bfbb      	ittet	lt
 80057b0:	425b      	neglt	r3, r3
 80057b2:	f042 0202 	orrlt.w	r2, r2, #2
 80057b6:	9307      	strge	r3, [sp, #28]
 80057b8:	9307      	strlt	r3, [sp, #28]
 80057ba:	bfb8      	it	lt
 80057bc:	9204      	strlt	r2, [sp, #16]
 80057be:	7823      	ldrb	r3, [r4, #0]
 80057c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80057c2:	d10a      	bne.n	80057da <_vfiprintf_r+0x156>
 80057c4:	7863      	ldrb	r3, [r4, #1]
 80057c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80057c8:	d132      	bne.n	8005830 <_vfiprintf_r+0x1ac>
 80057ca:	9b03      	ldr	r3, [sp, #12]
 80057cc:	1d1a      	adds	r2, r3, #4
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	9203      	str	r2, [sp, #12]
 80057d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80057d6:	3402      	adds	r4, #2
 80057d8:	9305      	str	r3, [sp, #20]
 80057da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80058b0 <_vfiprintf_r+0x22c>
 80057de:	7821      	ldrb	r1, [r4, #0]
 80057e0:	2203      	movs	r2, #3
 80057e2:	4650      	mov	r0, sl
 80057e4:	f7fa fd1c 	bl	8000220 <memchr>
 80057e8:	b138      	cbz	r0, 80057fa <_vfiprintf_r+0x176>
 80057ea:	9b04      	ldr	r3, [sp, #16]
 80057ec:	eba0 000a 	sub.w	r0, r0, sl
 80057f0:	2240      	movs	r2, #64	@ 0x40
 80057f2:	4082      	lsls	r2, r0
 80057f4:	4313      	orrs	r3, r2
 80057f6:	3401      	adds	r4, #1
 80057f8:	9304      	str	r3, [sp, #16]
 80057fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057fe:	4829      	ldr	r0, [pc, #164]	@ (80058a4 <_vfiprintf_r+0x220>)
 8005800:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005804:	2206      	movs	r2, #6
 8005806:	f7fa fd0b 	bl	8000220 <memchr>
 800580a:	2800      	cmp	r0, #0
 800580c:	d03f      	beq.n	800588e <_vfiprintf_r+0x20a>
 800580e:	4b26      	ldr	r3, [pc, #152]	@ (80058a8 <_vfiprintf_r+0x224>)
 8005810:	bb1b      	cbnz	r3, 800585a <_vfiprintf_r+0x1d6>
 8005812:	9b03      	ldr	r3, [sp, #12]
 8005814:	3307      	adds	r3, #7
 8005816:	f023 0307 	bic.w	r3, r3, #7
 800581a:	3308      	adds	r3, #8
 800581c:	9303      	str	r3, [sp, #12]
 800581e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005820:	443b      	add	r3, r7
 8005822:	9309      	str	r3, [sp, #36]	@ 0x24
 8005824:	e76a      	b.n	80056fc <_vfiprintf_r+0x78>
 8005826:	fb0c 3202 	mla	r2, ip, r2, r3
 800582a:	460c      	mov	r4, r1
 800582c:	2001      	movs	r0, #1
 800582e:	e7a8      	b.n	8005782 <_vfiprintf_r+0xfe>
 8005830:	2300      	movs	r3, #0
 8005832:	3401      	adds	r4, #1
 8005834:	9305      	str	r3, [sp, #20]
 8005836:	4619      	mov	r1, r3
 8005838:	f04f 0c0a 	mov.w	ip, #10
 800583c:	4620      	mov	r0, r4
 800583e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005842:	3a30      	subs	r2, #48	@ 0x30
 8005844:	2a09      	cmp	r2, #9
 8005846:	d903      	bls.n	8005850 <_vfiprintf_r+0x1cc>
 8005848:	2b00      	cmp	r3, #0
 800584a:	d0c6      	beq.n	80057da <_vfiprintf_r+0x156>
 800584c:	9105      	str	r1, [sp, #20]
 800584e:	e7c4      	b.n	80057da <_vfiprintf_r+0x156>
 8005850:	fb0c 2101 	mla	r1, ip, r1, r2
 8005854:	4604      	mov	r4, r0
 8005856:	2301      	movs	r3, #1
 8005858:	e7f0      	b.n	800583c <_vfiprintf_r+0x1b8>
 800585a:	ab03      	add	r3, sp, #12
 800585c:	9300      	str	r3, [sp, #0]
 800585e:	462a      	mov	r2, r5
 8005860:	4b12      	ldr	r3, [pc, #72]	@ (80058ac <_vfiprintf_r+0x228>)
 8005862:	a904      	add	r1, sp, #16
 8005864:	4630      	mov	r0, r6
 8005866:	f7fd fdf1 	bl	800344c <_printf_float>
 800586a:	4607      	mov	r7, r0
 800586c:	1c78      	adds	r0, r7, #1
 800586e:	d1d6      	bne.n	800581e <_vfiprintf_r+0x19a>
 8005870:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005872:	07d9      	lsls	r1, r3, #31
 8005874:	d405      	bmi.n	8005882 <_vfiprintf_r+0x1fe>
 8005876:	89ab      	ldrh	r3, [r5, #12]
 8005878:	059a      	lsls	r2, r3, #22
 800587a:	d402      	bmi.n	8005882 <_vfiprintf_r+0x1fe>
 800587c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800587e:	f7fe fb9f 	bl	8003fc0 <__retarget_lock_release_recursive>
 8005882:	89ab      	ldrh	r3, [r5, #12]
 8005884:	065b      	lsls	r3, r3, #25
 8005886:	f53f af1f 	bmi.w	80056c8 <_vfiprintf_r+0x44>
 800588a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800588c:	e71e      	b.n	80056cc <_vfiprintf_r+0x48>
 800588e:	ab03      	add	r3, sp, #12
 8005890:	9300      	str	r3, [sp, #0]
 8005892:	462a      	mov	r2, r5
 8005894:	4b05      	ldr	r3, [pc, #20]	@ (80058ac <_vfiprintf_r+0x228>)
 8005896:	a904      	add	r1, sp, #16
 8005898:	4630      	mov	r0, r6
 800589a:	f7fe f86f 	bl	800397c <_printf_i>
 800589e:	e7e4      	b.n	800586a <_vfiprintf_r+0x1e6>
 80058a0:	08006144 	.word	0x08006144
 80058a4:	0800614e 	.word	0x0800614e
 80058a8:	0800344d 	.word	0x0800344d
 80058ac:	0800565f 	.word	0x0800565f
 80058b0:	0800614a 	.word	0x0800614a

080058b4 <__swbuf_r>:
 80058b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058b6:	460e      	mov	r6, r1
 80058b8:	4614      	mov	r4, r2
 80058ba:	4605      	mov	r5, r0
 80058bc:	b118      	cbz	r0, 80058c6 <__swbuf_r+0x12>
 80058be:	6a03      	ldr	r3, [r0, #32]
 80058c0:	b90b      	cbnz	r3, 80058c6 <__swbuf_r+0x12>
 80058c2:	f7fe fa07 	bl	8003cd4 <__sinit>
 80058c6:	69a3      	ldr	r3, [r4, #24]
 80058c8:	60a3      	str	r3, [r4, #8]
 80058ca:	89a3      	ldrh	r3, [r4, #12]
 80058cc:	071a      	lsls	r2, r3, #28
 80058ce:	d501      	bpl.n	80058d4 <__swbuf_r+0x20>
 80058d0:	6923      	ldr	r3, [r4, #16]
 80058d2:	b943      	cbnz	r3, 80058e6 <__swbuf_r+0x32>
 80058d4:	4621      	mov	r1, r4
 80058d6:	4628      	mov	r0, r5
 80058d8:	f000 f82a 	bl	8005930 <__swsetup_r>
 80058dc:	b118      	cbz	r0, 80058e6 <__swbuf_r+0x32>
 80058de:	f04f 37ff 	mov.w	r7, #4294967295
 80058e2:	4638      	mov	r0, r7
 80058e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058e6:	6823      	ldr	r3, [r4, #0]
 80058e8:	6922      	ldr	r2, [r4, #16]
 80058ea:	1a98      	subs	r0, r3, r2
 80058ec:	6963      	ldr	r3, [r4, #20]
 80058ee:	b2f6      	uxtb	r6, r6
 80058f0:	4283      	cmp	r3, r0
 80058f2:	4637      	mov	r7, r6
 80058f4:	dc05      	bgt.n	8005902 <__swbuf_r+0x4e>
 80058f6:	4621      	mov	r1, r4
 80058f8:	4628      	mov	r0, r5
 80058fa:	f7ff fe2d 	bl	8005558 <_fflush_r>
 80058fe:	2800      	cmp	r0, #0
 8005900:	d1ed      	bne.n	80058de <__swbuf_r+0x2a>
 8005902:	68a3      	ldr	r3, [r4, #8]
 8005904:	3b01      	subs	r3, #1
 8005906:	60a3      	str	r3, [r4, #8]
 8005908:	6823      	ldr	r3, [r4, #0]
 800590a:	1c5a      	adds	r2, r3, #1
 800590c:	6022      	str	r2, [r4, #0]
 800590e:	701e      	strb	r6, [r3, #0]
 8005910:	6962      	ldr	r2, [r4, #20]
 8005912:	1c43      	adds	r3, r0, #1
 8005914:	429a      	cmp	r2, r3
 8005916:	d004      	beq.n	8005922 <__swbuf_r+0x6e>
 8005918:	89a3      	ldrh	r3, [r4, #12]
 800591a:	07db      	lsls	r3, r3, #31
 800591c:	d5e1      	bpl.n	80058e2 <__swbuf_r+0x2e>
 800591e:	2e0a      	cmp	r6, #10
 8005920:	d1df      	bne.n	80058e2 <__swbuf_r+0x2e>
 8005922:	4621      	mov	r1, r4
 8005924:	4628      	mov	r0, r5
 8005926:	f7ff fe17 	bl	8005558 <_fflush_r>
 800592a:	2800      	cmp	r0, #0
 800592c:	d0d9      	beq.n	80058e2 <__swbuf_r+0x2e>
 800592e:	e7d6      	b.n	80058de <__swbuf_r+0x2a>

08005930 <__swsetup_r>:
 8005930:	b538      	push	{r3, r4, r5, lr}
 8005932:	4b29      	ldr	r3, [pc, #164]	@ (80059d8 <__swsetup_r+0xa8>)
 8005934:	4605      	mov	r5, r0
 8005936:	6818      	ldr	r0, [r3, #0]
 8005938:	460c      	mov	r4, r1
 800593a:	b118      	cbz	r0, 8005944 <__swsetup_r+0x14>
 800593c:	6a03      	ldr	r3, [r0, #32]
 800593e:	b90b      	cbnz	r3, 8005944 <__swsetup_r+0x14>
 8005940:	f7fe f9c8 	bl	8003cd4 <__sinit>
 8005944:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005948:	0719      	lsls	r1, r3, #28
 800594a:	d422      	bmi.n	8005992 <__swsetup_r+0x62>
 800594c:	06da      	lsls	r2, r3, #27
 800594e:	d407      	bmi.n	8005960 <__swsetup_r+0x30>
 8005950:	2209      	movs	r2, #9
 8005952:	602a      	str	r2, [r5, #0]
 8005954:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005958:	81a3      	strh	r3, [r4, #12]
 800595a:	f04f 30ff 	mov.w	r0, #4294967295
 800595e:	e033      	b.n	80059c8 <__swsetup_r+0x98>
 8005960:	0758      	lsls	r0, r3, #29
 8005962:	d512      	bpl.n	800598a <__swsetup_r+0x5a>
 8005964:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005966:	b141      	cbz	r1, 800597a <__swsetup_r+0x4a>
 8005968:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800596c:	4299      	cmp	r1, r3
 800596e:	d002      	beq.n	8005976 <__swsetup_r+0x46>
 8005970:	4628      	mov	r0, r5
 8005972:	f7ff f981 	bl	8004c78 <_free_r>
 8005976:	2300      	movs	r3, #0
 8005978:	6363      	str	r3, [r4, #52]	@ 0x34
 800597a:	89a3      	ldrh	r3, [r4, #12]
 800597c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005980:	81a3      	strh	r3, [r4, #12]
 8005982:	2300      	movs	r3, #0
 8005984:	6063      	str	r3, [r4, #4]
 8005986:	6923      	ldr	r3, [r4, #16]
 8005988:	6023      	str	r3, [r4, #0]
 800598a:	89a3      	ldrh	r3, [r4, #12]
 800598c:	f043 0308 	orr.w	r3, r3, #8
 8005990:	81a3      	strh	r3, [r4, #12]
 8005992:	6923      	ldr	r3, [r4, #16]
 8005994:	b94b      	cbnz	r3, 80059aa <__swsetup_r+0x7a>
 8005996:	89a3      	ldrh	r3, [r4, #12]
 8005998:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800599c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059a0:	d003      	beq.n	80059aa <__swsetup_r+0x7a>
 80059a2:	4621      	mov	r1, r4
 80059a4:	4628      	mov	r0, r5
 80059a6:	f000 f83f 	bl	8005a28 <__smakebuf_r>
 80059aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059ae:	f013 0201 	ands.w	r2, r3, #1
 80059b2:	d00a      	beq.n	80059ca <__swsetup_r+0x9a>
 80059b4:	2200      	movs	r2, #0
 80059b6:	60a2      	str	r2, [r4, #8]
 80059b8:	6962      	ldr	r2, [r4, #20]
 80059ba:	4252      	negs	r2, r2
 80059bc:	61a2      	str	r2, [r4, #24]
 80059be:	6922      	ldr	r2, [r4, #16]
 80059c0:	b942      	cbnz	r2, 80059d4 <__swsetup_r+0xa4>
 80059c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80059c6:	d1c5      	bne.n	8005954 <__swsetup_r+0x24>
 80059c8:	bd38      	pop	{r3, r4, r5, pc}
 80059ca:	0799      	lsls	r1, r3, #30
 80059cc:	bf58      	it	pl
 80059ce:	6962      	ldrpl	r2, [r4, #20]
 80059d0:	60a2      	str	r2, [r4, #8]
 80059d2:	e7f4      	b.n	80059be <__swsetup_r+0x8e>
 80059d4:	2000      	movs	r0, #0
 80059d6:	e7f7      	b.n	80059c8 <__swsetup_r+0x98>
 80059d8:	20000180 	.word	0x20000180

080059dc <__swhatbuf_r>:
 80059dc:	b570      	push	{r4, r5, r6, lr}
 80059de:	460c      	mov	r4, r1
 80059e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059e4:	2900      	cmp	r1, #0
 80059e6:	b096      	sub	sp, #88	@ 0x58
 80059e8:	4615      	mov	r5, r2
 80059ea:	461e      	mov	r6, r3
 80059ec:	da0d      	bge.n	8005a0a <__swhatbuf_r+0x2e>
 80059ee:	89a3      	ldrh	r3, [r4, #12]
 80059f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80059f4:	f04f 0100 	mov.w	r1, #0
 80059f8:	bf14      	ite	ne
 80059fa:	2340      	movne	r3, #64	@ 0x40
 80059fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005a00:	2000      	movs	r0, #0
 8005a02:	6031      	str	r1, [r6, #0]
 8005a04:	602b      	str	r3, [r5, #0]
 8005a06:	b016      	add	sp, #88	@ 0x58
 8005a08:	bd70      	pop	{r4, r5, r6, pc}
 8005a0a:	466a      	mov	r2, sp
 8005a0c:	f000 f848 	bl	8005aa0 <_fstat_r>
 8005a10:	2800      	cmp	r0, #0
 8005a12:	dbec      	blt.n	80059ee <__swhatbuf_r+0x12>
 8005a14:	9901      	ldr	r1, [sp, #4]
 8005a16:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005a1a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005a1e:	4259      	negs	r1, r3
 8005a20:	4159      	adcs	r1, r3
 8005a22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a26:	e7eb      	b.n	8005a00 <__swhatbuf_r+0x24>

08005a28 <__smakebuf_r>:
 8005a28:	898b      	ldrh	r3, [r1, #12]
 8005a2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a2c:	079d      	lsls	r5, r3, #30
 8005a2e:	4606      	mov	r6, r0
 8005a30:	460c      	mov	r4, r1
 8005a32:	d507      	bpl.n	8005a44 <__smakebuf_r+0x1c>
 8005a34:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005a38:	6023      	str	r3, [r4, #0]
 8005a3a:	6123      	str	r3, [r4, #16]
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	6163      	str	r3, [r4, #20]
 8005a40:	b003      	add	sp, #12
 8005a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a44:	ab01      	add	r3, sp, #4
 8005a46:	466a      	mov	r2, sp
 8005a48:	f7ff ffc8 	bl	80059dc <__swhatbuf_r>
 8005a4c:	9f00      	ldr	r7, [sp, #0]
 8005a4e:	4605      	mov	r5, r0
 8005a50:	4639      	mov	r1, r7
 8005a52:	4630      	mov	r0, r6
 8005a54:	f7fd fbce 	bl	80031f4 <_malloc_r>
 8005a58:	b948      	cbnz	r0, 8005a6e <__smakebuf_r+0x46>
 8005a5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a5e:	059a      	lsls	r2, r3, #22
 8005a60:	d4ee      	bmi.n	8005a40 <__smakebuf_r+0x18>
 8005a62:	f023 0303 	bic.w	r3, r3, #3
 8005a66:	f043 0302 	orr.w	r3, r3, #2
 8005a6a:	81a3      	strh	r3, [r4, #12]
 8005a6c:	e7e2      	b.n	8005a34 <__smakebuf_r+0xc>
 8005a6e:	89a3      	ldrh	r3, [r4, #12]
 8005a70:	6020      	str	r0, [r4, #0]
 8005a72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a76:	81a3      	strh	r3, [r4, #12]
 8005a78:	9b01      	ldr	r3, [sp, #4]
 8005a7a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005a7e:	b15b      	cbz	r3, 8005a98 <__smakebuf_r+0x70>
 8005a80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a84:	4630      	mov	r0, r6
 8005a86:	f000 f81d 	bl	8005ac4 <_isatty_r>
 8005a8a:	b128      	cbz	r0, 8005a98 <__smakebuf_r+0x70>
 8005a8c:	89a3      	ldrh	r3, [r4, #12]
 8005a8e:	f023 0303 	bic.w	r3, r3, #3
 8005a92:	f043 0301 	orr.w	r3, r3, #1
 8005a96:	81a3      	strh	r3, [r4, #12]
 8005a98:	89a3      	ldrh	r3, [r4, #12]
 8005a9a:	431d      	orrs	r5, r3
 8005a9c:	81a5      	strh	r5, [r4, #12]
 8005a9e:	e7cf      	b.n	8005a40 <__smakebuf_r+0x18>

08005aa0 <_fstat_r>:
 8005aa0:	b538      	push	{r3, r4, r5, lr}
 8005aa2:	4d07      	ldr	r5, [pc, #28]	@ (8005ac0 <_fstat_r+0x20>)
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	4604      	mov	r4, r0
 8005aa8:	4608      	mov	r0, r1
 8005aaa:	4611      	mov	r1, r2
 8005aac:	602b      	str	r3, [r5, #0]
 8005aae:	f7fd f84c 	bl	8002b4a <_fstat>
 8005ab2:	1c43      	adds	r3, r0, #1
 8005ab4:	d102      	bne.n	8005abc <_fstat_r+0x1c>
 8005ab6:	682b      	ldr	r3, [r5, #0]
 8005ab8:	b103      	cbz	r3, 8005abc <_fstat_r+0x1c>
 8005aba:	6023      	str	r3, [r4, #0]
 8005abc:	bd38      	pop	{r3, r4, r5, pc}
 8005abe:	bf00      	nop
 8005ac0:	200006b8 	.word	0x200006b8

08005ac4 <_isatty_r>:
 8005ac4:	b538      	push	{r3, r4, r5, lr}
 8005ac6:	4d06      	ldr	r5, [pc, #24]	@ (8005ae0 <_isatty_r+0x1c>)
 8005ac8:	2300      	movs	r3, #0
 8005aca:	4604      	mov	r4, r0
 8005acc:	4608      	mov	r0, r1
 8005ace:	602b      	str	r3, [r5, #0]
 8005ad0:	f7fd f84b 	bl	8002b6a <_isatty>
 8005ad4:	1c43      	adds	r3, r0, #1
 8005ad6:	d102      	bne.n	8005ade <_isatty_r+0x1a>
 8005ad8:	682b      	ldr	r3, [r5, #0]
 8005ada:	b103      	cbz	r3, 8005ade <_isatty_r+0x1a>
 8005adc:	6023      	str	r3, [r4, #0]
 8005ade:	bd38      	pop	{r3, r4, r5, pc}
 8005ae0:	200006b8 	.word	0x200006b8

08005ae4 <_init>:
 8005ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ae6:	bf00      	nop
 8005ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aea:	bc08      	pop	{r3}
 8005aec:	469e      	mov	lr, r3
 8005aee:	4770      	bx	lr

08005af0 <_fini>:
 8005af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005af2:	bf00      	nop
 8005af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005af6:	bc08      	pop	{r3}
 8005af8:	469e      	mov	lr, r3
 8005afa:	4770      	bx	lr
